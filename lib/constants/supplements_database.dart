/// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫ –∏ –ë–ê–î–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
/// –î–æ–±–∞–≤–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –ª—é–±–æ–º—É –Ω–∞–ø–∏—Ç–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤

enum SupplementType {
  electrolyte('electrolyte', '‚ö°'),
  vitamin('vitamin', 'üíä'),
  mineral('mineral', 'üíé'),
  herbal('herbal', 'üåø'),
  other('other', 'üß™');
  
  final String key;
  final String emoji;
  
  const SupplementType(this.key, this.emoji);
}

/// –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–∫–∏
class Supplement {
  final String id;
  final String nameKey; // –î–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'supplement_salt', 'supplement_magnesium_citrate')
  final SupplementType type;
  final String emoji;
  final String? descriptionKey; // –î–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
  
  // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é (–æ–±—ã—á–Ω–æ 1 —Ç–∞–±–ª–µ—Ç–∫–∞/–ø–∞–∫–µ—Ç–∏–∫/–º–µ—Ä–Ω–∞—è –ª–æ–∂–∫–∞)
  final double? sodiumMg;
  final double? potassiumMg;
  final double? magnesiumMg;
  final double? calciumMg;
  final double? chlorideMg;
  final double? zincMg;
  
  // –í–∏—Ç–∞–º–∏–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  final double? vitaminCMg;
  final double? vitaminDIu;
  final double? vitaminB12Mcg;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  final bool isPremium;
  final bool isPopular;
  final String? warningKey; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è)
  final double defaultServingSize; // –û–±—ã—á–Ω–æ 1.0 = 1 –ø–æ—Ä—Ü–∏—è
  
  const Supplement({
    required this.id,
    required this.nameKey,
    required this.type,
    required this.emoji,
    this.descriptionKey,
    this.sodiumMg,
    this.potassiumMg,
    this.magnesiumMg,
    this.calciumMg,
    this.chlorideMg,
    this.zincMg,
    this.vitaminCMg,
    this.vitaminDIu,
    this.vitaminB12Mcg,
    this.isPremium = true,
    this.isPopular = false,
    this.warningKey,
    this.defaultServingSize = 1.0,
  });
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  String getLocalizedName(dynamic l10n) {
    try {
      return l10n.toJson()[nameKey] ?? nameKey.replaceAll('_', ' ');
    } catch (e) {
      return nameKey.replaceAll('supplement_', '').replaceAll('_', ' ');
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  String? getLocalizedDescription(dynamic l10n) {
    if (descriptionKey == null) return null;
    try {
      return l10n.toJson()[descriptionKey!];
    } catch (e) {
      return null;
    }
  }
}

/// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –¥–æ–±–∞–≤–æ–∫
class SupplementDatabase {
  static const List<Supplement> allSupplements = [
    // ===== –≠–õ–ï–ö–¢–†–û–õ–ò–¢–ù–´–ï –î–û–ë–ê–í–ö–ò =====
    Supplement(
      id: 'salt_regular',
      nameKey: 'supplement_salt',
      type: SupplementType.electrolyte,
      emoji: 'üßÇ',
      descriptionKey: 'supplement_salt_desc',
      sodiumMg: 400, // –Ω–∞ 1–≥ —Å–æ–ª–∏
      chlorideMg: 600,
      isPremium: false,
      isPopular: true,
      defaultServingSize: 1.0, // 1 –≥—Ä–∞–º–º
    ),
    Supplement(
      id: 'salt_himalayan',
      nameKey: 'supplement_himalayan_salt',
      type: SupplementType.electrolyte,
      emoji: 'üèîÔ∏è',
      descriptionKey: 'supplement_himalayan_desc',
      sodiumMg: 380,
      potassiumMg: 2.8,
      magnesiumMg: 1.06,
      calciumMg: 1.6,
      chlorideMg: 590,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'salt_celtic',
      nameKey: 'supplement_celtic_salt',
      type: SupplementType.electrolyte,
      emoji: 'üåä',
      descriptionKey: 'supplement_celtic_desc',
      sodiumMg: 330,
      magnesiumMg: 4.4,
      potassiumMg: 2.9,
      calciumMg: 1.5,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'electrolyte_powder',
      nameKey: 'supplement_electrolyte_powder',
      type: SupplementType.electrolyte,
      emoji: '‚ö°',
      descriptionKey: 'supplement_electrolyte_powder_desc',
      sodiumMg: 500,
      potassiumMg: 200,
      magnesiumMg: 60,
      chlorideMg: 750,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0, // 1 –ø–∞–∫–µ—Ç–∏–∫
    ),
    Supplement(
      id: 'lmnt',
      nameKey: 'supplement_lmnt',
      type: SupplementType.electrolyte,
      emoji: 'üí™',
      descriptionKey: 'supplement_lmnt_desc',
      sodiumMg: 1000,
      potassiumMg: 200,
      magnesiumMg: 60,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'nuun',
      nameKey: 'supplement_nuun',
      type: SupplementType.electrolyte,
      emoji: 'üíß',
      descriptionKey: 'supplement_nuun_desc',
      sodiumMg: 300,
      potassiumMg: 150,
      magnesiumMg: 25,
      calciumMg: 13,
      isPremium: true,
      defaultServingSize: 1.0, // 1 —Ç–∞–±–ª–µ—Ç–∫–∞
    ),
    Supplement(
      id: 'liquid_iv',
      nameKey: 'supplement_liquid_iv',
      type: SupplementType.electrolyte,
      emoji: 'üí¶',
      descriptionKey: 'supplement_liquid_iv_desc',
      sodiumMg: 500,
      potassiumMg: 370,
      vitaminCMg: 78,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0,
    ),
    
    // ===== –ú–ò–ù–ï–†–ê–õ–¨–ù–´–ï –î–û–ë–ê–í–ö–ò =====
    Supplement(
      id: 'magnesium_citrate',
      nameKey: 'supplement_magnesium_citrate',
      type: SupplementType.mineral,
      emoji: 'üíä',
      descriptionKey: 'supplement_magnesium_citrate_desc',
      magnesiumMg: 200,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'magnesium_glycinate',
      nameKey: 'supplement_magnesium_glycinate',
      type: SupplementType.mineral,
      emoji: 'üíä',
      descriptionKey: 'supplement_magnesium_glycinate_desc',
      magnesiumMg: 200,
      isPremium: true,
      warningKey: 'supplement_mag_glycinate_warning',
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'potassium_citrate',
      nameKey: 'supplement_potassium_citrate',
      type: SupplementType.mineral,
      emoji: 'üíä',
      descriptionKey: 'supplement_potassium_citrate_desc',
      potassiumMg: 99, // FDA –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
      isPremium: true,
      warningKey: 'supplement_potassium_warning',
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'calcium_citrate',
      nameKey: 'supplement_calcium_citrate',
      type: SupplementType.mineral,
      emoji: 'üíä',
      descriptionKey: 'supplement_calcium_citrate_desc',
      calciumMg: 200,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'zinc_picolinate',
      nameKey: 'supplement_zinc',
      type: SupplementType.mineral,
      emoji: 'üíä',
      descriptionKey: 'supplement_zinc_desc',
      zincMg: 15,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'trace_minerals',
      nameKey: 'supplement_trace_minerals',
      type: SupplementType.mineral,
      emoji: 'üíß',
      descriptionKey: 'supplement_trace_minerals_desc',
      magnesiumMg: 250,
      chlorideMg: 650,
      sodiumMg: 5,
      potassiumMg: 3,
      isPremium: true,
      defaultServingSize: 2.5, // 2.5 –º–ª
    ),
    
    // ===== –í–ò–¢–ê–ú–ò–ù–ù–´–ï –î–û–ë–ê–í–ö–ò =====
    Supplement(
      id: 'vitamin_c',
      nameKey: 'supplement_vitamin_c',
      type: SupplementType.vitamin,
      emoji: 'üçä',
      descriptionKey: 'supplement_vitamin_c_desc',
      vitaminCMg: 1000,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'vitamin_d3',
      nameKey: 'supplement_vitamin_d3',
      type: SupplementType.vitamin,
      emoji: '‚òÄÔ∏è',
      descriptionKey: 'supplement_vitamin_d3_desc',
      vitaminDIu: 2000,
      isPremium: true,
      isPopular: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'b_complex',
      nameKey: 'supplement_b_complex',
      type: SupplementType.vitamin,
      emoji: 'üíä',
      descriptionKey: 'supplement_b_complex_desc',
      vitaminB12Mcg: 500,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'emergen_c',
      nameKey: 'supplement_emergen_c',
      type: SupplementType.vitamin,
      emoji: 'üçä',
      descriptionKey: 'supplement_emergen_c_desc',
      vitaminCMg: 1000,
      sodiumMg: 60,
      potassiumMg: 200,
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    
    // ===== –¢–†–ê–í–Ø–ù–´–ï –î–û–ë–ê–í–ö–ò =====
    Supplement(
      id: 'ashwagandha',
      nameKey: 'supplement_ashwagandha',
      type: SupplementType.herbal,
      emoji: 'üåø',
      descriptionKey: 'supplement_ashwagandha_desc',
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'turmeric',
      nameKey: 'supplement_turmeric',
      type: SupplementType.herbal,
      emoji: 'üåæ',
      descriptionKey: 'supplement_turmeric_desc',
      isPremium: true,
      defaultServingSize: 1.0,
    ),
    Supplement(
      id: 'ginger_powder',
      nameKey: 'supplement_ginger',
      type: SupplementType.herbal,
      emoji: 'ü´ö',
      descriptionKey: 'supplement_ginger_desc',
      isPremium: true,
      defaultServingSize: 0.5, // 0.5 –≥—Ä–∞–º–º–∞
    ),
    
    // ===== –î–†–£–ì–ò–ï –î–û–ë–ê–í–ö–ò =====
    Supplement(
      id: 'creatine',
      nameKey: 'supplement_creatine',
      type: SupplementType.other,
      emoji: 'üí™',
      descriptionKey: 'supplement_creatine_desc',
      isPremium: true,
      isPopular: true,
      defaultServingSize: 5.0, // 5 –≥—Ä–∞–º–º
    ),
    Supplement(
      id: 'collagen',
      nameKey: 'supplement_collagen',
      type: SupplementType.other,
      emoji: 'ü¶¥',
      descriptionKey: 'supplement_collagen_desc',
      isPremium: true,
      defaultServingSize: 10.0, // 10 –≥—Ä–∞–º–º
    ),
    Supplement(
      id: 'mct_oil',
      nameKey: 'supplement_mct_oil',
      type: SupplementType.other,
      emoji: 'ü••',
      descriptionKey: 'supplement_mct_oil_desc',
      isPremium: true,
      isPopular: true,
      defaultServingSize: 15.0, // 15 –º–ª
    ),
    Supplement(
      id: 'apple_cider_vinegar',
      nameKey: 'supplement_acv',
      type: SupplementType.other,
      emoji: 'üçé',
      descriptionKey: 'supplement_acv_desc',
      potassiumMg: 11,
      isPremium: true,
      warningKey: 'supplement_acv_warning',
      defaultServingSize: 15.0, // 15 –º–ª
    ),
    Supplement(
      id: 'lemon_juice',
      nameKey: 'supplement_lemon_juice',
      type: SupplementType.other,
      emoji: 'üçã',
      descriptionKey: 'supplement_lemon_juice_desc',
      vitaminCMg: 18.6,
      potassiumMg: 49,
      isPremium: false,
      isPopular: true,
      defaultServingSize: 30.0, // 30 –º–ª (2 —Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏)
    ),
    Supplement(
      id: 'baking_soda',
      nameKey: 'supplement_baking_soda',
      type: SupplementType.other,
      emoji: 'üßÇ',
      descriptionKey: 'supplement_baking_soda_desc',
      sodiumMg: 1260, // –Ω–∞ 3–≥ (–ø–æ–ª–æ–≤–∏–Ω–∞ —á–∞–π–Ω–æ–π –ª–æ–∂–∫–∏)
      isPremium: true,
      warningKey: 'supplement_baking_soda_warning',
      defaultServingSize: 3.0,
    ),
  ];
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–∫–∏ –ø–æ —Ç–∏–ø—É
  static List<Supplement> getSupplementsByType(SupplementType type) {
    return allSupplements.where((s) => s.type == type).toList();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏
  static List<Supplement> getPopularSupplements() {
    return allSupplements.where((s) => s.isPopular).toList();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏
  static List<Supplement> getFreeSupplements() {
    return allSupplements.where((s) => !s.isPremium).toList();
  }
  
  /// –ù–∞–π—Ç–∏ –¥–æ–±–∞–≤–∫—É –ø–æ ID
  static Supplement? findById(String id) {
    try {
      return allSupplements.firstWhere((s) => s.id == id);
    } catch (_) {
      return null;
    }
  }
  
  /// –ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–æ–∫
  static List<Supplement> searchSupplements(String query) {
    final lowerQuery = query.toLowerCase();
    return allSupplements.where((s) => 
      s.id.toLowerCase().contains(lowerQuery) ||
      s.nameKey.toLowerCase().contains(lowerQuery)
    ).toList();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–±–∞–≤–∫–∏ —Å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–∞–º–∏
  static List<Supplement> getElectrolyteSupplements() {
    return allSupplements.where((s) => 
      s.sodiumMg != null || 
      s.potassiumMg != null || 
      s.magnesiumMg != null
    ).toList();
  }
}