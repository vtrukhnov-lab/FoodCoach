import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart'; // –î–ª—è kDebugMode
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import 'dart:math' as math;

// Firebase imports
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'firebase_options.dart';

// App imports
import 'screens/onboarding_screen.dart';
import 'screens/history_screen.dart';
import 'screens/settings_screen.dart';
import 'services/notification_service.dart' as notif; // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
import 'services/subscription_service.dart'; // –ù–û–í–û–ï: —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–∫–∏
import 'services/remote_config_service.dart'; // –ù–û–í–û–ï: Remote Config
import 'widgets/weather_card.dart';
import 'widgets/daily_report.dart';

// Background message handler (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å top-level —Ñ—É–Ω–∫—Ü–∏–µ–π)
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  if (kDebugMode) {
    print('Background message: ${message.messageId}');
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // –¢–ï–°–¢: –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  try {
    final FlutterLocalNotificationsPlugin testPlugin = FlutterLocalNotificationsPlugin();
    const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initSettings = InitializationSettings(android: androidSettings);
    
    await testPlugin.initialize(initSettings);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'test_channel',
      'Test Channel',
      importance: Importance.max,
    );
    
    await testPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'test_channel',
      'Test Channel',
      importance: Importance.max,
      priority: Priority.max,
    );
    
    const NotificationDetails details = NotificationDetails(android: androidDetails);
    
    await testPlugin.show(
      12345,
      'HydraCoach –∑–∞–ø—É—â–µ–Ω!',
      '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —Å PRO —Ñ—É–Ω–∫—Ü–∏—è–º–∏!',
      details,
    );
    
    print('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  // üìä –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Remote Config
  await RemoteConfigService.instance.initialize();
  
  // üí∞ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RevenueCat (–ø–æ–¥–ø–∏—Å–∫–∏)
  await SubscriptionService.instance.initialize();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Firebase Messaging
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è iOS
  final messaging = FirebaseMessaging.instance;
  await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );
  
  // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
  final fcmToken = await messaging.getToken();
  
  // –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
  if (kDebugMode) {
    print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    print('FCM TOKEN (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):');
    print(fcmToken ?? 'Token not available');
    print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    debugPrint('FCM Token –ø–æ–ª—É—á–µ–Ω: ${fcmToken?.substring(0, 20)}...');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  if (fcmToken != null && kDebugMode) {
    Future.delayed(const Duration(seconds: 3), () {
      print('');
      print('üîë FCM TOKEN –¥–ª—è Firebase Console:');
      print(fcmToken);
      print('');
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è push –≤ foreground)
  await notif.NotificationService.initialize();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º foreground —Å–æ–æ–±—â–µ–Ω–∏—è
  FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
    if (kDebugMode) {
      print('Foreground message: ${message.notification?.title}');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (message.notification != null) {
      await notif.NotificationService().showNotification(
        id: DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title: message.notification?.title ?? 'HydraCoach',
        body: message.notification?.body ?? '',
        payload: message.data.toString(),
      );
    }
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    if (kDebugMode) {
      print('Message clicked: ${message.messageId}');
    }
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω—É–∂–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
  });
  
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  
  // –ù–û–í–û–ï: MultiProvider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => HydrationProvider()),
        ChangeNotifierProvider(create: (context) => SubscriptionProvider()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HydraCoach',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue,
          brightness: Brightness.light,
        ),
        useMaterial3: true,
        fontFamily: 'SF Pro Display',
      ),
      home: const SplashScreen(),
      routes: {
        '/home': (context) => const HomeScreen(),
        '/history': (context) => const HistoryScreen(),
        '/settings': (context) => const SettingsScreen(),
        '/onboarding': (context) => const OnboardingScreen(),
      },
    );
  }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class DailyGoals {
  final int waterMin;
  final int waterOpt;
  final int waterMax;
  final int sodium;
  final int potassium;
  final int magnesium;

  DailyGoals({
    required this.waterMin,
    required this.waterOpt,
    required this.waterMax,
    required this.sodium,
    required this.potassium,
    required this.magnesium,
  });
}

class Intake {
  final String id;
  final DateTime timestamp;
  final String type;
  final int volume;
  final int sodium;
  final int potassium;
  final int magnesium;

  Intake({
    required this.id,
    required this.timestamp,
    required this.type,
    required this.volume,
    this.sodium = 0,
    this.potassium = 0,
    this.magnesium = 0,
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å Remote Config
class HydrationProvider extends ChangeNotifier {
  double weight = 70;
  String dietMode = 'normal';
  String activityLevel = 'medium';
  List<Intake> todayIntakes = [];
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
  double weatherWaterAdjustment = 0;
  int weatherSodiumAdjustment = 0;
  
  late DailyGoals goals;
  
  // –ù–û–í–û–ï: –¥–æ—Å—Ç—É–ø –∫ Remote Config
  final RemoteConfigService _remoteConfig = RemoteConfigService.instance;
  
  HydrationProvider() {
    _calculateGoals();
    _loadData();
    _checkAndResetDaily();
    _subscribeFCMTopics();
  }
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ FCM —Ç–æ–ø–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  void _subscribeFCMTopics() async {
    final messaging = FirebaseMessaging.instance;
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await messaging.subscribeToTopic('all_users');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ –ø–æ —Ä–µ–∂–∏–º—É –ø–∏—Ç–∞–Ω–∏—è
    if (dietMode == 'keto') {
      await messaging.subscribeToTopic('keto_users');
    } else if (dietMode == 'fasting') {
      await messaging.subscribeToTopic('fasting_users');
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    await messaging.subscribeToTopic('weather_alerts');
  }
  
  // –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º Remote Config –¥–ª—è —Ñ–æ—Ä–º—É–ª
  void _calculateGoals() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ Remote Config –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    int waterMin = (_remoteConfig.waterMinPerKg * weight).round();
    int waterOpt = (_remoteConfig.waterOptPerKg * weight).round();
    int waterMax = (_remoteConfig.waterMaxPerKg * weight).round();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –æ—Ç –ø–æ–≥–æ–¥—ã
    if (weatherWaterAdjustment > 0) {
      waterMin = (waterMin * (1 + weatherWaterAdjustment)).round();
      waterOpt = (waterOpt * (1 + weatherWaterAdjustment)).round();
      waterMax = (waterMax * (1 + weatherWaterAdjustment)).round();
    }
    
    // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –∏–∑ Remote Config
    int sodium = dietMode == 'keto' || dietMode == 'fasting' 
        ? _remoteConfig.sodiumKeto 
        : _remoteConfig.sodiumNormal;
    int potassium = dietMode == 'keto' || dietMode == 'fasting' 
        ? _remoteConfig.potassiumKeto 
        : _remoteConfig.potassiumNormal;
    int magnesium = dietMode == 'keto' || dietMode == 'fasting' 
        ? _remoteConfig.magnesiumKeto 
        : _remoteConfig.magnesiumNormal;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Å–æ–ª–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
    sodium += weatherSodiumAdjustment;
    
    goals = DailyGoals(
      waterMin: waterMin,
      waterOpt: waterOpt,
      waterMax: waterMax,
      sodium: sodium,
      potassium: potassium,
      magnesium: magnesium,
    );
  }
  
  void updateWeatherAdjustments(double waterAdjustment, int sodiumAdjustment) {
    weatherWaterAdjustment = waterAdjustment;
    weatherSodiumAdjustment = sodiumAdjustment;
    _calculateGoals();
    notifyListeners();
  }
  
  Future<void> _loadData() async {
    final prefs = await SharedPreferences.getInstance();
    weight = prefs.getDouble('weight') ?? 70;
    dietMode = prefs.getString('dietMode') ?? 'normal';
    activityLevel = prefs.getString('activityLevel') ?? 'medium';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∏–µ–º—ã
    final todayKey = 'intakes_${DateTime.now().toIso8601String().split('T')[0]}';
    final intakesJson = prefs.getStringList(todayKey) ?? [];
    
    todayIntakes = intakesJson.map((json) {
      final parts = json.split('|');
      return Intake(
        id: parts[0],
        timestamp: DateTime.parse(parts[1]),
        type: parts[2],
        volume: int.parse(parts[3]),
        sodium: int.parse(parts[4]),
        potassium: int.parse(parts[5]),
        magnesium: int.parse(parts[6]),
      );
    }).toList();
    
    _calculateGoals();
    notifyListeners();
  }
  
  Future<void> _saveIntakes() async {
    final prefs = await SharedPreferences.getInstance();
    final todayKey = 'intakes_${DateTime.now().toIso8601String().split('T')[0]}';
    
    final intakesJson = todayIntakes.map((intake) {
      return '${intake.id}|${intake.timestamp.toIso8601String()}|${intake.type}|'
             '${intake.volume}|${intake.sodium}|${intake.potassium}|${intake.magnesium}';
    }).toList();
    
    await prefs.setStringList(todayKey, intakesJson);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    final progress = getProgress();
    await prefs.setDouble('waterProgress', progress['waterPercent']!);
  }
  
  void _checkAndResetDaily() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
    final now = DateTime.now();
    const lastResetKey = 'lastReset';
    
    SharedPreferences.getInstance().then((prefs) {
      final lastResetStr = prefs.getString(lastResetKey);
      if (lastResetStr != null) {
        final lastReset = DateTime.parse(lastResetStr);
        if (lastReset.day != now.day) {
          // –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          todayIntakes.clear();
          prefs.setString(lastResetKey, now.toIso8601String());
          notifyListeners();
          
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç
          notif.NotificationService().scheduleEveningReport();
        }
      } else {
        prefs.setString(lastResetKey, now.toIso8601String());
      }
    });
  }
  
  void updateProfile({
    required double weight,
    required String dietMode,
    required String activityLevel,
    String? fastingSchedule,
  }) {
    this.weight = weight;
    this.dietMode = dietMode;
    this.activityLevel = activityLevel;
    _calculateGoals();
    _saveProfile();
    _subscribeFCMTopics(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    notifyListeners();
  }
  
  Future<void> _saveProfile() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('weight', weight);
    await prefs.setString('dietMode', dietMode);
    await prefs.setString('activityLevel', activityLevel);
  }
  
  void addIntake(String type, int volume, {int sodium = 0, int potassium = 0, int magnesium = 0}) {
    todayIntakes.add(Intake(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      timestamp: DateTime.now(),
      type: type,
      volume: volume,
      sodium: sodium,
      potassium: potassium,
      magnesium: magnesium,
    ));
    
    HapticFeedback.lightImpact();
    _saveIntakes();
    notifyListeners();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ
    if (type == 'coffee') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationService
      notif.NotificationService().schedulePostCoffeeReminder();
      
      if (kDebugMode) {
        print('‚òï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ');
      }
    }
  }
  
  void removeIntake(String id) {
    todayIntakes.removeWhere((intake) => intake.id == id);
    _saveIntakes();
    notifyListeners();
  }
  
  Map<String, double> getProgress() {
    int totalWater = 0;
    int totalSodium = 0;
    int totalPotassium = 0;
    int totalMagnesium = 0;
    
    for (var intake in todayIntakes) {
      if (intake.type == 'water' || intake.type == 'electrolyte' || intake.type == 'broth') {
        totalWater += intake.volume;
      }
      totalSodium += intake.sodium;
      totalPotassium += intake.potassium;
      totalMagnesium += intake.magnesium;
    }
    
    return {
      'water': totalWater.toDouble(),
      'waterPercent': math.min((totalWater / goals.waterOpt) * 100, 100),
      'sodium': totalSodium.toDouble(),
      'sodiumPercent': math.min((totalSodium / goals.sodium) * 100, 100),
      'potassium': totalPotassium.toDouble(),
      'potassiumPercent': math.min((totalPotassium / goals.potassium) * 100, 100),
      'magnesium': totalMagnesium.toDouble(),
      'magnesiumPercent': math.min((totalMagnesium / goals.magnesium) * 100, 100),
    };
  }
  
  // –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ Remote Config
  String getHydrationStatus() {
    final progress = getProgress();
    final waterRatio = progress['water']! / goals.waterOpt;
    final sodiumRatio = progress['sodium']! / goals.sodium;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ Remote Config –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    if (waterRatio > _remoteConfig.dilutionWaterThreshold && 
        sodiumRatio < _remoteConfig.dilutionSodiumThreshold) {
      return '–†–∞–∑–±–∞–≤–ª—è–µ—à—å';
    } else if (waterRatio < _remoteConfig.dehydrationThreshold) {
      return '–ù–µ–¥–æ–±–æ—Ä –≤–æ–¥—ã';
    } else if (sodiumRatio < _remoteConfig.lowSaltThreshold) {
      return '–ú–∞–ª–æ —Å–æ–ª–∏';
    } else {
      return '–ù–æ—Ä–º–∞';
    }
  }
  
  int getHRI() {
    final status = getHydrationStatus();
    int baseHRI = 0;
    
    switch (status) {
      case '–ù–æ—Ä–º–∞': baseHRI = 15; break;
      case '–ú–∞–ª–æ —Å–æ–ª–∏': baseHRI = 45; break;
      case '–ù–µ–¥–æ–±–æ—Ä –≤–æ–¥—ã': baseHRI = 55; break;
      case '–†–∞–∑–±–∞–≤–ª—è–µ—à—å': baseHRI = 65; break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫ –æ—Ç –ø–æ–≥–æ–¥—ã
    if (weatherWaterAdjustment > 0.1) {
      baseHRI += 10;
    }
    
    return math.min(baseHRI, 100);
  }
}

// –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _initializeApp();
  }
  
  // –û–ë–ù–û–í–õ–ï–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<void> _initializeApp() async {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    final subscriptionProvider = Provider.of<SubscriptionProvider>(context, listen: false);
    await subscriptionProvider.initialize();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    final prefs = await SharedPreferences.getInstance();
    final completed = prefs.getBool('onboardingCompleted') ?? false;
    
    if (mounted) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (_) => completed ? const HomeScreen() : const OnboardingScreen(),
        ),
      );
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'üíß',
              style: TextStyle(fontSize: 80),
            ).animate()
              .scale(duration: 500.ms)
              .then()
              .shake(delay: 500.ms),
            const SizedBox(height: 20),
            const Text(
              'HydraCoach',
              style: TextStyle(
                color: Colors.white,
                fontSize: 32,
                fontWeight: FontWeight.bold,
              ),
            ).animate().fadeIn(delay: 300.ms),
            const SizedBox(height: 20),
            // –ù–û–í–û–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            Consumer<SubscriptionProvider>(
              builder: (context, subscription, child) {
                if (subscription.isLoading) {
                  return const CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  );
                }
                return Container();
              },
            ),
          ],
        ),
      ),
    );
  }
}

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω (–û–ë–ù–û–í–õ–ï–ù —Å PRO –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏ –ø–µ–π–≤–æ–ª–æ–º)
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  bool _showDailyReport = false;
  
  @override
  void initState() {
    super.initState();
    _checkDailyReport();
  }
  
  void _checkDailyReport() {
    final now = DateTime.now();
    if (now.hour >= 21) {
      setState(() {
        _showDailyReport = true;
      });
    }
  }
    
  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<HydrationProvider>(context);
    final subscriptionProvider = Provider.of<SubscriptionProvider>(context); // –ù–û–í–û–ï
    final progress = provider.getProgress();
    final status = provider.getHydrationStatus();
    final hri = provider.getHRI();
    
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      body: SafeArea(
        child: Stack(
          children: [
            CustomScrollView(
              slivers: [
                // –û–ë–ù–û–í–õ–ï–ù: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å PRO –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
                SliverToBoxAdapter(
                  child: Container(
                    padding: const EdgeInsets.all(20),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                const Text(
                                  'HydraCoach',
                                  style: TextStyle(
                                    fontSize: 32,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ).animate().fadeIn(duration: 500.ms),
                                // –ù–û–í–û–ï: PRO –±–µ–π–¥–∂
                                if (subscriptionProvider.isPro) ...[
                                  const SizedBox(width: 8),
                                  Container(
                                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                    decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [Colors.amber.shade400, Colors.amber.shade600],
                                      ),
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    child: const Text(
                                      'PRO',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ],
                            ),
                            const SizedBox(height: 4),
                            Text(
                              _getFormattedDate(),
                              style: TextStyle(
                                fontSize: 16,
                                color: Colors.grey[600],
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            // –ù–û–í–û–ï: –∫–Ω–æ–ø–∫–∞ PRO (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)
                            if (!subscriptionProvider.isPro)
                              IconButton(
                                icon: Container(
                                  padding: const EdgeInsets.all(8),
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [Colors.purple.shade400, Colors.purple.shade600],
                                    ),
                                    shape: BoxShape.circle,
                                  ),
                                  child: const Icon(Icons.star, color: Colors.white, size: 20),
                                ),
                                onPressed: () {
                                  _showPaywall(context, subscriptionProvider);
                                },
                                tooltip: '–ü–æ–ª—É—á–∏—Ç—å PRO',
                              ),
                            IconButton(
                              icon: const Icon(Icons.history),
                              onPressed: () {
                                Navigator.pushNamed(context, '/history');
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.settings),
                              onPressed: () {
                                Navigator.pushNamed(context, '/settings');
                              },
                            ),
                            // –ö–ù–û–ü–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
                            IconButton(
                              icon: const Icon(Icons.notifications_active, color: Colors.orange),
                              onPressed: () {
                                showModalBottomSheet(
                                  context: context,
                                  isScrollControlled: true,
                                  shape: const RoundedRectangleBorder(
                                    borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                                  ),
                                  builder: (context) => Container(
                                    padding: const EdgeInsets.all(20),
                                    child: Column(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Container(
                                          width: 40,
                                          height: 4,
                                          margin: const EdgeInsets.only(bottom: 20),
                                          decoration: BoxDecoration(
                                            color: Colors.grey[300],
                                            borderRadius: BorderRadius.circular(2),
                                          ),
                                        ),
                                        const Text(
                                          'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                                          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                                        ),
                                        const SizedBox(height: 8),
                                        Text(
                                          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                                          style: TextStyle(color: Colors.grey[600], fontSize: 14),
                                        ),
                                        const SizedBox(height: 20),
                                        
                                        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                        Card(
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.blue,
                                              child: Icon(Icons.flash_on, color: Colors.white),
                                            ),
                                            title: const Text('–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ'),
                                            subtitle: const Text('–ü–æ—è–≤–∏—Ç—Å—è —Å—Ä–∞–∑—É'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              await notif.NotificationService().sendTestNotification();
                                              Navigator.pop(context);
                                              ScaffoldMessenger.of(context).showSnackBar(
                                                const SnackBar(
                                                  content: Text('‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'),
                                                  backgroundColor: Colors.green,
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                        
                                        const SizedBox(height: 8),
                                        
                                        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (10 —Å–µ–∫—É–Ω–¥)
                                        Card(
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.purple,
                                              child: Icon(Icons.timer_10, color: Colors.white),
                                            ),
                                            title: const Text('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç'),
                                            subtitle: const Text('–ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              await notif.NotificationService().scheduleTestNotificationIn10Seconds();
                                              Navigator.pop(context);
                                              ScaffoldMessenger.of(context).showSnackBar(
                                                const SnackBar(
                                                  content: Text('‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥'),
                                                  backgroundColor: Colors.purple,
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                        
                                        const SizedBox(height: 8),
                                        
                                        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
                                        Card(
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.orange,
                                              child: Icon(Icons.timer, color: Colors.white),
                                            ),
                                            title: const Text('–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'),
                                            subtitle: const Text('–ß–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              await notif.NotificationService().scheduleTestNotificationIn1Minute();
                                              Navigator.pop(context);
                                              ScaffoldMessenger.of(context).showSnackBar(
                                                const SnackBar(
                                                  content: Text('‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É'),
                                                  backgroundColor: Colors.orange,
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                        
                                        const SizedBox(height: 8),
                                        
                                        // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
                                        Card(
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.teal,
                                              child: Icon(Icons.rocket_launch, color: Colors.white),
                                            ),
                                            title: const Text('–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç'),
                                            subtitle: const Text('3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Å—Ä–∞–∑—É, 10 —Å–µ–∫, 1 –º–∏–Ω'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              await notif.NotificationService().runFullTest();
                                              Navigator.pop(context);
                                              ScaffoldMessenger.of(context).showSnackBar(
                                                const SnackBar(
                                                  content: Text('üöÄ –ó–∞–ø—É—â–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)'),
                                                  backgroundColor: Colors.teal,
                                                  duration: Duration(seconds: 5),
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                        
                                        const Divider(height: 24),
                                        
                                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                                        Card(
                                          color: Colors.grey[50],
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.grey,
                                              child: Icon(Icons.list_alt, color: Colors.white),
                                            ),
                                            title: const Text('–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏'),
                                            subtitle: const Text('–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              await notif.NotificationService().checkNotificationStatus();
                                              Navigator.pop(context);
                                              if (kDebugMode) {
                                                ScaffoldMessenger.of(context).showSnackBar(
                                                  const SnackBar(
                                                    content: Text('üìã –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö'),
                                                  ),
                                                );
                                              }
                                            },
                                          ),
                                        ),
                                        
                                        const SizedBox(height: 8),
                                        
                                        // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ
                                        Card(
                                          color: Colors.red[50],
                                          child: ListTile(
                                            leading: const CircleAvatar(
                                              backgroundColor: Colors.red,
                                              child: Icon(Icons.cancel, color: Colors.white),
                                            ),
                                            title: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ'),
                                            subtitle: const Text('–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                                            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                                            onTap: () async {
                                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                              showDialog(
                                                context: context,
                                                builder: (dialogContext) => AlertDialog(
                                                  title: const Text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'),
                                                  content: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?'),
                                                  actions: [
                                                    TextButton(
                                                      onPressed: () => Navigator.pop(dialogContext),
                                                      child: const Text('–ù–µ—Ç'),
                                                    ),
                                                    TextButton(
                                                      onPressed: () async {
                                                        await notif.NotificationService().cancelAllNotifications();
                                                        Navigator.pop(dialogContext);
                                                        Navigator.pop(context);
                                                        ScaffoldMessenger.of(context).showSnackBar(
                                                          const SnackBar(
                                                            content: Text('üóëÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã'),
                                                            backgroundColor: Colors.red,
                                                          ),
                                                        );
                                                      },
                                                      child: const Text('–î–∞', style: TextStyle(color: Colors.red)),
                                                    ),
                                                  ],
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                        
                                        const SizedBox(height: 20),
                                      ],
                                    ),
                                  ),
                                );
                              },
                              tooltip: '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                
                // –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–≥–æ–¥—ã
                SliverToBoxAdapter(
                  child: WeatherCard(
                    onWeatherUpdate: (waterAdjustment, sodiumAdjustment) {
                      provider.updateWeatherAdjustments(
                        waterAdjustment, 
                        sodiumAdjustment
                      );
                    },
                  ),
                ),
                
                // –ö–æ–ª—å—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                SliverToBoxAdapter(
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 10,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            _buildProgressRing(
                              '–í–æ–¥–∞',
                              progress['waterPercent']!,
                              Colors.blue,
                              '${progress['water']!.toInt()}',
                              '${provider.goals.waterOpt} –º–ª',
                            ).animate().scale(delay: 100.ms),
                            _buildProgressRing(
                              'Na',
                              progress['sodiumPercent']!,
                              Colors.orange,
                              '${progress['sodium']!.toInt()}',
                              '${provider.goals.sodium} –º–≥',
                            ).animate().scale(delay: 200.ms),
                            _buildProgressRing(
                              'K',
                              progress['potassiumPercent']!,
                              Colors.purple,
                              '${progress['potassium']!.toInt()}',
                              '${provider.goals.potassium} –º–≥',
                            ).animate().scale(delay: 300.ms),
                          ],
                        ),
                        if (provider.weatherWaterAdjustment > 0) ...[
                          const SizedBox(height: 16),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.orange.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                const Icon(
                                  Icons.wb_sunny,
                                  size: 16,
                                  color: Colors.orange,
                                ),
                                const SizedBox(width: 6),
                                Text(
                                  '–¶–µ–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã –∏–∑-–∑–∞ –∂–∞—Ä—ã',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.orange.shade700,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                
                // –ú–∞–≥–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                SliverToBoxAdapter(
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Row(
                      children: [
                        const Text('–ú–∞–≥–Ω–∏–π (Mg):'),
                        const SizedBox(width: 12),
                        Expanded(
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(4),
                            child: LinearProgressIndicator(
                              value: progress['magnesiumPercent']! / 100,
                              backgroundColor: Colors.grey[200],
                              valueColor: const AlwaysStoppedAnimation(Colors.pink),
                              minHeight: 8,
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),
                        Text(
                          '${progress['magnesium']!.toInt()}/${provider.goals.magnesium} –º–≥',
                          style: const TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ).animate().fadeIn(delay: 400.ms),
                ),
                
                // –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∞
                SliverToBoxAdapter(
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 10,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text(
                              '–°—Ç–∞—Ç—É—Å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 6,
                              ),
                              decoration: BoxDecoration(
                                color: _getStatusColor(status),
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Text(
                                status,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        const Text('Hydration Risk Index'),
                        const SizedBox(height: 8),
                        ClipRRect(
                          borderRadius: BorderRadius.circular(6),
                          child: LinearProgressIndicator(
                            value: hri / 100,
                            backgroundColor: Colors.grey[200],
                            valueColor: AlwaysStoppedAnimation(_getHRIColor(hri)),
                            minHeight: 12,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '$hri',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: _getHRIColor(hri),
                          ),
                        ),
                      ],
                    ),
                  ).animate().fadeIn(delay: 500.ms),
                ),
                
                // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          '–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 16),
                        GridView.count(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          crossAxisCount: 3,
                          mainAxisSpacing: 12,
                          crossAxisSpacing: 12,
                          children: [
                            _buildQuickButton(
                              context,
                              'üíß',
                              '–í–æ–¥–∞',
                              '200 –º–ª',
                              Colors.blue,
                              () => provider.addIntake('water', 200),
                            ),
                            _buildQuickButton(
                              context,
                              'üíß',
                              '–í–æ–¥–∞',
                              '300 –º–ª',
                              Colors.blue,
                              () => provider.addIntake('water', 300),
                            ),
                            _buildQuickButton(
                              context,
                              'üíß',
                              '–í–æ–¥–∞',
                              '500 –º–ª',
                              Colors.blue,
                              () => provider.addIntake('water', 500),
                            ),
                            _buildQuickButton(
                              context,
                              '‚ö°',
                              '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç',
                              '300 –º–ª',
                              Colors.orange,
                              () => provider.addIntake('electrolyte', 300,
                                sodium: 500, potassium: 200, magnesium: 50),
                            ),
                            _buildQuickButton(
                              context,
                              'üç≤',
                              '–ë—É–ª—å–æ–Ω',
                              '250 –º–ª',
                              Colors.amber,
                              () => provider.addIntake('broth', 250,
                                sodium: 800, potassium: 100),
                            ),
                            _buildQuickButton(
                              context,
                              '‚òï',
                              '–ö–æ—Ñ–µ',
                              '200 –º–ª',
                              Colors.brown,
                              () => provider.addIntake('coffee', 200),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                
                // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤
                if (provider.todayIntakes.isNotEmpty)
                  SliverToBoxAdapter(
                    child: Padding(
                      padding: const EdgeInsets.all(20),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              const Text(
                                '–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ',
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              TextButton(
                                onPressed: () {
                                  Navigator.pushNamed(context, '/history');
                                },
                                child: const Text('–í—Å–µ –∑–∞–ø–∏—Å–∏ ‚Üí'),
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(16),
                            ),
                            child: Column(
                              children: provider.todayIntakes
                                  .take(5)
                                  .toList()
                                  .reversed
                                  .map((intake) => _buildIntakeItem(intake, provider))
                                  .toList(),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                
                const SliverToBoxAdapter(
                  child: SizedBox(height: 100),
                ),
              ],
            ),
            
            // –ü–ª–∞–≤–∞—é—â–∏–π –æ—Ç—á–µ—Ç (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–µ—á–µ—Ä–æ–º)
            if (_showDailyReport)
              Positioned(
                bottom: 20,
                left: 20,
                right: 20,
                child: GestureDetector(
                  onTap: () {
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      backgroundColor: Colors.transparent,
                      builder: (context) => DraggableScrollableSheet(
                        initialChildSize: 0.9,
                        minChildSize: 0.5,
                        maxChildSize: 0.95,
                        builder: (context, scrollController) {
                          return Container(
                            decoration: const BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(24),
                                topRight: Radius.circular(24),
                              ),
                            ),
                            child: SingleChildScrollView(
                              controller: scrollController,
                              child: const DailyReportCard(),
                            ),
                          );
                        },
                      ),
                    );
                  },
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.blue.shade600, Colors.blue.shade800],
                      ),
                      borderRadius: BorderRadius.circular(16),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.blue.withOpacity(0.3),
                          blurRadius: 20,
                          offset: const Offset(0, 10),
                        ),
                      ],
                    ),
                    child: const Row(
                      children: [
                        Icon(
                          Icons.analytics,
                          color: Colors.white,
                          size: 28,
                        ),
                        SizedBox(width: 12),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Text(
                                '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è',
                                style: TextStyle(
                                  color: Colors.white70,
                                  fontSize: 13,
                                ),
                              ),
                            ],
                          ),
                        ),
                        Icon(
                          Icons.chevron_right,
                          color: Colors.white,
                        ),
                      ],
                    ),
                  ).animate()
                    .fadeIn(duration: 500.ms)
                    .slideY(begin: 1, end: 0),
                ),
              ),
          ],
        ),
      ),
    );
  }
  
  // –ù–û–í–û–ï: –ø–µ–π–≤–æ–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
  void _showPaywall(BuildContext context, SubscriptionProvider subscriptionProvider) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
        ),
        child: Column(
          children: [
            // Handle
            Container(
              width: 40,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  Text(
                    RemoteConfigService.instance.paywallTitle,
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    RemoteConfigService.instance.paywallSubtitle,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[600],
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
            
            // PRO –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            Expanded(
              child: ListView(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                children: [
                  _buildFeatureItem('üß†', '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–≥–æ–¥–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'),
                  _buildFeatureItem('üìä', '–ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã', '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'),
                  _buildFeatureItem('üìÅ', '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ'),
                  _buildFeatureItem('‚òÅÔ∏è', '–û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', '–î–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'),
                  _buildFeatureItem('üçΩÔ∏è', '–†–µ–∂–∏–º –ø–æ—Å—Ç–∞', '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è IF/OMAD'),
                  _buildFeatureItem('üî•', '–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –∂–∞—Ä—ã', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º'),
                ],
              ),
            ),
            
            // –ö–Ω–æ–ø–∫–∏
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                  SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: subscriptionProvider.isLoading ? null : () async {
                        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –∫—É–ø–∏—Ç—å
                        Navigator.pop(context);
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')),
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.purple,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                      child: subscriptionProvider.isLoading
                          ? const CircularProgressIndicator(color: Colors.white)
                          : const Text(
                              '–ü–æ–ª—É—á–∏—Ç—å PRO',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                    ),
                  ),
                  
                  const SizedBox(height: 12),
                  
                  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                  TextButton(
                    onPressed: () async {
                      final success = await subscriptionProvider.restorePurchases();
                      Navigator.pop(context);
                      
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(success 
                            ? '–ü–æ–∫—É–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!' 
                            : '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                          ),
                        ),
                      );
                    },
                    child: const Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildFeatureItem(String icon, String title, String description) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Text(icon, style: const TextStyle(fontSize: 24)),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildProgressRing(String label, double percent, Color color, String current, String goal) {
    return Column(
      children: [
        SizedBox(
          width: 100,
          height: 100,
          child: Stack(
            alignment: Alignment.center,
            children: [
              SizedBox(
                width: 100,
                height: 100,
                child: CircularProgressIndicator(
                  value: percent / 100,
                  strokeWidth: 10,
                  backgroundColor: Colors.grey[200],
                  valueColor: AlwaysStoppedAnimation(color),
                ),
              ),
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    '${percent.toInt()}%',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: color,
                    ),
                  ),
                  Text(
                    label,
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        const SizedBox(height: 8),
        Text(
          current,
          style: const TextStyle(
            fontWeight: FontWeight.w600,
            fontSize: 14,
          ),
        ),
        Text(
          goal,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }
  
  Widget _buildQuickButton(BuildContext context, String icon, String label, 
      String volume, Color color, VoidCallback onPress) {
    return GestureDetector(
      onTap: onPress,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: color, width: 2),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(icon, style: const TextStyle(fontSize: 28)),
            const SizedBox(height: 4),
            Text(
              label,
              style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500),
            ),
            Text(
              volume,
              style: TextStyle(fontSize: 11, color: Colors.grey[600]),
            ),
          ],
        ),
      ),
    ).animate().scale(delay: 100.ms);
  }
  
  Widget _buildIntakeItem(Intake intake, HydrationProvider provider) {
    String typeIcon = '';
    String typeName = '';
    
    switch (intake.type) {
      case 'water':
        typeIcon = 'üíß';
        typeName = '–í–æ–¥–∞';
        break;
      case 'electrolyte':
        typeIcon = '‚ö°';
        typeName = '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç';
        break;
      case 'broth':
        typeIcon = 'üç≤';
        typeName = '–ë—É–ª—å–æ–Ω';
        break;
      case 'coffee':
        typeIcon = '‚òï';
        typeName = '–ö–æ—Ñ–µ';
        break;
    }
    
    return Dismissible(
      key: Key(intake.id),
      direction: DismissDirection.endToStart,
      background: Container(
        alignment: Alignment.centerRight,
        padding: const EdgeInsets.only(right: 20),
        decoration: const BoxDecoration(
          color: Colors.red,
        ),
        child: const Icon(
          Icons.delete,
          color: Colors.white,
        ),
      ),
      onDismissed: (direction) {
        provider.removeIntake(intake.id);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('$typeName —É–¥–∞–ª–µ–Ω'),
            action: SnackBarAction(
              label: '–û—Ç–º–µ–Ω–∏—Ç—å',
              onPressed: () {
                provider.addIntake(
                  intake.type,
                  intake.volume,
                  sodium: intake.sodium,
                  potassium: intake.potassium,
                  magnesium: intake.magnesium,
                );
              },
            ),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          border: Border(
            bottom: BorderSide(color: Colors.grey[200]!),
          ),
        ),
        child: Row(
          children: [
            Text(
              '${intake.timestamp.hour.toString().padLeft(2, '0')}:${intake.timestamp.minute.toString().padLeft(2, '0')}',
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(width: 16),
            Text('$typeIcon $typeName'),
            const Spacer(),
            Text(
              '${intake.volume} –º–ª',
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ],
        ),
      ),
    );
  }
  
  Color _getStatusColor(String status) {
    switch (status) {
      case '–ù–æ—Ä–º–∞':
        return Colors.green;
      case '–ú–∞–ª–æ —Å–æ–ª–∏':
      case '–†–∞–∑–±–∞–≤–ª—è–µ—à—å':
        return Colors.orange;
      case '–ù–µ–¥–æ–±–æ—Ä –≤–æ–¥—ã':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }
  
  Color _getHRIColor(int hri) {
    if (hri < 30) return Colors.green;
    if (hri < 60) return Colors.orange;
    return Colors.red;
  }
  
  String _getFormattedDate() {
    final now = DateTime.now();
    const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                   '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
    const weekDays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                     '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    
    return '${weekDays[now.weekday % 7]}, ${now.day} ${months[now.month - 1]}';
  }
}