import 'package:flutter/foundation.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∂–∞—Ä—ã
class HeatAdjustments {
  final double waterAdjustment;
  final int sodiumAdjustment;
  
  HeatAdjustments(this.waterAdjustment, this.sodiumAdjustment);
}

class RemoteConfigService {
  static RemoteConfigService? _instance;
  static RemoteConfigService get instance => _instance ??= RemoteConfigService._();
  
  RemoteConfigService._();
  
  FirebaseRemoteConfig? _remoteConfig;
  bool _initialized = false;
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Remote Config
  Future<void> initialize() async {
    if (_initialized) return;
    
    try {
      _remoteConfig = FirebaseRemoteConfig.instance;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
      await _remoteConfig!.setConfigSettings(
        RemoteConfigSettings(
          fetchTimeout: const Duration(seconds: 10),
          minimumFetchInterval: kDebugMode 
            ? const Duration(seconds: 10)  // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            : const Duration(hours: 1),    // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
        ),
      );
      
      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ –¢–ó)
      await _remoteConfig!.setDefaults(_getDefaults());
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await _remoteConfig!.fetchAndActivate();
      
      _initialized = true;
      
      if (kDebugMode) {
        print('‚úÖ Remote Config –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        print('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_remoteConfig!.getAll().length}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Remote Config: $e');
      }
    }
  }
  
  /// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –¢–ó
  Map<String, dynamic> _getDefaults() {
    return {
      // üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª –≤–æ–¥—ã (–º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞)
      'water_min_per_kg': 22.0,
      'water_opt_per_kg': 30.0,
      'water_max_per_kg': 36.0,
      
      // ‚ö° –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –±–∞–∑–æ–≤—ã–µ —Ü–µ–ª–∏ (–º–≥ –≤ –¥–µ–Ω—å)
      'sodium_normal': 2500,
      'sodium_keto': 3500,
      'potassium_normal': 3000,
      'potassium_keto': 3500,
      'magnesium_normal': 350,
      'magnesium_keto': 400,
      
      // üå°Ô∏è –ü–æ—Ä–æ–≥–∏ Heat Index –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      'heat_index_low': 27.0,     // HI < 27¬∞C: –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
      'heat_index_medium': 32.0,  // HI 27-32¬∞C: +5% –≤–æ–¥—ã, +500–º–≥ –Ω–∞—Ç—Ä–∏—è
      'heat_index_high': 39.0,    // HI 32-39¬∞C: +8% –≤–æ–¥—ã, +1000–º–≥ –Ω–∞—Ç—Ä–∏—è
      // HI > 39¬∞C: +12% –≤–æ–¥—ã, +1500–º–≥ –Ω–∞—Ç—Ä–∏—è
      
      'heat_water_adjustment_low': 0.05,    // 5%
      'heat_water_adjustment_medium': 0.08, // 8%  
      'heat_water_adjustment_high': 0.12,   // 12%
      
      'heat_sodium_adjustment_low': 500,    // –º–≥
      'heat_sodium_adjustment_medium': 1000, // –º–≥
      'heat_sodium_adjustment_high': 1500,   // –º–≥
      
      // üìä –ü–æ—Ä–æ–≥–∏ HRI –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
      'hydration_dehydration_threshold': 0.9,  // < 90% –æ—Ç —Ü–µ–ª–∏ –≤–æ–¥—ã
      'hydration_dilution_water_threshold': 1.15, // > 115% –≤–æ–¥—ã
      'hydration_dilution_sodium_threshold': 0.6, // < 60% –Ω–∞—Ç—Ä–∏—è
      'hydration_low_salt_threshold': 0.5,     // < 50% –Ω–∞—Ç—Ä–∏—è
      
      // üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      'max_free_reminders': 4,            // FREE: –¥–æ 4 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å
      'coffee_reminder_delay_minutes': 45, // –ü–æ—Å–ª–µ –∫–æ—Ñ–µ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç
      'reminder_spam_protection_hours': 1,  // –ê–Ω—Ç–∏—Å–ø–∞–º: 1 —á–∞—Å –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏
      'reminder_daily_limit': 8,           // –ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å –¥–ª—è PRO
      
      // ‚è∞ –¢–∏—Ö–∏–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      'quiet_hours_start': 22, // 22:00
      'quiet_hours_end': 7,    // 07:00
      
      // üçΩÔ∏è –†–µ–∂–∏–º Fasting Aware
      'fasting_aware_enabled': true,
      'fasting_electrolyte_reminder_enabled': true,
      'fasting_refeeding_ladder_enabled': true,
      
      // üí∞ –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò –ò –¶–ï–ù
      'paywall_show_trial': true,
      'trial_duration_days': 7,
      'trial_enabled': true,
      
      // –¶–µ–Ω—ã –¥–ª—è –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      'price_annual': 9.99,
      'price_annual_original': 16.99,
      'price_annual_discount': 41,
      'price_annual_currency': '\$',
      'price_annual_period': '–≤ –≥–æ–¥',
      
      // –¶–µ–Ω—ã –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏  
      'price_monthly': 1.99,
      'price_monthly_currency': '\$',
      'price_monthly_period': '–≤ –º–µ—Å—è—Ü',
      
      // –¶–µ–Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
      'price_lifetime': 24.99,
      'price_lifetime_currency': '\$',
      
      // –¢–µ–∫—Å—Ç—ã –ø–µ–π–≤–æ–ª–∞
      'paywall_title': 'HydraCoach PRO',
      'paywall_subtitle': '–°—Ç–∞–Ω—å –≥–µ—Ä–æ–µ–º –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞!',
      'paywall_button_text': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
      'paywall_trial_text': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
      'paywall_cancel_text': '–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è',
      'paywall_best_value_text': '–í–´–ì–û–î–ù–û',
      'paywall_lifetime_text': '–î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞',
      'paywall_lifetime_subtitle': '–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
      
      // üîß –§–∏—á —Ñ–ª–∞–≥–∏ –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π
      'feature_smart_reminders': true,
      'feature_weekly_reports': true,
      'feature_csv_export': true,
      'feature_cloud_sync': true,
      'feature_contextual_reminders': true,
      'feature_heat_protocols': true,
      
      // üìä SDK –ø–∞–±–ª–∏—à–µ—Ä–∞ (–†–µ–ª–∏–∑ 3)
      'publisher_sdk_enabled': false,
      'appsflyer_enabled': false,
      'sanctioned_countries': '["RU", "BY", "CN", "IR", "KP"]', // JSON —Å—Ç—Ä–æ–∫–∞
      
      // üéØ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      'ab_paywall_variant': 'default',
      'ab_onboarding_variant': 'standard',
    };
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  T _getValue<T>(String key, T defaultValue) {
    if (!_initialized || _remoteConfig == null) {
      return defaultValue;
    }
    
    try {
      if (T == String) {
        return _remoteConfig!.getString(key) as T;
      } else if (T == int) {
        return _remoteConfig!.getInt(key) as T;
      } else if (T == double) {
        return _remoteConfig!.getDouble(key) as T;
      } else if (T == bool) {
        return _remoteConfig!.getBool(key) as T;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ $key: $e');
      }
    }
    
    return defaultValue;
  }
  
  // üî• –§–û–†–ú–£–õ–´ –í–û–î–´
  double get waterMinPerKg => _getValue('water_min_per_kg', 22.0);
  double get waterOptPerKg => _getValue('water_opt_per_kg', 30.0);
  double get waterMaxPerKg => _getValue('water_max_per_kg', 36.0);
  
  // ‚ö° –≠–õ–ï–ö–¢–†–û–õ–ò–¢–´
  int get sodiumNormal => _getValue('sodium_normal', 2500);
  int get sodiumKeto => _getValue('sodium_keto', 3500);
  int get potassiumNormal => _getValue('potassium_normal', 3000);
  int get potassiumKeto => _getValue('potassium_keto', 3500);
  int get magnesiumNormal => _getValue('magnesium_normal', 350);
  int get magnesiumKeto => _getValue('magnesium_keto', 400);
  
  // üå°Ô∏è HEAT INDEX –ü–û–†–û–ì–ò
  double get heatIndexLow => _getValue('heat_index_low', 27.0);
  double get heatIndexMedium => _getValue('heat_index_medium', 32.0);
  double get heatIndexHigh => _getValue('heat_index_high', 39.0);
  
  double get heatWaterAdjustmentLow => _getValue('heat_water_adjustment_low', 0.05);
  double get heatWaterAdjustmentMedium => _getValue('heat_water_adjustment_medium', 0.08);
  double get heatWaterAdjustmentHigh => _getValue('heat_water_adjustment_high', 0.12);
  
  int get heatSodiumAdjustmentLow => _getValue('heat_sodium_adjustment_low', 500);
  int get heatSodiumAdjustmentMedium => _getValue('heat_sodium_adjustment_medium', 1000);
  int get heatSodiumAdjustmentHigh => _getValue('heat_sodium_adjustment_high', 1500);
  
  // üìä –ü–û–†–û–ì–ò –°–¢–ê–¢–£–°–û–í
  double get dehydrationThreshold => _getValue('hydration_dehydration_threshold', 0.9);
  double get dilutionWaterThreshold => _getValue('hydration_dilution_water_threshold', 1.15);
  double get dilutionSodiumThreshold => _getValue('hydration_dilution_sodium_threshold', 0.6);
  double get lowSaltThreshold => _getValue('hydration_low_salt_threshold', 0.5);
  
  // üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  int get maxFreeReminders => _getValue('max_free_reminders', 4);
  int get coffeeReminderDelayMinutes => _getValue('coffee_reminder_delay_minutes', 45);
  int get reminderSpamProtectionHours => _getValue('reminder_spam_protection_hours', 1);
  int get reminderDailyLimit => _getValue('reminder_daily_limit', 8);
  
  // ‚è∞ –¢–ò–•–ò–ï –ß–ê–°–´
  int get quietHoursStart => _getValue('quiet_hours_start', 22);
  int get quietHoursEnd => _getValue('quiet_hours_end', 7);
  
  // üçΩÔ∏è FASTING AWARE
  bool get fastingAwareEnabled => _getValue('fasting_aware_enabled', true);
  bool get fastingElectrolyteReminderEnabled => _getValue('fasting_electrolyte_reminder_enabled', true);
  bool get fastingRefeedingLadderEnabled => _getValue('fasting_refeeding_ladder_enabled', true);
  
  // üí∞ –ü–û–î–ü–ò–°–ö–ê –ò –¶–ï–ù–´
  bool get paywallShowTrial => _getValue('paywall_show_trial', true);
  bool get trialEnabled => _getValue('trial_enabled', true);
  int get trialDurationDays => _getValue('trial_duration_days', 7);
  
  // –¶–µ–Ω—ã
  double get priceAnnual => _getValue('price_annual', 9.99);
  double get priceAnnualOriginal => _getValue('price_annual_original', 16.99);
  int get priceAnnualDiscount => _getValue('price_annual_discount', 41);
  String get priceAnnualCurrency => _getValue('price_annual_currency', '\$');
  String get priceAnnualPeriod => _getValue('price_annual_period', '–≤ –≥–æ–¥');
  
  double get priceMonthly => _getValue('price_monthly', 1.99);
  String get priceMonthlyCurrency => _getValue('price_monthly_currency', '\$');
  String get priceMonthlyPeriod => _getValue('price_monthly_period', '–≤ –º–µ—Å—è—Ü');
  
  double get priceLifetime => _getValue('price_lifetime', 24.99);
  String get priceLifetimeCurrency => _getValue('price_lifetime_currency', '\$');
  
  // –¢–µ–∫—Å—Ç—ã –ø–µ–π–≤–æ–ª–∞
  String get paywallTitle => _getValue('paywall_title', 'HydraCoach PRO');
  String get paywallSubtitle => _getValue('paywall_subtitle', '–°—Ç–∞–Ω—å –≥–µ—Ä–æ–µ–º –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞!');
  String get paywallButtonText => _getValue('paywall_button_text', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
  String get paywallTrialText => _getValue('paywall_trial_text', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ');
  String get paywallCancelText => _getValue('paywall_cancel_text', '–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è');
  String get paywallBestValueText => _getValue('paywall_best_value_text', '–í–´–ì–û–î–ù–û');
  String get paywallLifetimeText => _getValue('paywall_lifetime_text', '–î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞');
  String get paywallLifetimeSubtitle => _getValue('paywall_lifetime_subtitle', '–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
  
  // üîß –§–ò–ß –§–õ–ê–ì–ò
  bool get featureSmartReminders => _getValue('feature_smart_reminders', true);
  bool get featureWeeklyReports => _getValue('feature_weekly_reports', true);
  bool get featureCsvExport => _getValue('feature_csv_export', true);
  bool get featureCloudSync => _getValue('feature_cloud_sync', true);
  bool get featureContextualReminders => _getValue('feature_contextual_reminders', true);
  bool get featureHeatProtocols => _getValue('feature_heat_protocols', true);
  
  // üìä SDK –ü–ê–ë–õ–ò–®–ï–†–ê
  bool get publisherSdkEnabled => _getValue('publisher_sdk_enabled', false);
  bool get appsflyerEnabled => _getValue('appsflyer_enabled', false);
  
  List<String> get sanctionedCountries {
    try {
      final jsonString = _getValue('sanctioned_countries', '["RU", "BY", "CN", "IR", "KP"]');
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ JSON
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
      return ['RU', 'BY', 'CN', 'IR', 'KP'];
    } catch (e) {
      return ['RU', 'BY', 'CN', 'IR', 'KP'];
    }
  }
  
  // üéØ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  String get abPaywallVariant => _getValue('ab_paywall_variant', 'default');
  String get abOnboardingVariant => _getValue('ab_onboarding_variant', 'standard');
  
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Future<bool> forceRefresh() async {
    if (!_initialized || _remoteConfig == null) {
      return false;
    }
    
    try {
      await _remoteConfig!.fetchAndActivate();
      
      if (kDebugMode) {
        print('üîÑ Remote Config –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
      }
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      }
      return false;
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Map<String, RemoteConfigValue> getAllParameters() {
    if (!_initialized || _remoteConfig == null) {
      return {};
    }
    
    return _remoteConfig!.getAll();
  }
  
  /// –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã –ø–æ Heat Index
  HeatAdjustments calculateHeatAdjustments(double heatIndex) {
    if (heatIndex < heatIndexLow) {
      return HeatAdjustments(0.0, 0); // –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    } else if (heatIndex < heatIndexMedium) {
      return HeatAdjustments(heatWaterAdjustmentLow, heatSodiumAdjustmentLow);
    } else if (heatIndex < heatIndexHigh) {
      return HeatAdjustments(heatWaterAdjustmentMedium, heatSodiumAdjustmentMedium);
    } else {
      return HeatAdjustments(heatWaterAdjustmentHigh, heatSodiumAdjustmentHigh);
    }
  }
}