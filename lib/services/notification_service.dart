// lib/services/notification_service.dart

import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'dart:io';
import 'dart:math';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _localNotifications = 
      FlutterLocalNotificationsPlugin();
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  static const String channelId = 'hydracoach_notifications';
  static const String channelName = 'HydraCoach –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è';
  static const String channelDescription = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–∞—Ö';
  
  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;

  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
  
  static Future<void> initialize() async {
    final service = NotificationService();
    await service._initializeLocalNotifications();
    await service._initializeFirebaseMessaging();
    await service._initializeTimezone();
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Android 12+
    await service._requestExactAlarmPermission();
    
    print('‚úÖ NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  Future<void> _initializeTimezone() async {
    // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º latest_all –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ timezone
    tz.initializeTimeZones();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é timezone
    final String timeZoneName = await _getTimeZoneName();
    print('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone: $timeZoneName');
    
    try {
      tz.setLocalLocation(tz.getLocation(timeZoneName));
    } catch (e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å timezone $timeZoneName, –∏—Å–ø–æ–ª—å–∑—É–µ–º Moscow');
      tz.setLocalLocation(tz.getLocation('Europe/Moscow'));
    }
  }
  
  Future<String> _getTimeZoneName() async {
    // –ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    // –î–ª—è –†–æ—Å—Å–∏–∏ –æ–±—ã—á–Ω–æ Europe/Moscow
    return 'Europe/Moscow';
  }

  Future<void> _initializeLocalNotifications() async {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      requestCriticalPermission: false,
      defaultPresentAlert: true,
      defaultPresentBadge: true,
      defaultPresentSound: true,
    );
    
    // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
    final bool? initialized = await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
      onDidReceiveBackgroundNotificationResponse: _onBackgroundNotificationTapped,
    );
    
    if (initialized == true) {
      _isInitialized = true;
      print('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      // –°–æ–∑–¥–∞–µ–º Android –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (Platform.isAndroid) {
        await _createAndroidNotificationChannels();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await checkNotificationStatus();
    } else {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  Future<void> _createAndroidNotificationChannels() async {
    final androidPlugin = _localNotifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    
    if (androidPlugin == null) return;
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    const channel = AndroidNotificationChannel(
      channelId,
      channelName,
      description: channelDescription,
      importance: Importance.high,
      enableVibration: true,
      playSound: true,
      showBadge: true,
      enableLights: false,  // –û—Ç–∫–ª—é—á–∞–µ–º LED
    );
    
    await androidPlugin.createNotificationChannel(channel);
    
    // –ö–∞–Ω–∞–ª –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const urgentChannel = AndroidNotificationChannel(
      'hydracoach_urgent',
      '–°—Ä–æ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      description: '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      importance: Importance.max,
      enableVibration: true,
      playSound: true,
      showBadge: true,
    );
    
    await androidPlugin.createNotificationChannel(urgentChannel);
    
    print('üì¢ Android –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã');
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –∞–ª–∞—Ä–º—ã –¥–ª—è Android 12+
  Future<void> _requestExactAlarmPermission() async {
    if (Platform.isAndroid) {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Android 13+)
        final notificationGranted = await androidPlugin.requestNotificationsPermission();
        print('üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $notificationGranted');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –∞–ª–∞—Ä–º—ã (Android 12+)
        final exactAlarmGranted = await androidPlugin.requestExactAlarmsPermission();
        print('üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –∞–ª–∞—Ä–º—ã: $exactAlarmGranted');
      }
    }
  }

  Future<void> _initializeFirebaseMessaging() async {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    final settings = await _messaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );
    
    print('üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏—è FCM: ${settings.authorizationStatus}');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º FCM —Ç–æ–∫–µ–Ω
    await _saveFCMToken();
    
    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    _messaging.onTokenRefresh.listen(_updateFCMToken);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º foreground —Å–æ–æ–±—â–µ–Ω–∏—è
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationOpen);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    final initialMessage = await _messaging.getInitialMessage();
    if (initialMessage != null) {
      _handleNotificationOpen(initialMessage);
    }
  }

  // ==================== FCM –¢–û–ö–ï–ù ====================
  
  Future<void> _saveFCMToken() async {
    try {
      final token = await _messaging.getToken();
      if (token == null) return;
      
      print('üîë FCM Token –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', token);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await _firestore.collection('users').doc(user.uid).set({
          'fcmToken': token,
          'lastTokenUpdate': FieldValue.serverTimestamp(),
          'platform': Platform.operatingSystem,
          'notificationsEnabled': true,
        }, SetOptions(merge: true));
        
        print('‚úÖ FCM Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.uid}');
      }
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
      await _subscribeToTopics();
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  Future<void> _updateFCMToken(String token) async {
    print('üîÑ FCM Token –æ–±–Ω–æ–≤–ª–µ–Ω');
    await _saveFCMToken();
  }

  Future<void> _subscribeToTopics() async {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—â–∏–µ —Ç–æ–ø–∏–∫–∏
    await _messaging.subscribeToTopic('all_users');
    await _messaging.subscribeToTopic('daily_reminders');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    final prefs = await SharedPreferences.getInstance();
    final dietMode = prefs.getString('dietMode') ?? 'normal';
    
    if (dietMode == 'keto') {
      await _messaging.subscribeToTopic('keto_users');
    } else if (dietMode == 'fasting') {
      await _messaging.subscribeToTopic('fasting_users');
    }
    
    print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
  
  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üì® Foreground —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.notification?.title}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (message.notification != null) {
      await showNotification(
        id: message.hashCode,
        title: message.notification!.title ?? 'HydraCoach',
        body: message.notification!.body ?? '',
        payload: message.data['action'] ?? 'open_app',
      );
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    _processMessageData(message.data);
  }

  void _handleNotificationOpen(RemoteMessage message) {
    print('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: ${message.messageId}');
    _processMessageData(message.data);
  }

  void _processMessageData(Map<String, dynamic> data) {
    final action = data['action'];
    
    switch (action) {
      case 'drink_water':
        print('Action: –í—ã–ø–∏—Ç—å –≤–æ–¥—É');
        break;
      case 'add_electrolytes':
        print('Action: –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã');
        break;
      case 'daily_report':
        print('Action: –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç');
        break;
      default:
        print('Action: ${action ?? "unknown"}');
    }
  }
  
  // ==================== PRO –ü–†–û–í–ï–†–ö–ò ====================
  
  // –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<int> _getTodayNotificationCount() async {
    final prefs = await SharedPreferences.getInstance();
    final lastResetDate = prefs.getString('notification_count_reset_date');
    final today = DateTime.now().toIso8601String().split('T')[0];
    
    if (lastResetDate != today) {
      // –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await prefs.setInt('daily_notification_count', 0);
      await prefs.setString('notification_count_reset_date', today);
      return 0;
    }
    
    return prefs.getInt('daily_notification_count') ?? 0;
  }
  
  Future<void> _incrementNotificationCount() async {
    final prefs = await SharedPreferences.getInstance();
    final count = await _getTodayNotificationCount();
    await prefs.setInt('daily_notification_count', count + 1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<bool> canSendNotification() async {
    final prefs = await SharedPreferences.getInstance();
    final isPro = prefs.getBool('is_pro') ?? false;
    
    if (isPro) {
      return true; // PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    }
    
    final count = await _getTodayNotificationCount();
    return count < 4; // FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –º–∞–∫—Å–∏–º—É–º 4 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PRO —Ñ—É–Ω–∫—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<bool> hasProFeature(String feature) async {
    final prefs = await SharedPreferences.getInstance();
    final isPro = prefs.getBool('is_pro') ?? false;
    
    // FREE —Ñ—É–Ω–∫—Ü–∏–∏ - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
    const freeFeatures = ['basic_reminder', 'daily_report'];
    if (freeFeatures.contains(feature)) {
      return true;
    }
    
    // PRO —Ñ—É–Ω–∫—Ü–∏–∏ - —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∫—É
    return isPro;
  }

  // ==================== –õ–û–ö–ê–õ–¨–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
  
  Future<void> showNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
    DateTime? scheduledTime,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!await canSendNotification()) {
      print('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (4/–¥–µ–Ω—å –¥–ª—è FREE)');
      return;
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!_isInitialized) {
      print('‚ö†Ô∏è NotificationService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      await initialize();
    }
    
    final androidDetails = AndroidNotificationDetails(
      channelId,
      channelName,
      channelDescription: channelDescription,
      importance: Importance.high,
      priority: Priority.high,
      ticker: 'HydraCoach',
      icon: '@mipmap/ic_launcher',
      color: const Color.fromARGB(255, 33, 150, 243),
      enableVibration: true,
      playSound: true,
      enableLights: false,
      showWhen: true,
      styleInformation: BigTextStyleInformation(
        body,
        contentTitle: title,
        summaryText: 'HydraCoach',
      ),
      fullScreenIntent: true,
      category: AndroidNotificationCategory.reminder,
      visibility: NotificationVisibility.public,
      autoCancel: true,
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
      badgeNumber: 1,
      interruptionLevel: InterruptionLevel.timeSensitive,
    );
    
    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    if (scheduledTime != null) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
      if (scheduledTime.isBefore(DateTime.now())) {
        print('‚ö†Ô∏è –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É');
        await _localNotifications.show(id, title, body, details, payload: payload);
        await _incrementNotificationCount();
        return;
      }
      
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TZDateTime –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        final tz.TZDateTime tzScheduledTime = tz.TZDateTime.from(
          scheduledTime,
          tz.local,
        );
        
        print('üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:');
        print('   ID: $id');
        print('   –ó–∞–≥–æ–ª–æ–≤–æ–∫: $title');
        print('   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: $scheduledTime');
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await _localNotifications.zonedSchedule(
          id,
          title,
          body,
          tzScheduledTime,
          details,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          payload: payload,
        );
        
        await _incrementNotificationCount();
        print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å ID: $id');
        
      } catch (e, stackTrace) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
        print('Stack trace: $stackTrace');
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        print('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫–∞–∫ fallback');
        await _localNotifications.show(id, title, body, details, payload: payload);
        await _incrementNotificationCount();
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
      await _localNotifications.show(id, title, body, details, payload: payload);
      await _incrementNotificationCount();
      print('üì¨ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: $title');
    }
  }

  // ==================== –£–ú–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ====================
  
  Future<void> scheduleSmartReminders() async {
    print('üß† –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await cancelAllNotifications();
    
    final prefs = await SharedPreferences.getInstance();
    final dietMode = prefs.getString('dietMode') ?? 'normal';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    final waterProgress = prefs.getDouble('waterProgress') ?? 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
    final now = DateTime.now();
    final reminders = <DateTime>[];
    
    // –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (8:00)
    reminders.add(DateTime(now.year, now.month, now.day, 8, 0));
    
    // –î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (dietMode == 'fasting') {
      // –î–ª—è –≥–æ–ª–æ–¥–∞–Ω–∏—è - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
      reminders.add(DateTime(now.year, now.month, now.day, 10, 0)); // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
      reminders.add(DateTime(now.year, now.month, now.day, 14, 0)); // –í–æ–¥–∞
      reminders.add(DateTime(now.year, now.month, now.day, 18, 0)); // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      reminders.add(DateTime(now.year, now.month, now.day, 10, 0));
      reminders.add(DateTime(now.year, now.month, now.day, 12, 30));
      reminders.add(DateTime(now.year, now.month, now.day, 15, 0));
      reminders.add(DateTime(now.year, now.month, now.day, 17, 30));
      reminders.add(DateTime(now.year, now.month, now.day, 20, 0));
    }
    
    // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç (21:00)
    reminders.add(DateTime(now.year, now.month, now.day, 21, 0));
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    int notificationId = 1000;
    for (final reminderTime in reminders) {
      if (reminderTime.isAfter(now)) {
        final title = _getReminderTitle(reminderTime.hour, dietMode);
        final body = _getReminderBody(reminderTime.hour, dietMode, waterProgress);
        
        await showNotification(
          id: notificationId++,
          title: title,
          body: body,
          scheduledTime: reminderTime,
          payload: 'smart_reminder',
        );
      }
    }
    
    print('‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${notificationId - 1000} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
  }

  String _getReminderTitle(int hour, String dietMode) {
    if (hour == 8) return '‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!';
    if (hour == 21) return 'üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç';
    if (hour < 12) return 'üíß –í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É';
    if (hour < 17) return '‚ö° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã';
    return 'üíß –í–µ—á–µ—Ä–Ω—è—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è';
  }

  String _getReminderBody(int hour, String dietMode, double progress) {
    if (hour == 8) {
      return '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è';
    }
    
    if (hour == 21) {
      return '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏';
    }
    
    if (dietMode == 'fasting' && (hour == 10 || hour == 18)) {
      return '–í—Ä–µ–º—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤: –¥–æ–±–∞–≤—å—Ç–µ —â–µ–ø–æ—Ç–∫—É —Å–æ–ª–∏ –≤ –≤–æ–¥—É';
    }
    
    if (progress < 30) {
      return '–í—ã –≤—ã–ø–∏–ª–∏ —Ç–æ–ª—å–∫–æ ${progress.toInt()}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã. –í—Ä–µ–º—è –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å!';
    }
    
    if (progress < 60) {
      return '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏';
    }
    
    return '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è';
  }

  // ==================== PRO –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ====================
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ (PRO)
  Future<bool> schedulePostCoffeeReminder() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PRO —Å—Ç–∞—Ç—É—Å
    if (!await hasProFeature('post_coffee_reminder')) {
      print('‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ—Ñ–µ - PRO —Ñ—É–Ω–∫—Ü–∏—è');
      return false;
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
    final reminderTime = DateTime.now().add(const Duration(minutes: 20));
    
    await showNotification(
      id: 2000 + Random().nextInt(1000),
      title: '‚òï –ü–æ—Å–ª–µ –∫–æ—Ñ–µ',
      body: '–í—ã–ø–µ–π—Ç–µ 250-300 –º–ª –≤–æ–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      scheduledTime: reminderTime,
      payload: 'post_coffee',
    );
    
    print('‚òï PRO: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ');
    return true;
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–∞–∑–æ–≤–æ–µ)
  Future<void> schedulePostWorkoutReminder() async {
    final reminderTime = DateTime.now().add(const Duration(minutes: 30));
    
    await showNotification(
      id: 3000 + Random().nextInt(1000),
      title: 'üí™ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      body: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã: 500 –º–ª –≤–æ–¥—ã + —â–µ–ø–æ—Ç–∫–∞ —Å–æ–ª–∏',
      scheduledTime: reminderTime,
      payload: 'post_workout',
    );
    
    print('üí™ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ');
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –∂–∞—Ä–µ (PRO)
  Future<bool> sendHeatWarning(double heatIndex) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PRO —Å—Ç–∞—Ç—É—Å
    if (!await hasProFeature('heat_warnings')) {
      print('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∂–∞—Ä–µ - PRO —Ñ—É–Ω–∫—Ü–∏—è');
      return false;
    }
    
    String message;
    if (heatIndex > 40) {
      message = '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –Ω–∞ 15% –∏ –¥–æ–±–∞–≤—å—Ç–µ 1–≥ —Å–æ–ª–∏';
    } else if (heatIndex > 32) {
      message = '–ñ–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –Ω–∞ 10% –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã';
    } else {
      message = '–¢–µ–ø–ª–∞—è –ø–æ–≥–æ–¥–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π';
    }
    
    await showNotification(
      id: Random().nextInt(1000),
      title: 'üå°Ô∏è –ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ PRO',
      body: message,
      payload: 'heat_warning',
    );
    
    print('üå°Ô∏è PRO: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return true;
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (PRO)
  Future<bool> schedulePostAlcoholReminder() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PRO —Å—Ç–∞—Ç—É—Å
    if (!await hasProFeature('post_alcohol_reminder')) {
      print('‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è - PRO —Ñ—É–Ω–∫—Ü–∏—è');
      return false;
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    final now = DateTime.now();
    
    // –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç - –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await showNotification(
      id: 4000 + Random().nextInt(100),
      title: 'üç∫ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
      body: '–í—ã–ø–µ–π—Ç–µ 300 –º–ª –≤–æ–¥—ã —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞',
      scheduledTime: now.add(const Duration(minutes: 30)),
      payload: 'post_alcohol_1',
    );
    
    // –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ - –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await showNotification(
      id: 4100 + Random().nextInt(100),
      title: 'üíß –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é',
      body: '–ï—â–µ 500 –º–ª –≤–æ–¥—ã –ø–æ–º–æ–≥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ',
      scheduledTime: now.add(const Duration(hours: 2)),
      payload: 'post_alcohol_2',
    );
    
    // –£—Ç—Ä–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    final tomorrow = DateTime(now.year, now.month, now.day + 1, 8, 0);
    await showNotification(
      id: 4200 + Random().nextInt(100),
      title: '‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
      body: '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å 500 –º–ª –≤–æ–¥—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤',
      scheduledTime: tomorrow,
      payload: 'post_alcohol_morning',
    );
    
    print('üç∫ PRO: –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω');
    return true;
  }
  
  // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç (–±–∞–∑–æ–≤—ã–π)
  Future<void> scheduleEveningReport() async {
    final now = DateTime.now();
    var scheduledTime = DateTime(now.year, now.month, now.day, 21, 0);
    
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 21:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (now.hour >= 21) {
      scheduledTime = scheduledTime.add(const Duration(days: 1));
    }
    
    await showNotification(
      id: 999999, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
      title: 'üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
      body: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      scheduledTime: scheduledTime,
      payload: 'evening_report',
    );
    
    print('üìä –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledTime.day}.${scheduledTime.month} –≤ 21:00');
  }

  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ====================
  
  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
    print('üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ $id –æ—Ç–º–µ–Ω–µ–Ω–æ');
  }

  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
    print('üóëÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
  }

  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _localNotifications.pendingNotificationRequests();
  }
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> saveSettings(ReminderSettings settings) async {
    final prefs = await SharedPreferences.getInstance();
    
    await prefs.setBool('remindersEnabled', settings.enabled);
    await prefs.setInt('reminderFrequency', settings.frequency);
    await prefs.setString('morningTime', settings.morningTime);
    await prefs.setString('eveningTime', settings.eveningTime);
    await prefs.setBool('postCoffeeReminder', settings.postCoffee);
    await prefs.setBool('heatWarnings', settings.heatWarnings);
    await prefs.setBool('postAlcoholReminder', settings.postAlcohol);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if (settings.enabled) {
      await scheduleSmartReminders();
    } else {
      await cancelAllNotifications();
    }
    
    print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getNotificationStats() async {
    final prefs = await SharedPreferences.getInstance();
    final isPro = prefs.getBool('is_pro') ?? false;
    final todayCount = await _getTodayNotificationCount();
    final pending = await getPendingNotifications();
    
    return {
      'is_pro': isPro,
      'today_count': todayCount,
      'daily_limit': isPro ? -1 : 4, // -1 = unlimited
      'remaining_today': isPro ? -1 : (4 - todayCount),
      'pending_notifications': pending.length,
      'features': {
        'basic_reminders': true,
        'post_coffee': isPro,
        'heat_warnings': isPro,
        'post_alcohol': isPro,
        'smart_contextual': isPro,
      }
    };
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ñ–ê–¢–ò–ô ====================
  
  static void _onNotificationTapped(NotificationResponse response) {
    print('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ: ${response.payload}');
    _handleNotificationAction(response.payload);
  }

  @pragma('vm:entry-point')
  static void _onBackgroundNotificationTapped(NotificationResponse response) {
    print('üì± Background —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ: ${response.payload}');
    _handleNotificationAction(response.payload);
  }

  static void _handleNotificationAction(String? payload) {
    if (payload == null) return;
    
    switch (payload) {
      case 'smart_reminder':
        print('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω');
        break;
      case 'post_coffee':
        print('–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É –ø–æ—Å–ª–µ –∫–æ—Ñ–µ');
        break;
      case 'post_workout':
        print('–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        break;
      case 'post_alcohol_1':
      case 'post_alcohol_2':
      case 'post_alcohol_morning':
        print('–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è');
        break;
      case 'daily_report':
      case 'evening_report':
        print('–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç');
        break;
      case 'heat_warning':
        print('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∂–∞—Ä—ã');
        break;
      case 'test':
      case 'test_scheduled':
        print('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        break;
    }
  }

  // ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================
  
  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> sendTestNotification() async {
    await showNotification(
      id: 999,
      title: 'üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      body: '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!',
      payload: 'test',
    );
  }
  
  // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
  Future<void> scheduleTestNotificationIn1Minute() async {
    final scheduledTime = DateTime.now().add(const Duration(minutes: 1));
    
    await showNotification(
      id: 998,
      title: '‚è∞ –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1 –º–∏–Ω)',
      body: '–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      scheduledTime: scheduledTime,
      payload: 'test_scheduled',
    );
    
    print('‚è∞ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${scheduledTime.hour}:${scheduledTime.minute.toString().padLeft(2, '0')}');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> checkNotificationStatus() async {
    final pending = await getPendingNotifications();
    print('');
    print('üìã ===== –°–¢–ê–¢–£–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====');
    print('üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${pending.length}');
    if (pending.isNotEmpty) {
      print('üìã –°–ø–∏—Å–æ–∫:');
      for (var notification in pending) {
        print('   - ID: ${notification.id}');
        print('     Title: ${notification.title}');
        print('     Body: ${notification.body}');
        print('     Payload: ${notification.payload}');
      }
    }
    print('üìã =============================');
    print('');
  }
}

// ==================== –ö–õ–ê–°–° –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ====================

class ReminderSettings {
  final bool enabled;
  final int frequency;
  final String morningTime;
  final String eveningTime;
  final bool postCoffee;
  final bool heatWarnings;
  final bool postAlcohol;
  
  ReminderSettings({
    required this.enabled,
    required this.frequency,
    required this.morningTime,
    required this.eveningTime,
    required this.postCoffee,
    required this.heatWarnings,
    required this.postAlcohol,
  });
}