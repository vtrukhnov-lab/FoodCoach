// lib/services/notification_service_v2.dart

import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'dart:io';
import 'dart:math';
import 'dart:convert';

import '../l10n/app_localizations.dart';
import 'locale_service.dart';
import 'subscription_service.dart';

// ==================== –¢–ò–ü–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

enum NotificationType {
  // FREE
  waterReminder,        // –ë–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ
  postCoffee,          // –ü–æ—Å–ª–µ –∫–æ—Ñ–µ (1 —Ä–∞–∑)
  dailyReport,         // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç
  alcoholCounter,      // –ö–æ–Ω—Ç—Ä-–ø–∏–Ω–≥ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è
  
  // PRO
  smartReminder,       // –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ
  heatWarning,        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ
  workoutReminder,    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  fastingElectrolyte, // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –≤ –ø–æ—Å—Ç
  alcoholRecovery,    // –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  morningCheckIn,     // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
  
  // SYSTEM
  custom,             // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (FCM, —Ç–µ—Å—Ç—ã –∏ —Ç.–¥.)
}

// ==================== –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° ====================

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _localNotifications = 
      FlutterLocalNotificationsPlugin();
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseRemoteConfig _remoteConfig = FirebaseRemoteConfig.instance;
  
  // –ö–∞–Ω–∞–ª—ã –¥–ª—è Android
  static const String channelIdDefault = 'hydracoach_default';
  static const String channelIdUrgent = 'hydracoach_urgent';
  static const String channelIdReport = 'hydracoach_report';
  
  bool _isInitialized = false;
  
  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  bool? _cachedProStatus;
  DateTime? _cacheExpiry;
  
  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
  
  static Future<void> initialize() async {
    final service = NotificationService();
    await service._initializeService();
  }
  
  Future<void> _initializeService() async {
    if (_isInitialized) return;
    
    print('üöÄ Initializing NotificationService...');
    
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ timezone
    await _initializeTimezone();
    
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await _initializeLocalNotifications();
    
    // 3. Firebase Messaging
    await _initializeFirebaseMessaging();
    
    // 4. –ó–∞–≥—Ä—É–∑–∫–∞ Remote Config
    await _loadRemoteConfig();
    
    // 5. –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await _requestPermissions();
    
    // 6. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await _restoreScheduledNotifications();
    
    _isInitialized = true;
    print('‚úÖ NotificationService initialized successfully');
  }
  
  Future<void> _initializeTimezone() async {
    tz.initializeTimeZones();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é timezone
    String timeZoneName = 'Europe/Moscow'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –†–æ—Å—Å–∏–∏
    
    try {
      // –ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ API
      // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final prefs = await SharedPreferences.getInstance();
      timeZoneName = prefs.getString('user_timezone') ?? 'Europe/Moscow';
    } catch (e) {
      print('‚ö†Ô∏è Using default timezone');
    }
    
    try {
      tz.setLocalLocation(tz.getLocation(timeZoneName));
      print('üåç Timezone set to: $timeZoneName');
    } catch (e) {
      print('‚ö†Ô∏è Failed to set timezone, using Moscow');
      tz.setLocalLocation(tz.getLocation('Europe/Moscow'));
    }
  }
  
  Future<void> _initializeLocalNotifications() async {
    // Android –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    
    // iOS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      defaultPresentAlert: true,
      defaultPresentBadge: true,
      defaultPresentSound: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
      onDidReceiveBackgroundNotificationResponse: _onBackgroundNotificationTapped,
    );
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Android –∫–∞–Ω–∞–ª–æ–≤
    if (Platform.isAndroid) {
      await _createAndroidChannels();
    }
  }
  
  Future<void> _createAndroidChannels() async {
    final androidPlugin = _localNotifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    
    if (androidPlugin == null) return;
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    await androidPlugin.createNotificationChannel(
      const AndroidNotificationChannel(
        channelIdDefault,
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
        description: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–∞—Ö',
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
      ),
    );
    
    // –°—Ä–æ—á–Ω—ã–π –∫–∞–Ω–∞–ª
    await androidPlugin.createNotificationChannel(
      const AndroidNotificationChannel(
        channelIdUrgent,
        '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        description: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∂–∞—Ä–µ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö',
        importance: Importance.max,
        enableVibration: true,
        playSound: true,
      ),
    );
    
    // –ö–∞–Ω–∞–ª –æ—Ç—á–µ—Ç–æ–≤
    await androidPlugin.createNotificationChannel(
      const AndroidNotificationChannel(
        channelIdReport,
        '–û—Ç—á–µ—Ç—ã',
        description: '–î–Ω–µ–≤–Ω—ã–µ –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        importance: Importance.defaultImportance,
        enableVibration: false,
        playSound: true,
      ),
    );
  }
  
  Future<void> _initializeFirebaseMessaging() async {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
    final token = await _messaging.getToken();
    if (token != null) {
      await _saveFCMToken(token);
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _messaging.onTokenRefresh.listen(_saveFCMToken);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationOpen);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    final initialMessage = await _messaging.getInitialMessage();
    if (initialMessage != null) {
      _handleNotificationOpen(initialMessage);
    }
  }
  
  Future<void> _loadRemoteConfig() async {
    try {
      await _remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: const Duration(hours: 1),
      ));
      
      await _remoteConfig.fetchAndActivate();
      print('üì° Remote Config loaded');
    } catch (e) {
      print('‚ö†Ô∏è Remote Config error: $e');
    }
  }
  
  Future<void> _requestPermissions() async {
    if (Platform.isIOS) {
      await _messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
      );
    }
    
    if (Platform.isAndroid) {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        // Android 13+ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await androidPlugin.requestNotificationsPermission();
        
        // Android 12+ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
        await androidPlugin.requestExactAlarmsPermission();
      }
    }
  }
  
  // ==================== –ü–†–û–í–ï–†–ö–ò –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ====================
  
  Future<bool> _isProUser() async {
    // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å PRO –Ω–∞ 5 –º–∏–Ω—É—Ç
    if (_cachedProStatus != null && 
        _cacheExpiry != null && 
        DateTime.now().isBefore(_cacheExpiry!)) {
      return _cachedProStatus!;
    }
    
    final prefs = await SharedPreferences.getInstance();
    _cachedProStatus = prefs.getBool('is_pro') ?? false;
    _cacheExpiry = DateTime.now().add(const Duration(minutes: 5));
    
    return _cachedProStatus!;
  }
  
  Future<bool> _canSendNotification() async {
    final isPro = await _isProUser();
    
    // PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω—Ç–∏-—Å–ø–∞–º
    if (isPro) {
      return await _checkAntiSpam();
    }
    
    // FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    return await _checkDailyLimit();
  }
  
  Future<bool> _checkDailyLimit() async {
    final prefs = await SharedPreferences.getInstance();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
    final lastReset = prefs.getString('notification_limit_reset') ?? '';
    final today = DateTime.now().toIso8601String().split('T')[0];
    
    if (lastReset != today) {
      // –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await prefs.setInt('notification_count_today', 0);
      await prefs.setString('notification_limit_reset', today);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
    final count = prefs.getInt('notification_count_today') ?? 0;
    final maxFree = _remoteConfig.getInt('max_free_notifications_daily');
    final limit = maxFree > 0 ? maxFree : 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4
    
    return count < limit;
  }
  
  Future<void> _incrementNotificationCount() async {
    final prefs = await SharedPreferences.getInstance();
    final count = prefs.getInt('notification_count_today') ?? 0;
    await prefs.setInt('notification_count_today', count + 1);
  }
  
  Future<bool> _checkAntiSpam() async {
    final prefs = await SharedPreferences.getInstance();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω—Ç–∏-—Å–ø–∞–º
    final antiSpamEnabled = prefs.getBool('anti_spam_enabled') ?? true;
    if (!antiSpamEnabled) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final lastTime = prefs.getInt('last_notification_time') ?? 0;
    final now = DateTime.now().millisecondsSinceEpoch;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ Remote Config –∏–ª–∏ 60 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    final minInterval = _remoteConfig.getInt('anti_spam_interval_minutes');
    final intervalMs = (minInterval > 0 ? minInterval : 60) * 60 * 1000;
    
    if (now - lastTime < intervalMs) {
      print('‚è∞ Anti-spam: too soon since last notification');
      return false;
    }
    
    return true;
  }
  
  Future<void> _saveLastNotificationTime() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('last_notification_time', DateTime.now().millisecondsSinceEpoch);
  }
  
  Future<bool> _isInQuietHours() async {
    final prefs = await SharedPreferences.getInstance();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    final quietEnabled = prefs.getBool('quiet_hours_enabled') ?? false;
    if (!quietEnabled) return false;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    final startStr = prefs.getString('quiet_hours_start') ?? '22:00';
    final endStr = prefs.getString('quiet_hours_end') ?? '07:00';
    
    final now = DateTime.now();
    final currentMinutes = now.hour * 60 + now.minute;
    
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    final startParts = startStr.split(':');
    final endParts = endStr.split(':');
    
    final startMinutes = int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (startMinutes > endMinutes) {
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      return currentMinutes >= startMinutes || currentMinutes < endMinutes;
    } else {
      // –û–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      return currentMinutes >= startMinutes && currentMinutes < endMinutes;
    }
  }
  
  Future<DateTime> _adjustForQuietHours(DateTime scheduledTime) async {
    if (!await _isInQuietHours()) {
      return scheduledTime;
    }
    
    final prefs = await SharedPreferences.getInstance();
    final endStr = prefs.getString('quiet_hours_end') ?? '07:00';
    final endParts = endStr.split(':');
    
    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
    DateTime adjusted = DateTime(
      scheduledTime.year,
      scheduledTime.month,
      scheduledTime.day,
      int.parse(endParts[0]),
      int.parse(endParts[1]),
    );
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (adjusted.isBefore(DateTime.now())) {
      adjusted = adjusted.add(const Duration(days: 1));
    }
    
    print('üîá Notification rescheduled from $scheduledTime to $adjusted (quiet hours)');
    return adjusted;
  }
  
  // ==================== –†–ï–ñ–ò–ú –ü–û–°–¢–ê ====================
  
  Future<bool> _isInFastingWindow() async {
    final prefs = await SharedPreferences.getInstance();
    final dietMode = prefs.getString('diet_mode') ?? 'normal';
    
    if (dietMode != 'fasting') return false;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    final schedule = prefs.getString('fasting_schedule') ?? '16:8';
    final windowStart = prefs.getInt('fasting_window_start') ?? 20; // 20:00
    final windowEnd = prefs.getInt('fasting_window_end') ?? 12; // 12:00
    
    final now = DateTime.now();
    final currentHour = now.hour;
    
    if (windowStart > windowEnd) {
      // –û–∫–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 20:00 - 12:00)
      return currentHour >= windowStart || currentHour < windowEnd;
    } else {
      // –û–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
      return currentHour >= windowStart && currentHour < windowEnd;
    }
  }
  
  Future<bool> _shouldSendQuietFastingReminder() async {
    // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    final isFasting = await _isInFastingWindow();
    if (!isFasting) return true;
    
    final prefs = await SharedPreferences.getInstance();
    final quietFasting = prefs.getBool('quiet_fasting_mode') ?? false;
    
    return !quietFasting; // –ï—Å–ª–∏ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
  }
  
  // ==================== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –û–¢–ü–†–ê–í–ö–ò ====================
  
  Future<void> sendNotification({
    required NotificationType type,
    required String title,
    required String body,
    DateTime? scheduledTime,
    Map<String, dynamic>? payload,
    bool skipChecks = false,
  }) async {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!_isInitialized) {
      await _initializeService();
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (scheduledTime == null && !skipChecks) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
      if (!await _canSendNotification()) {
        print('‚ùå Cannot send: daily limit or anti-spam');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
      if (await _isInQuietHours()) {
        print('üîá Cannot send: quiet hours active');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ—Å—Ç–∞
      if (!await _shouldSendQuietFastingReminder()) {
        print('ü•ó Cannot send: quiet fasting mode');
        return;
      }
    }
    
    // 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if (scheduledTime != null) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
      if (scheduledTime.isBefore(DateTime.now())) {
        print('‚ö†Ô∏è Scheduled time in the past, sending immediately');
        scheduledTime = null;
      } else if (!skipChecks) {
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
        scheduledTime = await _adjustForQuietHours(scheduledTime);
      }
    }
    
    // 4. –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    String channelId = channelIdDefault;
    Importance importance = Importance.high;
    Priority priority = Priority.high;
    
    switch (type) {
      case NotificationType.heatWarning:
      case NotificationType.workoutReminder:
        channelId = channelIdUrgent;
        importance = Importance.max;
        priority = Priority.max;
        break;
      case NotificationType.dailyReport:
        channelId = channelIdReport;
        importance = Importance.defaultImportance;
        priority = Priority.defaultPriority;
        break;
      default:
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        break;
    }
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final androidDetails = AndroidNotificationDetails(
      channelId,
      channelId == channelIdUrgent ? '–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 
      channelId == channelIdReport ? '–û—Ç—á–µ—Ç—ã' : '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      importance: importance,
      priority: priority,
      ticker: 'HydraCoach',
      icon: '@mipmap/ic_launcher',
      color: const Color.fromARGB(255, 33, 150, 243),
      enableVibration: channelId != channelIdReport,
      playSound: true,
      styleInformation: BigTextStyleInformation(
        body,
        contentTitle: title,
        summaryText: 'HydraCoach',
      ),
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );
    
    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    final notificationId = _generateNotificationId(type);
    
    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try {
      if (scheduledTime == null) {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        await _localNotifications.show(
          notificationId,
          title,
          body,
          details,
          payload: payload != null ? jsonEncode(payload) : null,
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        await _incrementNotificationCount();
        await _saveLastNotificationTime();
        
        print('üì¨ Notification sent: $title');
        
       } else {
        // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        final tzScheduledTime = tz.TZDateTime.from(scheduledTime, tz.local);
        
        await _localNotifications.zonedSchedule(
          notificationId,
          title,
          body,
          tzScheduledTime,
          details,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          // –£–ë–†–ê–õ–ò uiLocalNotificationDateInterpretation - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
          payload: payload != null ? jsonEncode(payload) : null,
        );
        
        print('üìÖ Notification scheduled for $scheduledTime: $title');
      }
      
      // 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await _saveNotificationToHistory(type, title, body, scheduledTime);
      
    } catch (e) {
      print('‚ùå Error sending notification: $e');
    }
  }
  
  int _generateNotificationId(NotificationType type) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    final baseId = type.index * 1000;
    final random = Random().nextInt(999);
    return baseId + random;
  }
  
  // ==================== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ (FREE)
  Future<void> schedulePostCoffeeReminder() async {
    final delay = _remoteConfig.getInt('post_coffee_delay_minutes');
    final delayMinutes = delay > 0 ? delay : 20;
    
    final scheduledTime = DateTime.now().add(Duration(minutes: delayMinutes));
    
    await sendNotification(
      type: NotificationType.postCoffee,
      title: '‚òï –ü–æ—Å–ª–µ –∫–æ—Ñ–µ',
      body: '–í—ã–ø–µ–π—Ç–µ 250-300 –º–ª –≤–æ–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
      scheduledTime: scheduledTime,
      payload: {'action': 'add_water', 'amount': 250},
    );
  }
  
  // –ö–æ–Ω—Ç—Ä-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (FREE)
  Future<void> scheduleAlcoholCounterReminder(int standardDrinks) async {
    // –ë–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    final scheduledTime = DateTime.now().add(const Duration(minutes: 30));
    
    final waterAmount = standardDrinks * 150; // 150 –º–ª –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥—Ä–∏–Ω–∫
    
    await sendNotification(
      type: NotificationType.alcoholCounter,
      title: 'üç∫ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
      body: '–í—ã–ø–µ–π—Ç–µ $waterAmount –º–ª –≤–æ–¥—ã —Å —â–µ–ø–æ—Ç–∫–æ–π —Å–æ–ª–∏',
      scheduledTime: scheduledTime,
      payload: {'action': 'alcohol_recovery', 'water': waterAmount},
    );
    
    // –ï—Å–ª–∏ PRO - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    if (await _isProUser()) {
      await _scheduleAlcoholRecoveryPlan(standardDrinks);
    }
  }
  
  // –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (PRO)
  Future<void> _scheduleAlcoholRecoveryPlan(int standardDrinks) async {
    final recoveryHours = standardDrinks <= 2 ? 6 : 12;
    final now = DateTime.now();
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    for (int hour = 2; hour <= recoveryHours; hour += 2) {
      final scheduledTime = now.add(Duration(hours: hour));
      final waterAmount = 300 + (standardDrinks * 50);
      
      String title = 'üíß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${hour}—á';
      String body = '–í—ã–ø–µ–π—Ç–µ $waterAmount –º–ª –≤–æ–¥—ã';
      
      if (hour == recoveryHours ~/ 2) {
        body += ' + —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã (Na/K/Mg)';
      }
      
      await sendNotification(
        type: NotificationType.alcoholRecovery,
        title: title,
        body: body,
        scheduledTime: scheduledTime,
        payload: {'action': 'recovery_step', 'hour': hour},
        skipChecks: true, // –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      );
    }
    
    // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
    await scheduleMorningCheckIn();
  }
  
  // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω (PRO)
  Future<void> scheduleMorningCheckIn() async {
    final now = DateTime.now();
    var scheduledTime = DateTime(now.year, now.month, now.day + 1, 8, 0);
    
    await sendNotification(
      type: NotificationType.morningCheckIn,
      title: '‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω',
      body: '–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
      scheduledTime: scheduledTime,
      payload: {'action': 'morning_checkin'},
    );
  }
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ (PRO)
  Future<void> sendHeatWarning(double heatIndex) async {
    if (!await _isProUser()) {
      print('‚ö†Ô∏è Heat warnings - PRO feature');
      return;
    }
    
    String body;
    if (heatIndex > 40) {
      body = '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! +15% –≤–æ–¥—ã –∏ +1–≥ —Å–æ–ª–∏';
    } else if (heatIndex > 32) {
      body = '–ñ–∞—Ä–∫–æ! +10% –≤–æ–¥—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã';
    } else {
      body = '–¢–µ–ø–ª–æ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π';
    }
    
    await sendNotification(
      type: NotificationType.heatWarning,
      title: 'üå°Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ',
      body: body,
      payload: {'action': 'heat_warning', 'heat_index': heatIndex},
      skipChecks: true, // –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    );
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (PRO)
  Future<void> sendWorkoutReminder() async {
    if (!await _isProUser()) {
      print('‚ö†Ô∏è Workout reminders - PRO feature');
      return;
    }
    
    await sendNotification(
      type: NotificationType.workoutReminder,
      title: 'üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      body: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É –∏ –≤–æ—Å–ø–æ–ª–Ω—è—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã',
      payload: {'action': 'workout_hydration'},
    );
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    final postWorkout = DateTime.now().add(const Duration(minutes: 30));
    
    await sendNotification(
      type: NotificationType.workoutReminder,
      title: 'üí™ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      body: '500 –º–ª –≤–æ–¥—ã + —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
      scheduledTime: postWorkout,
      payload: {'action': 'post_workout'},
    );
  }
  
  // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç (FREE)
  Future<void> scheduleEveningReport() async {
    final now = DateTime.now();
    final prefs = await SharedPreferences.getInstance();
    
    // –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ 21:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    final reportTime = prefs.getString('evening_report_time') ?? '21:00';
    final timeParts = reportTime.split(':');
    
    var scheduledTime = DateTime(
      now.year,
      now.month,
      now.day,
      int.parse(timeParts[0]),
      int.parse(timeParts[1]),
    );
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (scheduledTime.isBefore(now)) {
      scheduledTime = scheduledTime.add(const Duration(days: 1));
    }
    
    await sendNotification(
      type: NotificationType.dailyReport,
      title: 'üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
      body: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      scheduledTime: scheduledTime,
      payload: {'action': 'show_report'},
    );
  }
  
  // ==================== –£–ú–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (PRO) ====================
  
  Future<void> scheduleSmartReminders() async {
    print('üß† Scheduling smart reminders...');
    
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await cancelAllNotifications();
    
    final prefs = await SharedPreferences.getInstance();
    final isPro = await _isProUser();
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö
    await _scheduleBasicReminders();
    
    // PRO —Ñ—É–Ω–∫—Ü–∏–∏
    if (isPro) {
      await _scheduleContextualReminders();
      await _scheduleFastingReminders();
    }
    
    // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö
    await scheduleEveningReport();
    
    print('‚úÖ Smart reminders scheduled');
  }
  
  Future<void> _scheduleBasicReminders() async {
    final now = DateTime.now();
    final prefs = await SharedPreferences.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    final waterProgress = prefs.getDouble('water_progress') ?? 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    final reminderTimes = [
      DateTime(now.year, now.month, now.day, 8, 0),   // –£—Ç—Ä–æ
      DateTime(now.year, now.month, now.day, 12, 0),  // –û–±–µ–¥
      DateTime(now.year, now.month, now.day, 15, 0),  // –ü–æ—Å–ª–µ –æ–±–µ–¥–∞
      DateTime(now.year, now.month, now.day, 18, 0),  // –í–µ—á–µ—Ä
    ];
    
    for (final time in reminderTimes) {
      if (time.isAfter(now)) {
        String title = 'üíß –í—Ä–µ–º—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏';
        String body = _getSmartReminderBody(time.hour, waterProgress);
        
        await sendNotification(
          type: NotificationType.waterReminder,
          title: title,
          body: body,
          scheduledTime: time,
          payload: {'action': 'drink_water'},
        );
      }
    }
  }
  
  Future<void> _scheduleContextualReminders() async {
    final prefs = await SharedPreferences.getInstance();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    final hasWorkoutToday = prefs.getBool('has_workout_today') ?? false;
    final currentTemp = prefs.getDouble('current_temperature') ?? 20;
    final heatIndex = prefs.getDouble('heat_index') ?? 20;
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –∂–∞—Ä–µ
    if (heatIndex > 27) {
      await sendHeatWarning(heatIndex);
    }
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    if (hasWorkoutToday) {
      final workoutTime = prefs.getString('workout_time');
      if (workoutTime != null) {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        await sendWorkoutReminder();
      }
    }
  }
  
  Future<void> _scheduleFastingReminders() async {
    if (!await _isInFastingWindow()) return;
    
    final now = DateTime.now();
    final prefs = await SharedPreferences.getInstance();
    
    // –í –æ–∫–Ω–æ –ø–æ—Å—Ç–∞ - —Ç–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
    final electrolyteTimes = [
      DateTime(now.year, now.month, now.day, 10, 0),
      DateTime(now.year, now.month, now.day, 14, 0),
      DateTime(now.year, now.month, now.day, 18, 0),
    ];
    
    for (final time in electrolyteTimes) {
      if (time.isAfter(now)) {
        await sendNotification(
          type: NotificationType.fastingElectrolyte,
          title: '‚ö° –í—Ä–µ–º—è —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤',
          body: '–î–æ–±–∞–≤—å—Ç–µ —â–µ–ø–æ—Ç–∫—É —Å–æ–ª–∏ –≤ –≤–æ–¥—É –∏–ª–∏ –≤—ã–ø–µ–π—Ç–µ –±—É–ª—å–æ–Ω',
          scheduledTime: time,
          payload: {'action': 'add_electrolytes'},
        );
      }
    }
  }
  
  String _getSmartReminderBody(int hour, double progress) {
    if (hour == 8) {
      return '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã';
    }
    
    if (progress < 30) {
      return '–í—ã –≤—ã–ø–∏–ª–∏ —Ç–æ–ª—å–∫–æ ${progress.toInt()}% –Ω–æ—Ä–º—ã. –í—Ä–µ–º—è –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å!';
    }
    
    if (progress < 60) {
      return '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ';
    }
    
    return '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å';
  }
  
  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ====================
  
  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
    print('üö´ Notification cancelled: $id');
  }
  
  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
    print('üóëÔ∏è All notifications cancelled');
  }
  
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _localNotifications.pendingNotificationRequests();
  }
  
  Future<void> printNotificationStatus() async {
    final pending = await getPendingNotifications();
    print('\nüìã ===== NOTIFICATION STATUS =====');
    print('üìã Pending notifications: ${pending.length}');
    
    if (pending.isNotEmpty) {
      for (final notification in pending) {
        print('  - ID: ${notification.id}');
        print('    Title: ${notification.title}');
        print('    Body: ${notification.body}');
      }
    }
    
    final prefs = await SharedPreferences.getInstance();
    final isPro = await _isProUser();
    final todayCount = prefs.getInt('notification_count_today') ?? 0;
    
    print('üìã User status: ${isPro ? "PRO" : "FREE"}');
    print('üìã Today sent: $todayCount${isPro ? "" : "/4"}');
    print('üìã =================================\n');
  }
  
  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
  
  static void _onNotificationTapped(NotificationResponse response) {
    print('üì± Notification tapped');
    _processNotificationAction(response.payload);
  }
  
  @pragma('vm:entry-point')
  static void _onBackgroundNotificationTapped(NotificationResponse response) {
    print('üì± Background notification tapped');
    _processNotificationAction(response.payload);
  }
  
  static void _processNotificationAction(String? payload) {
    if (payload == null) return;
    
    try {
      final data = jsonDecode(payload) as Map<String, dynamic>;
      final action = data['action'] as String?;
      
      print('üéØ Processing action: $action');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      switch (action) {
        case 'add_water':
          // –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
          break;
        case 'show_report':
          // –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç
          break;
        case 'morning_checkin':
          // –û—Ç–∫—Ä—ã—Ç—å —á–µ–∫-–∏–Ω
          break;
        default:
          // –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          break;
      }
    } catch (e) {
      print('‚ö†Ô∏è Error processing notification action: $e');
    }
  }
  
  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üì® Foreground FCM message received');
    
    if (message.notification != null) {
      await sendNotification(
        type: NotificationType.custom,
        title: message.notification!.title ?? 'HydraCoach',
        body: message.notification!.body ?? '',
        payload: message.data,
        skipChecks: true, // FCM —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω—ã–µ
      );
    }
  }
  
  void _handleNotificationOpen(RemoteMessage message) {
    print('üì± FCM notification opened');
    _processNotificationAction(jsonEncode(message.data));
  }
  
  Future<void> _saveFCMToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('fcm_token', token);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      await _firestore.collection('users').doc(user.uid).set({
        'fcm_token': token,
        'platform': Platform.operatingSystem,
        'updated_at': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
    await _messaging.subscribeToTopic('all_users');
    
    final dietMode = prefs.getString('diet_mode') ?? 'normal';
    await _messaging.subscribeToTopic('${dietMode}_users');
  }
  
  Future<void> _saveNotificationToHistory(
    NotificationType type,
    String title,
    String body,
    DateTime? scheduledTime,
  ) async {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;
    
    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('notification_history')
          .add({
        'type': type.toString(),
        'title': title,
        'body': body,
        'scheduled_time': scheduledTime?.toIso8601String(),
        'sent_at': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ö†Ô∏è Error saving notification history: $e');
    }
  }
  
  Future<void> _restoreScheduledNotifications() async {
    // –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final pending = await getPendingNotifications();
    print('üìÖ Restored ${pending.length} scheduled notifications');
  }
  
  // ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================
  
  Future<void> sendTestNotification() async {
    await sendNotification(
      type: NotificationType.custom,
      title: 'üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      body: '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!',
      payload: {'action': 'test'},
      skipChecks: true,
    );
  }
  
  Future<void> scheduleTestIn1Minute() async {
    final scheduledTime = DateTime.now().add(const Duration(minutes: 1));
    
    await sendNotification(
      type: NotificationType.custom,
      title: '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç',
      body: '–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥',
      scheduledTime: scheduledTime,
      payload: {'action': 'test_scheduled'},
      skipChecks: true,
    );
  }
}