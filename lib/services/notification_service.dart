// lib/services/notification_service.dart

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'dart:io';
import 'dart:math';
import 'dart:convert';

import '../l10n/app_localizations.dart';
import 'locale_service.dart';
import 'subscription_service.dart';
import 'analytics_service.dart';
import 'notification_texts.dart';
import 'water_progress_cache.dart';

// ==================== –¢–ò–ü–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

enum NotificationType {
  // FREE
  waterReminder,        // –ë–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ
  postCoffee,           // –ü–æ—Å–ª–µ –∫–æ—Ñ–µ (1 —Ä–∞–∑)
  dailyReport,          // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç
  alcoholCounter,       // –ö–æ–Ω—Ç—Ä-–ø–∏–Ω–≥ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è

  // PRO
  smartReminder,        // –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ
  heatWarning,          // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ
  workoutReminder,      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (—Ç–æ–ª—å–∫–æ POST-workout)
  fastingElectrolyte,   // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –≤ –ø–æ—Å—Ç
  alcoholRecovery,      // –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  morningCheckIn,       // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω

  // SYSTEM
  custom,               // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (FCM, —Ç–µ—Å—Ç—ã –∏ —Ç.–¥.)
}

// ==================== –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° ====================

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseRemoteConfig _remoteConfig = FirebaseRemoteConfig.instance;
  final AnalyticsService _analytics = AnalyticsService();

  bool _isInitialized = false;

  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  bool? _cachedProStatus;
  DateTime? _cacheExpiry;

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
  final Map<NotificationType, DateTime> _lastNotificationTime = {};
  final Map<NotificationType, int> _lastNotificationIds = {};
  final Set<int> _pendingNotificationIds = {};

  // –¢–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ (–∑–∞–º–µ–Ω—è—Ç—å—Å—è)
  static const singletonTypes = {
    NotificationType.dailyReport,
    NotificationType.morningCheckIn,
    NotificationType.heatWarning,
    NotificationType.postCoffee,
  };

  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

  static Future<void> initialize() async {
    final service = NotificationService();
    await service._initializeService();
  }

  Future<void> _initializeService() async {
    if (_isInitialized) {
      print('‚ö†Ô∏è NotificationService already initialized, skipping');
      return;
    }

    print('üöÄ Initializing NotificationService...');

    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ timezone
    await _initializeTimezone();
    
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await NotificationTexts.initialize();

    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
    await NotificationTexts.loadLocale();

    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await _initializeLocalNotifications();

    // 5. Firebase Messaging
    await _initializeFirebaseMessaging();

    // 6. –ó–∞–≥—Ä—É–∑–∫–∞ Remote Config
    await _loadRemoteConfig();

    // 7. –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await _requestPermissions();

    // 8. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    await _cleanupAndRestoreNotifications();

    _isInitialized = true;
    print('‚úÖ NotificationService initialized successfully');

    await printNotificationStatus();
    
    // 9. –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try {
      print('üîÑ Auto-scheduling baseline reminders at startup...');
      await scheduleSmartReminders();
    } catch (e) {
      print('‚ö†Ô∏è Failed to schedule smart reminders at init: $e');
    }
  }

  Future<void> _initializeTimezone() async {
    tz.initializeTimeZones();

    String timeZoneName;

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º-–∑–æ–Ω—É –ø–æ —Å–º–µ—â–µ–Ω–∏—é
      final now = DateTime.now();
      final offset = now.timeZoneOffset;

      // –ú–∞–ø–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç–∞–π–º-–∑–æ–Ω—ã
      if (offset.inHours == 1) {
        timeZoneName = 'Europe/Madrid'; // CET (–∑–∏–º–æ–π)
      } else if (offset.inHours == 0) {
        timeZoneName = 'Europe/London'; // GMT
      } else if (offset.inHours == 3) {
        timeZoneName = 'Europe/Moscow'; // MSK
      } else if (offset.inHours == -5) {
        timeZoneName = 'America/New_York'; // EST
      } else if (offset.inHours == -8) {
        timeZoneName = 'America/Los_Angeles'; // PST
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–º–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        final prefs = await SharedPreferences.getInstance();
        timeZoneName = prefs.getString('user_timezone') ?? 'Europe/Madrid';
      }

      print('üåç Detected timezone offset: ${offset.inHours}h, using: $timeZoneName');
    } catch (e) {
      print('‚ö†Ô∏è Failed to detect timezone: $e');
      // Fallback –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
      final prefs = await SharedPreferences.getInstance();
      timeZoneName = prefs.getString('user_timezone') ?? 'Europe/Madrid';
    }

    try {
      tz.setLocalLocation(tz.getLocation(timeZoneName));
      print('üåç Timezone set to: $timeZoneName');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('user_timezone', timeZoneName);
    } catch (e) {
      print('‚ö†Ô∏è Failed to set timezone $timeZoneName, using UTC');
      tz.setLocalLocation(tz.UTC);
    }
  }

  Future<void> _initializeLocalNotifications() async {
    // Android –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');

    // iOS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      defaultPresentAlert: true,
      defaultPresentBadge: true,
      defaultPresentSound: true,
    );

    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
      onDidReceiveBackgroundNotificationResponse: _onBackgroundNotificationTapped,
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ Android –∫–∞–Ω–∞–ª–æ–≤
    if (Platform.isAndroid) {
      await _createAndroidChannels();
    }
  }

  Future<void> _createAndroidChannels() async {
    final androidPlugin = _localNotifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidPlugin == null) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤
    final currentLocale = NotificationTexts.currentLocale;
    
    // ID –∫–∞–Ω–∞–ª–æ–≤ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º —è–∑—ã–∫–∞
    final defaultChannelId = 'hydracoach_default_$currentLocale';
    final urgentChannelId = 'hydracoach_urgent_$currentLocale';
    final reportChannelId = 'hydracoach_report_$currentLocale';
    final silentChannelId = 'hydracoach_silent_$currentLocale';

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        defaultChannelId,
        NotificationTexts.channelNameDefault,
        description: NotificationTexts.channelDescDefault,
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
      ),
    );

    // –°—Ä–æ—á–Ω—ã–π –∫–∞–Ω–∞–ª
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        urgentChannelId,
        NotificationTexts.channelNameUrgent,
        description: NotificationTexts.channelDescUrgent,
        importance: Importance.max,
        enableVibration: true,
        playSound: true,
      ),
    );

    // –ö–∞–Ω–∞–ª –æ—Ç—á–µ—Ç–æ–≤
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        reportChannelId,
        NotificationTexts.channelNameReport,
        description: NotificationTexts.channelDescReport,
        importance: Importance.defaultImportance,
        enableVibration: false,
        playSound: true,
      ),
    );

    // –¢–∏—Ö–∏–π –∫–∞–Ω–∞–ª (–¥–ª—è –Ω–æ—á–Ω—ã—Ö recovery-–ø–∏–Ω–≥–æ–≤ –±–µ–∑ –∑–≤—É–∫–∞)
    await androidPlugin.createNotificationChannel(
      AndroidNotificationChannel(
        silentChannelId,
        NotificationTexts.channelNameSilent,
        description: NotificationTexts.channelDescSilent,
        importance: Importance.low,
        enableVibration: false,
        playSound: false,
      ),
    );
    
    print('‚úÖ Created Android channels for locale: $currentLocale');
  }

  Future<void> _initializeFirebaseMessaging() async {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
    final token = await _messaging.getToken();
    if (token != null) {
      await _saveFCMToken(token);
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _messaging.onTokenRefresh.listen(_saveFCMToken);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationOpen);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    final initialMessage = await _messaging.getInitialMessage();
    if (initialMessage != null) {
      _handleNotificationOpen(initialMessage);
    }
  }

  Future<void> _loadRemoteConfig() async {
    try {
      await _remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: const Duration(hours: 1),
      ));

      await _remoteConfig.fetchAndActivate();
      print('üì° Remote Config loaded');
    } catch (e) {
      print('‚ö†Ô∏è Remote Config error: $e');
    }
  }

  Future<void> _requestPermissions() async {
    if (Platform.isIOS) {
      await _messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
      );
    }

    if (Platform.isAndroid) {
      final androidPlugin = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

      if (androidPlugin != null) {
        // Android 13+ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await androidPlugin.requestNotificationsPermission();

        // Android 12+ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
        await androidPlugin.requestExactAlarmsPermission();
      }
    }
  }

  Future<void> _cleanupAndRestoreNotifications() async {
    final pending = await getPendingNotifications();
    print('üìÖ Found ${pending.length} pending notifications');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    _pendingNotificationIds.clear();
    for (final notification in pending) {
      _pendingNotificationIds.add(notification.id);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ SharedPreferences
    final prefs = await SharedPreferences.getInstance();
    final lastCoffeeTime = prefs.getInt('last_coffee_notification_time');
    if (lastCoffeeTime != null) {
      _lastNotificationTime[NotificationType.postCoffee] =
          DateTime.fromMillisecondsSinceEpoch(lastCoffeeTime);
    }
  }

  // ==================== –ü–†–û–í–ï–†–ö–ò –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ====================

  Future<bool> _isProUser() async {
    // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å PRO –Ω–∞ 5 –º–∏–Ω—É—Ç
    if (_cachedProStatus != null &&
        _cacheExpiry != null &&
        DateTime.now().isBefore(_cacheExpiry!)) {
      return _cachedProStatus!;
    }

    final prefs = await SharedPreferences.getInstance();
    _cachedProStatus = prefs.getBool('is_pro') ?? false;
    _cacheExpiry = DateTime.now().add(const Duration(minutes: 5));

    return _cachedProStatus!;
  }

  Future<bool> _isDuplicateNotification(NotificationType type, {Duration? minInterval}) async {
    final lastTime = _lastNotificationTime[type];
    if (lastTime == null) return false;

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    final intervals = {
      NotificationType.postCoffee: const Duration(hours: 2),
      NotificationType.waterReminder: const Duration(hours: 1),
      NotificationType.dailyReport: const Duration(hours: 23),
      NotificationType.alcoholCounter: const Duration(hours: 1),
      NotificationType.smartReminder: const Duration(minutes: 30),
      NotificationType.workoutReminder: const Duration(hours: 2),
    };

    final requiredInterval = minInterval ?? intervals[type] ?? const Duration(minutes: 30);
    final timeSinceLastpassed = DateTime.now().difference(lastTime);

    if (timeSinceLastpassed < requiredInterval) {
      print('‚ö†Ô∏è Duplicate prevention: $type was sent ${timeSinceLastpassed.inMinutes} min ago');

      await _analytics.logNotificationDuplicate(
        type: type.toString(),
        count: 1,
      );

      return true;
    }

    return false;
  }

  Future<void> _cancelOldNotificationOfType(NotificationType type) async {
    final oldId = _lastNotificationIds[type];
    if (oldId != null && _pendingNotificationIds.contains(oldId)) {
      await cancelNotification(oldId);
      print('üö´ Cancelled old notification of type $type (ID: $oldId)');
    }
  }

  Future<bool> _canSendNotification() async {
    final isPro = await _isProUser();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –≤—Å–µ—Ö (FREE: 90 –º–∏–Ω, PRO: 60 –º–∏–Ω)
    final okInterval = await _checkAntiSpam(overrideMinutes: isPro ? 60 : 90);
    if (!okInterval) return false;

    // FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    if (!isPro) {
      return await _checkDailyLimit();
    }

    return true;
  }

  Future<bool> _checkDailyLimit() async {
    final prefs = await SharedPreferences.getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
    final lastReset = prefs.getString('notification_limit_reset') ?? '';
    final today = DateTime.now().toIso8601String().split('T')[0];

    if (lastReset != today) {
      // –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await prefs.setInt('notification_count_today', 0);
      await prefs.setString('notification_limit_reset', today);
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
    final count = prefs.getInt('notification_count_today') ?? 0;
    final maxFree = _remoteConfig.getInt('max_free_notifications_daily');
    final limit = maxFree > 0 ? maxFree : 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4

    return count < limit;
  }

  Future<void> _incrementNotificationCount() async {
    final prefs = await SharedPreferences.getInstance();
    final count = prefs.getInt('notification_count_today') ?? 0;
    await prefs.setInt('notification_count_today', count + 1);
  }

  Future<bool> _checkAntiSpam({int? overrideMinutes}) async {
    final prefs = await SharedPreferences.getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω—Ç–∏-—Å–ø–∞–º
    final antiSpamEnabled = prefs.getBool('anti_spam_enabled') ?? true;
    if (!antiSpamEnabled) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final lastTime = prefs.getInt('last_notification_time') ?? 0;
    final now = DateTime.now().millisecondsSinceEpoch;

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    final rc = _remoteConfig.getInt('anti_spam_interval_minutes');
    final minMin = overrideMinutes ?? (rc > 0 ? rc : 60);
    final intervalMs = minMin * 60 * 1000;

    if (now - lastTime < intervalMs) {
      print('‚è∞ Anti-spam: too soon since last notification (need ${minMin} min)');
      return false;
    }

    return true;
  }

  Future<void> _saveLastNotificationTime() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('last_notification_time', DateTime.now().millisecondsSinceEpoch);
  }

  // PRO —Å—É—Ç–æ—á–Ω—ã–π –∫–∞–ø (–º—è–≥–∫. 6 / –∂—ë—Å—Ç–∫. 8) ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –ø—É—à–∞–º
  Future<bool> _checkProDailyCap() async {
    final prefs = await SharedPreferences.getInstance();
    final lastReset = prefs.getString('pro_cap_reset') ?? '';
    final today = DateTime.now().toIso8601String().split('T')[0];
    if (lastReset != today) {
      await prefs.setInt('pro_sent_today', 0);
      await prefs.setString('pro_cap_reset', today);
    }
    final sent = prefs.getInt('pro_sent_today') ?? 0;

    final soft = _remoteConfig.getInt('push_pro_daily_cap');
    final hard = _remoteConfig.getInt('push_pro_hard_cap');
    final softCap = soft > 0 ? soft : 6;
    final hardCap = hard > 0 ? hard : 8;

    if (sent >= hardCap) return false; // –∂–µ—Å—Ç–∫–∏–π —Å—Ç–æ–ø
    if (sent >= softCap) {
      // –ú—è–≥–∫–∏–π –∫–∞–ø –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –Ω–µ —Å—Ç–æ–ø–æ—Ä–∏–º, –Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
      await _analytics.logNotificationError(
        type: 'PRO_CAP',
        error: 'Soft cap reached ($softCap)',
      );
    }
    return true;
  }

  Future<void> _incrementProCountIfNeeded() async {
    if (!await _isProUser()) return;
    final prefs = await SharedPreferences.getInstance();
    final sent = prefs.getInt('pro_sent_today') ?? 0;
    await prefs.setInt('pro_sent_today', sent + 1);
  }

  Future<bool> _isInQuietHours() async {
    // –¢–∏—Ö–∏–µ —á–∞—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è PRO
    final isPro = await _isProUser();
    if (!isPro) return false;

    final prefs = await SharedPreferences.getInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã (–¥–ª—è PRO –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    final quietEnabled = prefs.getBool('quiet_hours_enabled') ?? true;
    if (!quietEnabled) return false;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    final startStr = prefs.getString('quiet_hours_start') ?? '22:00';
    final endStr   = prefs.getString('quiet_hours_end')   ?? '07:00';

    return _isInQuietHoursAt(DateTime.now(), startStr, endStr);
  }

  bool _isInQuietHoursAt(DateTime dt, String startStr, String endStr) {
    final currentMinutes = dt.hour * 60 + dt.minute;

    final startParts = startStr.split(':');
    final endParts   = endStr.split(':');

    final startMinutes = int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes   = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);

    if (startMinutes > endMinutes) {
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      return currentMinutes >= startMinutes || currentMinutes < endMinutes;
    } else {
      // –û–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      return currentMinutes >= startMinutes && currentMinutes < endMinutes;
    }
  }

  Future<DateTime> _adjustForQuietHours(DateTime scheduledTime) async {
    if (!await _isInQuietHours()) {
      return scheduledTime;
    }

    final prefs = await SharedPreferences.getInstance();
    final endStr = prefs.getString('quiet_hours_end') ?? '07:00';
    final endParts = endStr.split(':');

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
    DateTime adjusted = DateTime(
      scheduledTime.year,
      scheduledTime.month,
      scheduledTime.day,
      int.parse(endParts[0]),
      int.parse(endParts[1]),
    );

    // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (adjusted.isBefore(DateTime.now())) {
      adjusted = adjusted.add(const Duration(days: 1));
    }

    print('üîá Notification rescheduled from $scheduledTime to $adjusted (quiet hours)');
    return adjusted;
  }

  // ==================== –†–ï–ñ–ò–ú –ü–û–°–¢–ê ====================

  Future<bool> _isInFastingWindow() async {
    final prefs = await SharedPreferences.getInstance();
    final dietMode = prefs.getString('diet_mode') ?? 'normal';

    if (dietMode != 'fasting') return false;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    final schedule = prefs.getString('fasting_schedule') ?? '16:8';
    final windowStart = prefs.getInt('fasting_window_start') ?? 20; // 20:00
    final windowEnd   = prefs.getInt('fasting_window_end')   ?? 12; // 12:00

    final now = DateTime.now();
    final currentHour = now.hour;

    if (windowStart > windowEnd) {
      // –û–∫–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 20:00 - 12:00)
      return currentHour >= windowStart || currentHour < windowEnd;
    } else {
      // –û–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
      return currentHour >= windowStart && currentHour < windowEnd;
    }
  }

  Future<bool> _shouldSendQuietFastingReminder() async {
    // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    final isFasting = await _isInFastingWindow();
    if (!isFasting) return true;

    final prefs = await SharedPreferences.getInstance();
    final quietFasting = prefs.getBool('quiet_fasting_mode') ?? false;

    return !quietFasting; // –ï—Å–ª–∏ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –õ–û–ö–ê–õ–ò ====================
  
  Future<void> _ensureTextsLoaded() async {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    // –ú–µ—Ç–æ–¥ initialize() –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ —Ç–µ–∫—Å—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await NotificationTexts.initialize();
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª–∏ –Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    await NotificationTexts.loadLocale();
  }

  // ==================== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –û–¢–ü–†–ê–í–ö–ò ====================

  Future<void> sendNotification({
    required NotificationType type,
    required String title,
    required String body,
    DateTime? scheduledTime,
    Map<String, dynamic>? payload,
    bool skipChecks = false,
    bool silentIfQuiet = false, // NEW: –¥–µ–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ¬´—Ç–∏—Ö–∏–º¬ª –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã
  }) async {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!_isInitialized) {
      await _initializeService();
    }

    // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await _ensureTextsLoaded();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
    if (!skipChecks && await _isDuplicateNotification(type)) {
      print('üö´ Duplicate notification blocked: $type');
      return;
    }

    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (scheduledTime == null && !skipChecks) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤/–∞–Ω—Ç–∏—Å–ø–∞–º–∞
      if (!await _canSendNotification()) {
        print('‚ùå Cannot send: daily limit or anti-spam');

        await _analytics.logNotificationError(
          type: type.toString(),
          error: 'Daily limit or anti-spam',
        );

        return;
      }

      // PRO –∂—ë—Å—Ç–∫–∏–π –∫–∞–ø - —Ç–æ–∂–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö
      if (await _isProUser()) {
        if (!await _checkProDailyCap()) {
          print('‚ùå PRO hard cap reached');
          await _analytics.logNotificationError(
            type: type.toString(),
            error: 'PRO hard cap',
          );
          return;
        }
      }

      // –¢–∏—Ö–∏–µ —á–∞—Å—ã/–ø–æ—Å—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      if (await _isInQuietHours() && !silentIfQuiet) {
        print('üîá Cannot send: quiet hours active');
        return;
      }
      if (!await _shouldSendQuietFastingReminder()) {
        print('ü•ó Cannot send: quiet fasting mode');
        return;
      }
    }

    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è singleton —Ç–∏–ø–æ–≤
    if (singletonTypes.contains(type)) {
      await _cancelOldNotificationOfType(type);
    }

    // 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if (scheduledTime != null) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
      if (scheduledTime.isBefore(DateTime.now())) {
        print('‚ö†Ô∏è Scheduled time in the past, sending immediately');
        scheduledTime = null;
      } else if (!skipChecks) {
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å–∏–ª–∏ ¬´—Ç–∏—Ö–æ¬ª)
        if (!silentIfQuiet) {
          scheduledTime = await _adjustForQuietHours(scheduledTime);
        }
      }
    }

    // 4. –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–∏ ¬´—Ç–∏—Ö–æ—Å—Ç–∏¬ª –ø—Ä–∏ –Ω—É–∂–¥–µ)
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è —è–∑—ã–∫–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤
    final currentLocale = NotificationTexts.currentLocale;
    String channelId = 'hydracoach_default_$currentLocale';
    Importance importance = Importance.high;
    Priority priority = Priority.high;

    switch (type) {
      case NotificationType.heatWarning:
      case NotificationType.workoutReminder:
        channelId = 'hydracoach_urgent_$currentLocale';
        importance = Importance.max;
        priority = Priority.max;
        break;
      case NotificationType.dailyReport:
        channelId = 'hydracoach_report_$currentLocale';
        importance = Importance.defaultImportance;
        priority = Priority.defaultPriority;
        break;
      default:
        break;
    }

    // –û–ø—Ä–µ–¥–µ–ª–∏–º, –±—É–¥–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ¬´—Ç–∏—Ö–∏–º¬ª (–¥–ª—è iOS/Android)
    bool quietForThis = false;
    if (silentIfQuiet) {
      if (scheduledTime != null) {
        final prefs = await SharedPreferences.getInstance();
        final startStr = prefs.getString('quiet_hours_start') ?? '22:00';
        final endStr   = prefs.getString('quiet_hours_end')   ?? '07:00';
        quietForThis = _isInQuietHoursAt(scheduledTime, startStr, endStr) && await _isProUser();
      } else {
        quietForThis = await _isInQuietHours();
      }
    }
    if (quietForThis) {
      channelId = 'hydracoach_silent_$currentLocale'; // Android: –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ç–∏—Ö–∏–π –∫–∞–Ω–∞–ª
      importance = Importance.low;
      priority = Priority.low;
    }

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final androidDetails = AndroidNotificationDetails(
      channelId,
      channelId.contains('urgent') ? NotificationTexts.channelNameUrgent
          : channelId.contains('report') ? NotificationTexts.channelNameReport
          : channelId.contains('silent') ? NotificationTexts.channelNameSilent
          : NotificationTexts.channelNameDefault,
      importance: importance,
      priority: priority,
      ticker: 'HydraCoach',
      icon: '@mipmap/ic_launcher',
      color: const Color.fromARGB(255, 33, 150, 243),
      enableVibration: !channelId.contains('report') && !channelId.contains('silent'),
      playSound: !channelId.contains('silent'),
      styleInformation: BigTextStyleInformation(
        body,
        contentTitle: title,
        summaryText: 'HydraCoach',
      ),
    );

    final iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: !quietForThis, // iOS: ¬´—Ç–∏—Ö–æ¬ª = –±–µ–∑ –∑–≤—É–∫–∞
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
    final notificationId = _generateNotificationId(type, when: scheduledTime);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º (–¥–ª—è singleton —Ç–∏–ø–æ–≤)
    if (singletonTypes.contains(type)) {
      _lastNotificationIds[type] = notificationId;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≤ payload –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    final mergedPayload = {'type': type.name, ...?payload};
    final payloadStr = jsonEncode(mergedPayload);

    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try {
      if (scheduledTime == null) {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        await _localNotifications.show(
          notificationId,
          title,
          body,
          details,
          payload: payloadStr,
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –≤—Ä–µ–º—è
        await _incrementNotificationCount();
        await _saveLastNotificationTime();
        await _incrementProCountIfNeeded();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        _lastNotificationTime[type] = DateTime.now();
        if (type == NotificationType.postCoffee) {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setInt(
            'last_coffee_notification_time',
            DateTime.now().millisecondsSinceEpoch,
          );
        }

        print('üì¨ Notification sent: $title');

        await _analytics.logNotificationSent(
          type: type.toString(),
          isScheduled: false,
        );
      } else {
        // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        final tzScheduledTime = tz.TZDateTime.from(scheduledTime, tz.local);

        await _localNotifications.zonedSchedule(
          notificationId,
          title,
          body,
          tzScheduledTime,
          details,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          payload: payloadStr,
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        _pendingNotificationIds.add(notificationId);

        print('üìÖ Notification scheduled for $scheduledTime: $title');

        await _analytics.logNotificationScheduled(
          type: type.toString(),
          scheduledTime: scheduledTime,
          delayMinutes: scheduledTime.difference(DateTime.now()).inMinutes,
        );
      }

      // 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await _saveNotificationToHistory(type, title, body, scheduledTime);
    } catch (e) {
      print('‚ùå Error sending notification: $e');

      await _analytics.logNotificationError(
        type: type.toString(),
        error: e.toString(),
      );
    }
  }

  int _dayOfYear(DateTime d) {
    final start = DateTime(d.year, 1, 1);
    return d.difference(start).inDays + 1;
  }

  int _generateNotificationId(NotificationType type, {DateTime? when}) {
    // –£–Ω–∏–∫–∞–ª–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–∏–ø–∞ + –º–∏–Ω—É—Ç—ã –≤ –¥–Ω–µ + –¥–µ–Ω—å –≥–æ–¥–∞
    final t = when ?? DateTime.now();
    final day = _dayOfYear(t);           // 1..366
    final mod = (day * 1440 + t.hour * 60 + t.minute) % 1000; // 0..999
    return type.index * 1000 + mod;
  }

  // ==================== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ (FREE)
  Future<void> schedulePostCoffeeReminder() async {
    // –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
    if (await _isDuplicateNotification(NotificationType.postCoffee)) {
      print('‚òï Coffee reminder already scheduled recently');
      return;
    }

    final delay = _remoteConfig.getInt('post_coffee_delay_minutes');
    final delayMinutes = delay > 0 ? delay : 45; // 45 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    final scheduledTime = DateTime.now().add(Duration(minutes: delayMinutes));

    await sendNotification(
      type: NotificationType.postCoffee,
      title: NotificationTexts.postCoffeeTitle,
      body: NotificationTexts.postCoffeeBody,
      scheduledTime: scheduledTime,
      payload: {'action': 'add_water', 'amount': 250},
    );
  }

  // –ö–æ–Ω—Ç—Ä-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (FREE)
  Future<void> scheduleAlcoholCounterReminder(int standardDrinks) async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    // –ë–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    final scheduledTime = DateTime.now().add(const Duration(minutes: 30));

    final waterAmount = standardDrinks * 150; // 150 –º–ª –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥—Ä–∏–Ω–∫

    await sendNotification(
      type: NotificationType.alcoholCounter,
      title: NotificationTexts.alcoholCounterTitle,
      body: NotificationTexts.alcoholCounterBody(waterAmount),
      scheduledTime: scheduledTime,
      payload: {'action': 'alcohol_recovery', 'water': waterAmount},
    );

    // –ï—Å–ª–∏ PRO - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    if (await _isProUser()) {
      await _scheduleAlcoholRecoveryPlan(standardDrinks);
    }
  }

  // –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è (PRO)
  Future<void> _scheduleAlcoholRecoveryPlan(int standardDrinks) async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    final recoveryHours = standardDrinks <= 2 ? 6 : 12;
    final now = DateTime.now();

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    for (int hour = 2; hour <= recoveryHours; hour += 2) {
      final scheduledTime = now.add(Duration(hours: hour));
      final waterAmount = 300 + (standardDrinks * 50);

      final withElectrolytes = hour == recoveryHours ~/ 2;

      await sendNotification(
        type: NotificationType.alcoholRecovery,
        title: NotificationTexts.alcoholRecoveryStepTitle(hour),
        body: NotificationTexts.alcoholRecoveryStepBody(waterAmount, withElectrolytes),
        scheduledTime: scheduledTime,
        payload: {'action': 'recovery_step', 'hour': hour},
        skipChecks: true,       // –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º
        silentIfQuiet: true,    // –ù–û –Ω–æ—á—å—é ‚Äî –±–µ–∑ –∑–≤—É–∫–∞
      );
    }

    // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
    await scheduleMorningCheckIn();
  }

  // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω (PRO) - –≤ 07:05
  Future<void> scheduleMorningCheckIn() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    final now = DateTime.now();
    var scheduledTime = DateTime(now.year, now.month, now.day + 1, 7, 5); // 07:05

    await sendNotification(
      type: NotificationType.morningCheckIn,
      title: NotificationTexts.morningCheckInTitle,
      body: NotificationTexts.morningCheckInBody,
      scheduledTime: scheduledTime,
      payload: {'action': 'morning_checkin'},
    );
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ (PRO)
  Future<void> sendHeatWarning(double heatIndex) async {
    if (!await _isProUser()) {
      print('‚ö†Ô∏è Heat warnings - PRO feature');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();

    await sendNotification(
      type: NotificationType.heatWarning,
      title: NotificationTexts.heatWarningTitle,
      body: NotificationTexts.heatWarningBody(heatIndex),
      payload: {'action': 'heat_warning', 'heat_index': heatIndex},
      skipChecks: true, // –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    );
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (PRO) - —Ç–æ–ª—å–∫–æ POST-workout
  Future<void> sendWorkoutReminder({DateTime? workoutEndTime}) async {
    if (!await _isProUser()) {
      print('‚ö†Ô∏è Workout reminders - PRO feature');
      return;
    }

    if (workoutEndTime == null) {
      print('‚ö†Ô∏è No workout end time provided');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    final postWorkout = workoutEndTime.add(const Duration(minutes: 30));

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ - –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
    if (postWorkout.isBefore(DateTime.now())) {
      print('‚ö†Ô∏è Post-workout time already passed');
      return;
    }

    await sendNotification(
      type: NotificationType.workoutReminder,
      title: NotificationTexts.postWorkoutTitle,
      body: NotificationTexts.postWorkoutBody,
      scheduledTime: postWorkout,
      payload: {'action': 'post_workout'},
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–∞–∂–∞–µ—Ç —Ç–∏—Ö–∏–µ —á–∞—Å—ã (–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç), —Ç—É—Ç ¬´—Ç–∏—Ö–æ¬ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    );
  }

  // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç (FREE)
  Future<void> scheduleEveningReport() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    final now = DateTime.now();
    final prefs = await SharedPreferences.getInstance();

    // –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ 21:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    final reportTime = prefs.getString('evening_report_time') ?? '21:00';
    final timeParts = reportTime.split(':');

    var scheduledTime = DateTime(
      now.year,
      now.month,
      now.day,
      int.parse(timeParts[0]),
      int.parse(timeParts[1]),
    );

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (scheduledTime.isBefore(now)) {
      scheduledTime = scheduledTime.add(const Duration(days: 1));
    }

    await sendNotification(
      type: NotificationType.dailyReport,
      title: NotificationTexts.dailyReportTitle,
      body: NotificationTexts.dailyReportBody,
      scheduledTime: scheduledTime,
      payload: {'action': 'show_report'},
    );
  }

  // ==================== –£–ú–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (PRO) ====================

  Future<void> scheduleSmartReminders() async {
    print('üß† Scheduling smart reminders...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();

    // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º recovery –∏ –æ—Ç—á–µ—Ç—ã)
    await cancelByTypes({
      NotificationType.waterReminder,
      NotificationType.fastingElectrolyte,
      NotificationType.smartReminder,
    });

    final isPro = await _isProUser();

    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö (–≤–æ–¥–∞ ‚Äî –µ—Å–ª–∏ –ù–ï –ø–æ—Å—Ç)
    await _scheduleBasicReminders();

    // PRO —Ñ—É–Ω–∫—Ü–∏–∏
    if (isPro) {
      await _scheduleContextualReminders();
      await _scheduleFastingReminders();
    }

    // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö
    await scheduleEveningReport();

    print('‚úÖ Smart reminders scheduled');
  }

  Future<void> _scheduleBasicReminders() async {
    final now = DateTime.now();

    // –í –æ–∫–Ω–µ –ø–æ—Å—Ç–∞ –≤–æ–¥—É –ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º (—Ç–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π)
    if (await _isInFastingWindow()) {
      return;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –¥–µ–ª–µ–Ω–∏—è
    final waterProgressPercent = await WaterProgressCache.readPercent();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –ø—Ä–æ—à–µ–¥—à–∏—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    final List<List<int>> hmList = [
      [9, 30],
      [12, 30],
      [15, 30],
      [18, 30],
    ];
    
    final reminderTimes = <DateTime>[];
    for (final hm in hmList) {
      DateTime time = DateTime(now.year, now.month, now.day, hm[0], hm[1]);
      
      if (time.isBefore(now.subtract(const Duration(hours: 1)))) {
        // –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        time = time.add(const Duration(days: 1));
      } else if (time.isBefore(now)) {
        // –ü—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        time = now.add(const Duration(hours: 1));
      }
      
      reminderTimes.add(time);
    }

    for (final time in reminderTimes) {
      final title = NotificationTexts.waterReminderTitle;
      // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100
      final body = NotificationTexts.waterReminderBody(
        time.hour, 
        (waterProgressPercent ?? 0).toDouble()
      );

      await sendNotification(
        type: NotificationType.waterReminder,
        title: title,
        body: body,
        scheduledTime: time,
        payload: {'action': 'drink_water'},
      );
    }
  }
  
  Future<void> _scheduleContextualReminders() async {
    final prefs = await SharedPreferences.getInstance();

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç
    final hasWorkoutToday = prefs.getBool('has_workout_today') ?? false;
    final heatIndex = prefs.getDouble('heat_index') ?? 20;

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –∂–∞—Ä–µ
    if (heatIndex > 27) {
      await sendHeatWarning(heatIndex);
    }

    // –¢–†–ï–ù–ò–†–û–í–ö–ê: —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—É—à (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    if (hasWorkoutToday) {
      final workoutTimeStr = prefs.getString('workout_time'); // 'HH:mm'
      final durationMin = prefs.getInt('workout_duration_minutes') ?? 60;

      if (workoutTimeStr != null) {
        final parts = workoutTimeStr.split(':');
        final now = DateTime.now();
        final workoutStart = DateTime(
          now.year,
          now.month,
          now.day,
          int.parse(parts[0]),
          int.parse(parts[1]),
        );
        final workoutEnd = workoutStart.add(Duration(minutes: durationMin));

        await sendWorkoutReminder(workoutEndTime: workoutEnd);
      }
    }
  }

  Future<void> _scheduleFastingReminders() async {
    if (!await _isInFastingWindow()) return;

    final now = DateTime.now();

    // –í –æ–∫–Ω–æ –ø–æ—Å—Ç–∞ - —Ç–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
    final electrolyteTimes = [
      DateTime(now.year, now.month, now.day, 10, 0),
      DateTime(now.year, now.month, now.day, 14, 0),
      DateTime(now.year, now.month, now.day, 18, 0),
    ];

    for (final time in electrolyteTimes) {
      if (time.isAfter(now)) {
        await sendNotification(
          type: NotificationType.fastingElectrolyte,
          title: NotificationTexts.fastingElectrolyteTitle,
          body: NotificationTexts.fastingElectrolyteBody,
          scheduledTime: time,
          payload: {'action': 'add_electrolytes'},
        );
      }
    }
  }

  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ====================

  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
    _pendingNotificationIds.remove(id);
    print('üö´ Notification cancelled: $id');
  }

  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
    _pendingNotificationIds.clear();
    _lastNotificationIds.clear();
    print('üóëÔ∏è All notifications cancelled');
  }

  // –û—Ç–º–µ–Ω–∞ –ø–æ —Ç–∏–ø–∞–º (–¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
  Future<void> cancelByTypes(Set<NotificationType> types) async {
    final pending = await getPendingNotifications();
    final typeIdxSet = types.map((t) => t.index).toSet();
    for (final p in pending) {
      final id = p.id;
      final typeIdx = id ~/ 1000;
      if (typeIdxSet.contains(typeIdx)) {
        await cancelNotification(id);
      }
    }
    print('üö´ Cancelled notifications for types: $types');
  }

  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _localNotifications.pendingNotificationRequests();
  }

  Future<void> printNotificationStatus() async {
    final pending = await getPendingNotifications();
    print('\nüìã ===== NOTIFICATION STATUS =====');
    print('üìã Pending notifications: ${pending.length}');

    if (pending.isNotEmpty) {
      for (final notification in pending) {
        print('  - ID: ${notification.id}');
        print('    Title: ${notification.title}');
        print('    Body: ${notification.body}');
      }
    }

    final prefs = await SharedPreferences.getInstance();
    final isPro = await _isProUser();
    final todayCount = prefs.getInt('notification_count_today') ?? 0;
    final currentLocale = NotificationTexts.currentLocale;

    print('üìã User status: ${isPro ? "PRO" : "FREE"}');
    print('üìã Today sent (FREE): $todayCount${isPro ? "" : "/4"}');
    print('üìã Last coffee reminder: ${_lastNotificationTime[NotificationType.postCoffee]}');
    print('üìã Current locale: $currentLocale');
    print('üìã Timezone: ${tz.local.name}');
    print('üìã =================================\n');
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

  static void _onNotificationTapped(NotificationResponse response) {
    print('üì± Notification tapped');

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    try {
      if (response.payload != null) {
        final data = jsonDecode(response.payload!) as Map<String, dynamic>;
        final type = data['type'] as String?;
        AnalyticsService().logNotificationOpened(
          type: type ?? 'unknown',
          action: data['action'],
        );
      }
    } catch (e) {
      print('Error logging notification tap: $e');
    }

    _processNotificationAction(response.payload);
  }

  @pragma('vm:entry-point')
  static void _onBackgroundNotificationTapped(NotificationResponse response) {
    print('üì± Background notification tapped');
    _processNotificationAction(response.payload);
  }

  static void _processNotificationAction(String? payload) {
    if (payload == null) return;

    try {
      final data = jsonDecode(payload) as Map<String, dynamic>;
      final action = data['action'] as String?;

      print('üéØ Processing action: $action');

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      switch (action) {
        case 'add_water':
          // –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
          break;
        case 'show_report':
          // –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç
          break;
        case 'morning_checkin':
          // –û—Ç–∫—Ä—ã—Ç—å —á–µ–∫-–∏–Ω
          break;
        default:
          // –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          break;
      }
    } catch (e) {
      print('‚ö†Ô∏è Error processing notification action: $e');
    }
  }

  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üì® Foreground FCM message received');

    if (message.notification != null) {
      await sendNotification(
        type: NotificationType.custom,
        title: message.notification!.title ?? 'HydraCoach',
        body: message.notification!.body ?? '',
        payload: message.data,
        skipChecks: true, // FCM —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω—ã–µ
      );
    }
  }

  void _handleNotificationOpen(RemoteMessage message) {
    print('üì± FCM notification opened');
    _processNotificationAction(jsonEncode(message.data));
  }

  Future<void> _saveFCMToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('fcm_token', token);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      await _firestore.collection('users').doc(user.uid).set({
        'fcm_token': token,
        'platform': Platform.operatingSystem,
        'updated_at': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
    await _messaging.subscribeToTopic('all_users');

    final dietMode = prefs.getString('diet_mode') ?? 'normal';
    await _messaging.subscribeToTopic('${dietMode}_users');
  }

  Future<void> _saveNotificationToHistory(
    NotificationType type,
    String title,
    String body,
    DateTime? scheduledTime,
  ) async {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('notification_history')
          .add({
        'type': type.toString(),
        'title': title,
        'body': body,
        'scheduled_time': scheduledTime?.toIso8601String(),
        'sent_at': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ö†Ô∏è Error saving notification history: $e');
    }
  }

  // ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================

  Future<void> sendTestNotification() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    await sendNotification(
      type: NotificationType.custom,
      title: NotificationTexts.testTitle,
      body: NotificationTexts.testBody,
      payload: {'action': 'test'},
      skipChecks: true,
    );

    await _analytics.logTestEvent();
  }

  Future<void> scheduleTestIn1Minute() async {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å
    await _ensureTextsLoaded();
    
    final scheduledTime = DateTime.now().add(const Duration(minutes: 1));

    await sendNotification(
      type: NotificationType.custom,
      title: NotificationTexts.testScheduledTitle,
      body: NotificationTexts.testScheduledBody,
      scheduledTime: scheduledTime,
      payload: {'action': 'test_scheduled'},
      skipChecks: true,
    );
  }

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–ú–ï–ù–´ –Ø–ó–´–ö–ê ====================
  
  /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  /// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç Android –∫–∞–Ω–∞–ª—ã –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
  Future<void> onLocaleChanged(String localeCode) async {
    print('üåç [NotificationService] Language change initiated: $localeCode');
    
    try {
      // 1. –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!_isInitialized) {
        print('‚ö†Ô∏è NotificationService not initialized, initializing first...');
        await _initializeService();
      }
      
      // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–π —è–∑—ã–∫
      print('üìù Updating notification texts to: $localeCode');
      await NotificationTexts.setLocale(localeCode);
      
      // 3. –î–ª—è Android –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
      if (Platform.isAndroid) {
        print('üîß Recreating Android notification channels...');
        await _createAndroidChannels();
      }
      
      // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final pendingBefore = await getPendingNotifications();
      print('üìã Found ${pendingBefore.length} pending notifications before locale change');
      
      // 5. –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      final List<Map<String, dynamic>> eventNotificationsToReschedule = [];
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final eventTypes = {
        1,  // postCoffee - –ø–æ—Å–ª–µ –∫–æ—Ñ–µ
        3,  // alcoholCounter - –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—è
        6,  // workoutReminder - –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        8,  // alcoholRecovery - –ø–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        9,  // morningCheckIn - —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
      };
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      for (final notification in pendingBefore) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è
        int typeIdx;
        int hour;
        int minute;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º ID
        if (notification.id >= 60000 && notification.id < 70000) {
          // Workout notification —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π: 6HHMM
          typeIdx = 6;
          hour = ((notification.id - 60000) ~/ 100) % 100;
          minute = (notification.id - 60000) % 100;
        } else if (notification.id >= 10000) {
          // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤: THHMM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31955 = —Ç–∏–ø 3, 19:55)
          typeIdx = notification.id ~/ 10000;
          hour = ((notification.id % 10000) ~/ 100);
          minute = notification.id % 100;
        } else {
          // –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: TXXX –≥–¥–µ T - —Ç–∏–ø, XXX - –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è % 1000
          typeIdx = notification.id ~/ 1000;
          final minutesFromMidnight = notification.id % 1000;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ 16:40
          final now = DateTime.now();
          
          // –î–ª—è —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ—Ñ–µ, –∞–ª–∫–æ–≥–æ–ª—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞)
          if (eventTypes.contains(typeIdx)) {
            // –ï—Å–ª–∏ ID < 440 (7:20) –Ω–æ —Å–µ–π—á–∞—Å –≤–µ—á–µ—Ä, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ 16:40
            if (minutesFromMidnight < 440 && now.hour >= 16) {
              // –î–æ–±–∞–≤–ª—è–µ–º 1000 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
              final adjustedMinutes = minutesFromMidnight + 1000;
              hour = adjustedMinutes ~/ 60;
              minute = adjustedMinutes % 60;
            } else {
              hour = minutesFromMidnight ~/ 60;
              minute = minutesFromMidnight % 60;
            }
          } else {
            // –î–ª—è –±–∞–∑–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            hour = minutesFromMidnight ~/ 60;
            minute = minutesFromMidnight % 60;
          }
        }
        
        if (eventTypes.contains(typeIdx)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
          final now = DateTime.now();
          DateTime scheduledTime = DateTime(
            now.year,
            now.month,
            now.day,
            hour,
            minute,
          );
          
          // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
          if (scheduledTime.isBefore(now)) {
            scheduledTime = scheduledTime.add(const Duration(days: 1));
          }
          
          // –î–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞ (—Ç–∏–ø 9) - –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞
          if (typeIdx == 9) {
            final checkInHour = (notification.id ~/ 100) % 100;
            final checkInMinute = notification.id % 100;
            // –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            final tomorrow = now.add(const Duration(days: 1));
            scheduledTime = DateTime(
              tomorrow.year,
              tomorrow.month,
              tomorrow.day,
              checkInHour,
              checkInMinute,
            );
          }
          
          eventNotificationsToReschedule.add({
            'type': NotificationType.values[typeIdx],
            'typeIdx': typeIdx,
            'id': notification.id,
            'scheduledTime': scheduledTime,
            'payload': notification.payload,
            'originalTitle': notification.title, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å–∞ recovery
            'originalBody': notification.body,
          });
          
          print('üíæ Will reschedule event notification: Type=${NotificationType.values[typeIdx]} (ID: ${notification.id}) at ${scheduledTime.hour}:${scheduledTime.minute.toString().padLeft(2, '0')}');
        }
      }
      
      // 6. –û—Ç–º–µ–Ω—è–µ–º –í–°–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      print('üóëÔ∏è Cancelling all notifications for complete refresh...');
      
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final allTypes = {
        NotificationType.waterReminder,
        NotificationType.dailyReport,
        NotificationType.smartReminder,
        NotificationType.heatWarning,
        NotificationType.fastingElectrolyte,
        NotificationType.postCoffee,
        NotificationType.alcoholCounter,
        NotificationType.alcoholRecovery,
        NotificationType.workoutReminder,
        NotificationType.morningCheckIn,
      };
      
      await cancelByTypes(allTypes);
      
      // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final prefs = await SharedPreferences.getInstance();
      final notificationsEnabled = prefs.getBool('notificationsEnabled') ?? true;
      
      if (!notificationsEnabled) {
        print('‚ö†Ô∏è Notifications are disabled, skipping rescheduling');
        return;
      }
      
      // 8. –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
      print('üìÖ Rescheduling baseline notifications with new locale...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
      await NotificationTexts.ensureLoaded();
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–æ–¥–∞, —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã, –æ—Ç—á–µ—Ç)
      await scheduleSmartReminders();
      
      // 9. –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
      print('üìÖ Rescheduling event notifications with new locale...');
      
      for (final eventData in eventNotificationsToReschedule) {
        final type = eventData['type'] as NotificationType;
        final scheduledTime = eventData['scheduledTime'] as DateTime;
        
        // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        switch (type) {
          case NotificationType.postCoffee:
            await sendNotification(
              type: NotificationType.postCoffee,
              title: NotificationTexts.postCoffeeTitle,
              body: NotificationTexts.postCoffeeBody,
              scheduledTime: scheduledTime,
              payload: {'action': 'add_water', 'amount': 250},
            );
            break;
            
          case NotificationType.alcoholCounter:
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            await sendNotification(
              type: NotificationType.alcoholCounter,
              title: NotificationTexts.alcoholCounterTitle,
              body: NotificationTexts.alcoholCounterBody(150), // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              scheduledTime: scheduledTime,
              payload: {'action': 'alcohol_recovery', 'water': 150},
            );
            break;
            
          case NotificationType.alcoholRecovery:
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            int recoveryHour = 2; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            // –ò—â–µ–º —á–∞—Å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "üíß Recovery 2h" –∏–ª–∏ "üíß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 2—á")
            final originalTitle = eventData['originalTitle'] as String?;
            if (originalTitle != null) {
              final hourMatch = RegExp(r'(\d+)[h—á]').firstMatch(originalTitle);
              if (hourMatch != null) {
                recoveryHour = int.tryParse(hourMatch.group(1) ?? '') ?? 2;
              }
            }
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            final waterAmount = 350;
            final withElectrolytes = recoveryHour % 3 == 0; // –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
            
            await sendNotification(
              type: NotificationType.alcoholRecovery,
              title: NotificationTexts.alcoholRecoveryStepTitle(recoveryHour),
              body: NotificationTexts.alcoholRecoveryStepBody(waterAmount, withElectrolytes),
              scheduledTime: scheduledTime,
              payload: {'action': 'recovery_step', 'hour': recoveryHour},
              skipChecks: true,
              silentIfQuiet: true,
            );
            break;
            
          case NotificationType.workoutReminder:
            await sendNotification(
              type: NotificationType.workoutReminder,
              title: NotificationTexts.postWorkoutTitle,
              body: NotificationTexts.postWorkoutBody,
              scheduledTime: scheduledTime,
              payload: {'action': 'post_workout'},
            );
            break;
            
          case NotificationType.morningCheckIn:
            await sendNotification(
              type: NotificationType.morningCheckIn,
              title: NotificationTexts.morningCheckInTitle,
              body: NotificationTexts.morningCheckInBody,
              scheduledTime: scheduledTime,
              payload: {'action': 'morning_checkin'},
            );
            break;
            
          default:
            break;
        }
      }
      
      // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final pendingAfter = await getPendingNotifications();
      print('‚úÖ Locale change complete:');
      print('   - Event notifications rescheduled: ${eventNotificationsToReschedule.length}');
      print('   - Total notifications after: ${pendingAfter.length}');
      
      // –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (pendingAfter.isNotEmpty) {
        print('üì¨ Sample notifications after locale change:');
        for (var i = 0; i < (pendingAfter.length > 3 ? 3 : pendingAfter.length); i++) {
          final notification = pendingAfter[i];
          final typeIdx = notification.id ~/ 1000;
          print('   ${i+1}. Type: ${typeIdx < NotificationType.values.length ? NotificationType.values[typeIdx].name : "unknown"}');
          print('      Title: ${notification.title}');
        }
      }
      
      // 11. –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await _analytics.logSettingsChanged(
        setting: 'notification_locale',
        value: localeCode,
      );
      
      print('üìä Analytics: locale changed to $localeCode');
      print('   - All notifications rescheduled with new texts');
      print('   - Event notifications: ${eventNotificationsToReschedule.length}');
      
    } catch (e, stackTrace) {
      print('‚ùå Error changing notification locale: $e');
      print('Stack trace: $stackTrace');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await _analytics.logNotificationError(
        type: 'locale_change',
        error: e.toString(),
      );
    }
  }
}