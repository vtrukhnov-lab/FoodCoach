import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:async';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications = 
      FlutterLocalNotificationsPlugin();
  
  static bool _initialized = false;
  static Timer? _reminderTimer;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  static Future<void> initialize() async {
    if (_initialized) return;
    
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    
    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );
    
    _initialized = true;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    _startPeriodicReminders();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static void _onNotificationTap(NotificationResponse response) {
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω—É–∂–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
    print('Notification tapped: ${response.payload}');
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static Future<void> showNotification({
    required String title,
    required String body,
    String? payload,
    int id = 0,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'hydration_channel',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ',
      channelDescription: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—Ç—å –≤–æ–¥—É',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      enableLights: true,
      icon: '@mipmap/ic_launcher',
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    await _notifications.show(id, title, body, details, payload: payload);
  }
  
  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
  }) async {
    // –î–ª—è Flutter Local Notifications –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    // timezone –ø–∞–∫–µ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–π–º–µ—Ä
    final delay = scheduledDate.difference(DateTime.now());
    
    if (delay.isNegative) return;
    
    Timer(delay, () {
      showNotification(
        id: id,
        title: title,
        body: body,
        payload: payload,
      );
    });
  }
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  static void _startPeriodicReminders() {
    _reminderTimer?.cancel();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    _reminderTimer = Timer.periodic(const Duration(hours: 1), (timer) async {
      final prefs = await SharedPreferences.getInstance();
      final remindersEnabled = prefs.getBool('remindersEnabled') ?? true;
      
      if (!remindersEnabled) return;
      
      final now = DateTime.now();
      final hour = now.hour;
      
      // –ù–µ –±–µ—Å–ø–æ–∫–æ–∏–º –Ω–æ—á—å—é (—Å 22:00 –¥–æ 7:00)
      if (hour < 7 || hour >= 22) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      final waterProgress = prefs.getDouble('waterProgress') ?? 0;
      final expectedProgress = (hour - 7) / 15 * 100; // –û—Ç 7:00 –¥–æ 22:00
      
      if (waterProgress < expectedProgress - 20) {
        await showNotification(
          id: hour,
          title: 'üíß –ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!',
          body: '–í—ã –≤—ã–ø–∏–ª–∏ —Ç–æ–ª—å–∫–æ ${waterProgress.toInt()}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã',
          payload: 'water_reminder',
        );
      }
    });
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ñ–µ
  static Future<void> schedulePostCoffeeReminder() async {
    await Future.delayed(const Duration(minutes: 20));
    
    await showNotification(
      id: 100,
      title: '‚òï –ü–æ—Å–ª–µ –∫–æ—Ñ–µ',
      body: '–í—ã–ø–µ–π—Ç–µ 250-300 –º–ª –≤–æ–¥—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞',
      payload: 'post_coffee',
    );
  }
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∂–∞—Ä–µ
  static Future<void> showHeatWarning(double heatIndex) async {
    if (heatIndex < 32) return;
    
    String message = '';
    if (heatIndex < 39) {
      message = '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –Ω–∞ 8%';
    } else {
      message = '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ü–µ–π—Ç–µ –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç';
    }
    
    await showNotification(
      id: 200,
      title: 'üå°Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∂–∞—Ä–µ',
      body: message,
      payload: 'heat_warning',
    );
  }
  
  // –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç
  static Future<void> scheduleEveningReport() async {
    final now = DateTime.now();
    final evening = DateTime(now.year, now.month, now.day, 21, 0);
    
    if (now.isAfter(evening)) return;
    
    await scheduleNotification(
      id: 300,
      title: 'üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
      body: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      scheduledDate: evening,
      payload: 'evening_report',
    );
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> cancelAll() async {
    await _notifications.cancelAll();
    _reminderTimer?.cancel();
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static Future<void> cancel(int id) async {
    await _notifications.cancel(id);
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  static Future<ReminderSettings> getSettings() async {
    final prefs = await SharedPreferences.getInstance();
    
    return ReminderSettings(
      enabled: prefs.getBool('remindersEnabled') ?? true,
      frequency: prefs.getInt('reminderFrequency') ?? 4, // —Ä–∞–∑ –≤ –¥–µ–Ω—å
      morningTime: prefs.getString('morningTime') ?? '07:00',
      eveningTime: prefs.getString('eveningTime') ?? '22:00',
      postCoffee: prefs.getBool('postCoffeeReminder') ?? true,
      heatWarnings: prefs.getBool('heatWarnings') ?? true,
    );
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static Future<void> saveSettings(ReminderSettings settings) async {
    final prefs = await SharedPreferences.getInstance();
    
    await prefs.setBool('remindersEnabled', settings.enabled);
    await prefs.setInt('reminderFrequency', settings.frequency);
    await prefs.setString('morningTime', settings.morningTime);
    await prefs.setString('eveningTime', settings.eveningTime);
    await prefs.setBool('postCoffeeReminder', settings.postCoffee);
    await prefs.setBool('heatWarnings', settings.heatWarnings);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (settings.enabled) {
      _startPeriodicReminders();
    } else {
      _reminderTimer?.cancel();
    }
  }
}

class ReminderSettings {
  final bool enabled;
  final int frequency;
  final String morningTime;
  final String eveningTime;
  final bool postCoffee;
  final bool heatWarnings;
  
  ReminderSettings({
    required this.enabled,
    required this.frequency,
    required this.morningTime,
    required this.eveningTime,
    required this.postCoffee,
    required this.heatWarnings,
  });
}