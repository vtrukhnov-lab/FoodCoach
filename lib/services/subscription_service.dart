import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'analytics_service.dart';
import 'appsflyer_service.dart';

/*
üß™ –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–ö–£–ü–û–ö –í GOOGLE PLAY CONSOLE:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Play Console ‚Üí –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí Testing ‚Üí Closed testing
2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –¥–æ—Ä–æ–∂–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Internal Testing")
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–µ—Ä–æ–≤:
   - test@playcus.com
   - vtrukhnov.lab@gmail.com
   - qa@playcus.com
   - –∏ –¥—Ä—É–≥–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ _testAccounts

4. –í —Ä–∞–∑–¥–µ–ª–µ "Monetization" ‚Üí "Products" ‚Üí "In-app products":
   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
   - –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ

5. –í Release Management ‚Üí Test tracks ‚Üí Internal Testing:
   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ APK/AAB —Å —ç—Ç–∏–º –∫–æ–¥–æ–º
   - –¢–µ—Å—Ç–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: –ø–æ–∫—É–ø–∫–∏ –ë–ï–°–ü–õ–ê–¢–ù–û (–Ω–æ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è)
- –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ü–õ–ê–¢–ù–´–ï –ø–æ–∫—É–ø–∫–∏
- –í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤ Firebase/AppsFlyer
*/

class SubscriptionProduct {
  const SubscriptionProduct({
    required this.identifier,
    required this.title,
    required this.description,
    required this.priceText,
    required this.billingPeriod,
  });

  final String identifier;
  final String title;
  final String description;
  final String priceText;
  final Duration billingPeriod;
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ RevenueCat
class StoreProduct {
  final String identifier;
  final String title;
  final String description;
  final double price;
  final String priceString;
  
  StoreProduct({
    required this.identifier,
    required this.title,
    required this.description,
    required this.price,
    required this.priceString,
  });
}

class SubscriptionService {
  static SubscriptionService? _instance;
  static SubscriptionService get instance => _instance ??= SubscriptionService._();

  SubscriptionService._();

  static const _isProKey = 'is_pro';
  static const _proExpiresAtKey = 'pro_expires_at';

  // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Google Play –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static const List<String> _testAccounts = [
    'test@playcus.com',
    'tester1@playcus.com',
    'tester2@playcus.com',
    'qa@playcus.com',
    'beta@playcus.com',
    'vtrukhnov.lab@gmail.com', // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å—é–¥–∞
  ];

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
  static final List<String> _runtimeTestAccounts = [];

  final AnalyticsService _analytics = AnalyticsService();
  final AppsFlyerService _appsFlyer = AppsFlyerService();

  static const List<SubscriptionProduct> _defaultProducts = [
    SubscriptionProduct(
      identifier: 'hydracoach_pro_yearly',
      title: 'HydraCoach PRO ‚Äî –ì–æ–¥–æ–≤–∞—è',
      description: '–í—Å–µ PRO —Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã',
      priceText: '2 290 ‚ÇΩ / –≥–æ–¥',
      billingPeriod: Duration(days: 365),
    ),
    SubscriptionProduct(
      identifier: 'hydracoach_pro_monthly',
      title: 'HydraCoach PRO ‚Äî –ú–µ—Å—è—á–Ω–∞—è',
      description: '–ì–∏–±–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ PRO —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å –ø–æ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π',
      priceText: '249 ‚ÇΩ / –º–µ—Å—è—Ü',
      billingPeriod: Duration(days: 30),
    ),
  ];

  bool _isInitialized = false;
  bool _isPro = false;

  bool get isPro => _isPro;
  bool get isInitialized => _isInitialized;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–º
  bool _isTestAccount() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Firebase Auth, Google Sign-In, –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º debug —Ä–µ–∂–∏–º –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É email
    if (kDebugMode) {
      // –í debug —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      return true;
    }

    // TODO: –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // final userEmail = getCurrentUserEmail();
    // return _testAccounts.contains(userEmail) || _runtimeTestAccounts.contains(userEmail);

    return false;
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è debug)
  static void addTestAccount(String email) {
    if (kDebugMode && !_runtimeTestAccounts.contains(email)) {
      _runtimeTestAccounts.add(email);
      print('üß™ Added test account: $email');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  static List<String> getTestAccounts() {
    return [..._testAccounts, ..._runtimeTestAccounts];
  }

  /// "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" –ø–æ–¥–ø–∏—Å–∫–∏: –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
  Future<void> initialize() async {
    if (_isInitialized) return;

    await _restoreFromStorage();

    _isInitialized = true;

    if (kDebugMode) {
      print('‚úÖ SubscriptionService initialized (mock)');
      print('üîí PRO status: $_isPro');
    }
  }

  Future<void> _restoreFromStorage() async {
    final prefs = await SharedPreferences.getInstance();
    final storedIsPro = prefs.getBool(_isProKey) ?? false;
    final expiryIso = prefs.getString(_proExpiresAtKey);
    DateTime? expiry;

    if (expiryIso != null) {
      expiry = DateTime.tryParse(expiryIso);
    }

    if (storedIsPro && expiry != null) {
      if (DateTime.now().isBefore(expiry)) {
        _isPro = true;
        return;
      }

      // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî —á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥–∏
      await prefs.remove(_isProKey);
      await prefs.remove(_proExpiresAtKey);
    }

    _isPro = storedIsPro && expiry == null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
  Future<List<SubscriptionProduct>> getAvailableProducts() async {
    return List.unmodifiable(_defaultProducts);
  }

  /// –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<bool> purchaseSubscription(String productId) async {
    final product = _defaultProducts.firstWhere(
      (item) => item.identifier == productId,
      orElse: () => throw Exception('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'),
    );

    final isTestUser = _isTestAccount();

    if (isTestUser) {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è PRO
      await _activatePro(product.billingPeriod);

      if (kDebugMode) {
        print('üß™ TEST USER: –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ');
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
      // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π
      // –ù–∞–ø—Ä–∏–º–µ—Ä, RevenueCat, Google Play Billing, etc.

      if (kDebugMode) {
        // –í debug —Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await _activatePro(product.billingPeriod);
        print('üí∞ REAL USER: –ü–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–º–æ–∫-—Ä–µ–∂–∏–º)');
      } else {
        // –í —Ä–µ–ª–∏–∑–µ - –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        if (kDebugMode) {
          print('‚ùå REAL USER: –ü–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Ä–µ–ª–∏–∑–µ');
        }
        return false;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ priceText –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    final priceMatch = RegExp(r'(\d[\d\s]*\d|\d+)').firstMatch(product.priceText);
    final price = priceMatch != null
        ? double.tryParse(priceMatch.group(1)!.replaceAll(' ', '')) ?? 0.0
        : 0.0;
    final currency = product.priceText.contains('‚ÇΩ') ? 'RUB' : 'USD';

    // –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ —Ç–∏–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await _analytics.logSubscriptionStarted(
      product: product.identifier,
      isTrial: isTestUser, // –ü–æ–º–µ—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ trial
      price: isTestUser ? 0.0 : price, // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö - —Ü–µ–Ω–∞ 0
      currency: currency,
    );

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if (isTestUser) {
      if (kDebugMode) {
        print('üìä Analytics: Test purchase logged (price: 0)');
      }
    } else {
      if (kDebugMode) {
        print('üìä Analytics: Real purchase logged (price: $price $currency)');
      }
    }

    // –í–ê–ñ–ù–û: Purchase Connector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–∫—É–ø–æ–∫
    // –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å _validatePurchaseWithAppsFlyer, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    // await _validatePurchaseWithAppsFlyer(product);

    if (kDebugMode) {
      print('üí∞ Purchase Connector –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç—É –ø–æ–∫—É–ø–∫—É');
    }

    if (kDebugMode) {
      print('‚úÖ Mock purchase completed for ${product.identifier}');
    }

    return _isPro;
  }

  /// –ó–∞–≥–ª—É—à–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
  Future<bool> restorePurchases() async {
    await _restoreFromStorage();

    if (kDebugMode) {
      print('üîÑ Mock restore completed. PRO: $_isPro');
    }

    return _isPro;
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> _activatePro(Duration billingPeriod) async {
    _isPro = true;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isProKey, true);
    final expiryDate = DateTime.now().add(billingPeriod);
    await prefs.setString(_proExpiresAtKey, expiryDate.toIso8601String());
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PRO —Ñ—É–Ω–∫—Ü–∏–∏
  bool hasProAccess() {
    return _isPro;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  bool hasFeatureAccess(String featureName) {
    const freeFeatures = {
      'basic_tracking',
      'weather_integration',
      'simple_reminders',
      'daily_report',
      'basic_history',
      'alcohol_log',
      'alcohol_harm_reduction',
      'alcohol_morning_checkin',
    };

    if (freeFeatures.contains(featureName)) {
      return true;
    }

    return _isPro;
  }

  Map<String, dynamic> getFreeLimitations() {
    return {
      'max_daily_reminders': 4,
      'history_days': 30,
      'export_available': false,
      'smart_reminders': false,
      'fasting_aware': false,
      'cloud_sync': false,
      'weekly_reports': false,
      'alcohol_pre_drink': false,
      'alcohol_recovery_plan': false,
      'alcohol_sober_calendar': false,
    };
  }

  Map<String, dynamic> getProFeatures() {
    return {
      'unlimited_reminders': true,
      'unlimited_history': true,
      'csv_export': true,
      'smart_reminders': true,
      'fasting_aware_mode': true,
      'cloud_sync': true,
      'weekly_reports': true,
      'contextual_reminders': true,
      'heat_protocols': true,
      'multi_device': true,
      'alcohol_pre_drink_protocol': true,
      'alcohol_recovery_plan': true,
      'alcohol_sober_calendar': true,
      'alcohol_extended_checkin': true,
    };
  }

  /// –ú–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è customer info (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
  Future<Map<String, dynamic>> getCustomerInfo() async {
    final prefs = await SharedPreferences.getInstance();
    final expiryIso = prefs.getString(_proExpiresAtKey);

    return {
      'isPro': _isPro,
      'expiresAt': expiryIso,
    };
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ PRO —Å—Ç–∞—Ç—É—Å–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
  Future<void> resetSubscription() async {
    _isPro = false;
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_isProKey);
    await prefs.remove(_proExpiresAtKey);
  }

  /// –ú–æ–∫-–ø–æ–∫—É–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≥–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  Future<void> mockPurchase() async {
    await purchaseSubscription(_defaultProducts.first.identifier);
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ AppsFlyer SDK Connector
  Future<void> _validatePurchaseWithAppsFlyer(SubscriptionProduct product) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ priceText (–ø–∞—Ä—Å–∏–º "2 290 ‚ÇΩ / –≥–æ–¥" -> 2290.0)
      final priceMatch = RegExp(r'(\d[\d\s]*\d|\d+)').firstMatch(product.priceText);
      final price = priceMatch != null
          ? double.tryParse(priceMatch.group(1)!.replaceAll(' ', '')) ?? 0.0
          : 0.0;

      final currency = product.priceText.contains('‚ÇΩ') ? 'RUB' : 'USD';

      if (kDebugMode) {
        print('üí∞ AppsFlyer IAP Validation for ${product.identifier}');
        print('   Price: $price $currency');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤ AppsFlyer
      await _appsFlyer.logPurchase(
        product: product.identifier,
        revenue: price,
        currency: currency,
        orderId: 'mock_order_${DateTime.now().millisecondsSinceEpoch}',
        additionalParams: {
          'billing_period': product.billingPeriod.inDays.toString(),
          'product_title': product.title,
          'purchase_source': 'mock',
        },
      );

      // TODO: –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IAP, –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é:
      //
      // Android:
      // await _appsFlyer.validateAndLogAndroidPurchase(
      //   productId: product.identifier,
      //   purchaseToken: realPurchaseToken,
      //   price: price,
      //   currency: currency,
      // );
      //
      // iOS:
      // await _appsFlyer.validateAndLogIOSPurchase(
      //   productId: product.identifier,
      //   transactionId: realTransactionId,
      //   price: price,
      //   currency: currency,
      // );

    } catch (error) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ AppsFlyer: $error');
      }
    }
  }
}

class SubscriptionProvider extends ChangeNotifier {
  final SubscriptionService _subscriptionService = SubscriptionService.instance;

  bool get isPro => _subscriptionService.isPro;
  bool get isInitialized => _subscriptionService.isInitialized;

  List<SubscriptionProduct> _availableProducts = const [];
  List<SubscriptionProduct> get availableProducts => _availableProducts;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  Future<void> initialize() async {
    _isLoading = true;

    await _subscriptionService.initialize();
    await loadProducts();

    _isLoading = false;

    await Future.microtask(notifyListeners);
  }

  Future<void> loadProducts() async {
    try {
      _availableProducts = await _subscriptionService.getAvailableProducts();
      if (!_isLoading) {
        notifyListeners();
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      }
    }
  }

  Future<bool> purchaseSubscription(String productId) async {
    _isLoading = true;
    notifyListeners();

    final success = await _subscriptionService.purchaseSubscription(productId);

    _isLoading = false;
    notifyListeners();

    return success;
  }

  Future<bool> restorePurchases() async {
    _isLoading = true;
    notifyListeners();

    final success = await _subscriptionService.restorePurchases();

    _isLoading = false;
    notifyListeners();

    return success;
  }

  Future<void> mockPurchase() async {
    _isLoading = true;
    notifyListeners();

    await _subscriptionService.mockPurchase();

    _isLoading = false;
    notifyListeners();

    if (kDebugMode) {
      print('‚úÖ Mock purchase completed - PRO activated');
    }
  }

  bool hasFeatureAccess(String featureName) {
    return _subscriptionService.hasFeatureAccess(featureName);
  }

  Map<String, dynamic> getFreeLimitations() {
    return _subscriptionService.getFreeLimitations();
  }

  Map<String, dynamic> getProFeatures() {
    return _subscriptionService.getProFeatures();
  }
}
