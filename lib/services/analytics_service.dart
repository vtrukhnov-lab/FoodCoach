// lib/services/analytics_service.dart

import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π Firebase
/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
class AnalyticsService {
  static final AnalyticsService _instance = AnalyticsService._internal();
  factory AnalyticsService() => _instance;
  AnalyticsService._internal();

  final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;
  
  /// –ü–æ–ª—É—á–∏—Ç—å observer –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
  FirebaseAnalyticsObserver get observer => 
      FirebaseAnalyticsObserver(analytics: _analytics);

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (kDebugMode) {
      print('üìä Analytics Service initialized');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await setDefaultUserProperties();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> setDefaultUserProperties() async {
    try {
      // –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await _analytics.setUserId(id: null); // –ü–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error setting user properties: $e');
      }
    }
  }

  // ==================== USER PROPERTIES ====================
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –¥–∏–µ—Ç—ã
  Future<void> setDietMode(String mode) async {
    await _analytics.setUserProperty(name: 'diet_mode', value: mode);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> setProStatus(bool isPro) async {
    await _analytics.setUserProperty(name: 'is_pro', value: isPro.toString());
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> setNotificationStatus(bool enabled) async {
    await _analytics.setUserProperty(name: 'notifications_enabled', value: enabled.toString());
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> setUserCountry(String countryCode) async {
    await _analytics.setUserProperty(name: 'country', value: countryCode);
  }

  // ==================== SCREEN VIEW EVENTS ====================
  
  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  Future<void> logScreenView({
    required String screenName,
    String? screenClass,
  }) async {
    await _analytics.logScreenView(
      screenName: screenName,
      screenClass: screenClass ?? screenName,
    );
    
    if (kDebugMode) {
      print('üìä Screen view: $screenName');
    }
  }

  /// –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  Future<void> logEvent({
    required String name,
    Map<String, dynamic>? parameters,
  }) async {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è Firebase
    final Map<String, Object>? firebaseParams = parameters?.map(
      (key, value) => MapEntry(key, value as Object),
    );
    
    await _analytics.logEvent(
      name: name,
      parameters: firebaseParams,
    );
    
    if (kDebugMode) {
      print('üìä Event: $name');
      if (parameters != null) {
        print('   Parameters: $parameters');
      }
    }
  }

  // ==================== NOTIFICATION EVENTS ====================
  
  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
  Future<void> logNotificationScheduled({
    required String type,
    required DateTime scheduledTime,
    int? delayMinutes,
  }) async {
    await _analytics.logEvent(
      name: 'notification_scheduled',
      parameters: {
        'notification_type': type,
        'scheduled_hour': scheduledTime.hour,
        'delay_minutes': delayMinutes ?? 0,
        'day_of_week': scheduledTime.weekday,
      },
    );
    
    if (kDebugMode) {
      print('üìä Event: notification_scheduled - $type at ${scheduledTime.hour}:${scheduledTime.minute}');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
  Future<void> logNotificationSent({
    required String type,
    bool isScheduled = false,
  }) async {
    await _analytics.logEvent(
      name: 'notification_sent',
      parameters: {
        'notification_type': type,
        'is_scheduled': isScheduled,
        'hour': DateTime.now().hour,
      },
    );
    
    if (kDebugMode) {
      print('üìä Event: notification_sent - $type');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
  Future<void> logNotificationOpened({
    required String type,
    String? action,
  }) async {
    await _analytics.logEvent(
      name: 'notification_opened',
      parameters: {
        'notification_type': type,
        'action': action ?? 'none',
      },
    );
  }

  /// –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> logNotificationError({
    required String type,
    required String error,
  }) async {
    await _analytics.logEvent(
      name: 'notification_error',
      parameters: {
        'notification_type': type,
        'error_message': error.substring(0, 100), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      },
    );
  }

  /// –î—É–±–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω
  Future<void> logNotificationDuplicate({
    required String type,
    required int count,
  }) async {
    await _analytics.logEvent(
      name: 'notification_duplicate',
      parameters: {
        'notification_type': type,
        'duplicate_count': count,
      },
    );
    
    if (kDebugMode) {
      print('‚ö†Ô∏è Duplicate notification detected: $type x$count');
    }
  }

  // ==================== CORE TRACKING EVENTS ====================
  
  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
  Future<void> logWaterIntake({
    required int amount,
    required String source,
  }) async {
    await _analytics.logEvent(
      name: 'water_logged',
      parameters: {
        'amount_ml': amount,
        'source': source, // 'quick', 'manual', 'preset'
        'hour': DateTime.now().hour,
      },
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤
  Future<void> logElectrolyteIntake({
    required String type,
    required int amount,
  }) async {
    await _analytics.logEvent(
      name: 'electrolyte_logged',
      parameters: {
        'type': type, // 'sodium', 'potassium', 'magnesium'
        'amount_mg': amount,
      },
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ
  Future<void> logCoffeeIntake({
    required int cups,
  }) async {
    await _analytics.logEvent(
      name: 'coffee_logged',
      parameters: {
        'cups': cups,
        'hour': DateTime.now().hour,
      },
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è
  Future<void> logAlcoholIntake({
    required double standardDrinks,
    required String type,
  }) async {
    await _analytics.logEvent(
      name: 'alcohol_logged',
      parameters: {
        'standard_drinks': standardDrinks,
        'type': type, // 'beer', 'wine', 'spirits', 'cocktail'
        'hour': DateTime.now().hour,
      },
    );
  }

  // ==================== GOAL & PROGRESS EVENTS ====================
  
  /// –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
  Future<void> logGoalReached({
    required String goalType,
    required double percentage,
  }) async {
    await _analytics.logEvent(
      name: 'daily_goal_reached',
      parameters: {
        'goal_type': goalType, // 'water', 'sodium', 'potassium', 'magnesium'
        'percentage': percentage.round(),
      },
    );
  }

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ HRI —Å—Ç–∞—Ç—É—Å–∞
  Future<void> logHRIStatusChange({
    required int fromValue,
    required int toValue,
    required String status,
  }) async {
    await _analytics.logEvent(
      name: 'hri_status_changed',
      parameters: {
        'from_value': fromValue,
        'to_value': toValue,
        'status': status, // 'green', 'yellow', 'red'
        'direction': toValue > fromValue ? 'worse' : 'better',
      },
    );
  }

  /// –°—Ç–∞—Ç—É—Å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
  Future<void> logHydrationStatus({
    required String status,
  }) async {
    await _analytics.logEvent(
      name: 'hydration_status',
      parameters: {
        'status': status, // 'normal', 'dehydrated', 'diluted', 'low_salt'
        'hour': DateTime.now().hour,
      },
    );
  }

  // ==================== SUBSCRIPTION EVENTS ====================
  
  /// –ü–æ–∫–∞–∑ paywall
  Future<void> logPaywallShown({
    required String source,
    String? variant,
  }) async {
    await _analytics.logEvent(
      name: 'paywall_shown',
      parameters: {
        'source': source, // 'onboarding', 'settings', 'feature_gate'
        'variant': variant ?? 'default',
      },
    );
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ paywall
  Future<void> logPaywallDismissed({
    required String source,
  }) async {
    await _analytics.logEvent(
      name: 'paywall_dismissed',
      parameters: {
        'source': source,
      },
    );
  }

  /// –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏
  Future<void> logSubscriptionStarted({
    required String product,
    required bool isTrial,
  }) async {
    await _analytics.logEvent(
      name: 'subscription_started',
      parameters: {
        'product': product, // 'monthly', 'annual', 'lifetime'
        'is_trial': isTrial,
      },
    );
  }

  /// PRO —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
  Future<void> logProFeatureGate({
    required String feature,
  }) async {
    await _analytics.logEvent(
      name: 'pro_feature_gate_hit',
      parameters: {
        'feature': feature, // 'smart_reminders', 'csv_export', etc
      },
    );
  }

  // ==================== ENGAGEMENT EVENTS ====================
  
  /// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
  Future<void> logReportViewed({
    required String type,
  }) async {
    await _analytics.logEvent(
      name: 'report_viewed',
      parameters: {
        'type': type, // 'daily', 'weekly'
      },
    );
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç CSV
  Future<void> logCSVExported() async {
    await _analytics.logEvent(
      name: 'csv_exported',
      parameters: {
        'date': DateTime.now().toIso8601String().split('T')[0],
      },
    );
  }

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> logSettingsChanged({
    required String setting,
    required dynamic value,
  }) async {
    await _analytics.logEvent(
      name: 'settings_changed',
      parameters: {
        'setting': setting,
        'value': value.toString(),
      },
    );
  }

  /// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–∏–µ—Ç—ã
  Future<void> logDietModeChanged({
    required String from,
    required String to,
  }) async {
    await _analytics.logEvent(
      name: 'diet_mode_changed',
      parameters: {
        'from': from,
        'to': to,
      },
    );
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º user property
    await setDietMode(to);
  }

  // ==================== ONBOARDING EVENTS ====================
  
  /// –ù–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingStart() async {
    await _analytics.logEvent(name: 'onboarding_start');
  }

  /// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingComplete() async {
    await _analytics.logEvent(name: 'onboarding_complete');
  }

  /// –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
  Future<void> logOnboardingSkip({
    required int step,
  }) async {
    await _analytics.logEvent(
      name: 'onboarding_skip',
      parameters: {
        'step': step,
      },
    );
  }

  // ==================== APP LIFECYCLE ====================
  
  /// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> logAppOpen() async {
    await _analytics.logEvent(name: 'app_open');
  }

  /// –°–µ—Å—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> logSession({
    required int durationSeconds,
  }) async {
    await _analytics.logEvent(
      name: 'session',
      parameters: {
        'duration_seconds': durationSeconds,
      },
    );
  }

  // ==================== DEBUG HELPERS ====================
  
  /// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  Future<void> logTestEvent() async {
    await _analytics.logEvent(
      name: 'test_event',
      parameters: {
        'timestamp': DateTime.now().toIso8601String(),
        'debug': kDebugMode,
      },
    );
    
    if (kDebugMode) {
      print('üìä Test event sent to Analytics');
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  Future<void> setAnalyticsCollectionEnabled(bool enabled) async {
    await _analytics.setAnalyticsCollectionEnabled(enabled);
  }
  
  // ==================== ACHIEVEMENT EVENTS ====================

  /// –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
  Future<void> logAchievementUnlocked({
    required String achievementId,
    required String achievementName,
    required String category,
    required int rewardPoints,
  }) async {
    await _analytics.logEvent(
      name: 'achievement_unlocked',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'category': category,
        'reward_points': rewardPoints,
      },
    );
    
    if (kDebugMode) {
      print('üìä Achievement unlocked: $achievementName');
    }
  }

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> logAchievementsScreenView() async {
    await _analytics.logScreenView(
      screenName: 'achievements',
      screenClass: 'AchievementsScreen',
    );
    
    if (kDebugMode) {
      print('üìä Achievements screen viewed');
    }
  }

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è achievements_screen.dart)
  Future<void> logAchievementViewed({
    required String achievementId,
    required String achievementName,
    required String category,
    required bool isUnlocked,
  }) async {
    await _analytics.logEvent(
      name: 'achievement_details_viewed',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'category': category,
        'is_unlocked': isUnlocked,
      },
    );
    
    if (kDebugMode) {
      print('üìä Achievement viewed: $achievementName');
    }
  }

  /// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  Future<void> logAchievementDetailsViewed({
    required String achievementId,
    required String achievementName,
    required bool isUnlocked,
  }) async {
    await _analytics.logEvent(
      name: 'achievement_details_viewed',
      parameters: {
        'achievement_id': achievementId,
        'achievement_name': achievementName,
        'is_unlocked': isUnlocked,
      },
    );
  }
} // –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∫–ª–∞—Å—Å–∞ AnalyticsService