import 'package:flutter/material.dart';
import 'package:usercentrics_sdk/usercentrics_sdk.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ConsentService {
  static const String _consentGivenKey = 'consent_given';
  static const String _hasShownBannerKey = 'has_shown_consent_banner';
  
  // Usercentrics Settings ID –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Ruleset ID –æ—Ç –ø–∞–±–ª–∏—à–µ—Ä–∞)
  static const String settingsId = 'UxKlz-EOgB16Ne';

  // Template IDs –æ—Ç –ø–∞–±–ª–∏—à–µ—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  static const String appsFlyerTemplateId = 'Gx9iMF__f';
  static const String firebaseTemplateId = '42vRvlulK96R-F';
  static const String appLovinTemplateId = 'fHczTMzX8';
  static const String googleAdsTemplateId = 'S1_9Vsuj-Q';
  
  bool _isInitialized = false;
  bool _hasConsent = false;
  
  // Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è
  Function(bool)? onConsentChanged;
  
  // Singleton –ø–∞—Ç—Ç–µ—Ä–Ω
  static final ConsentService _instance = ConsentService._internal();
  factory ConsentService() => _instance;
  ConsentService._internal();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –¥–∞–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ
  bool get hasConsent => _hasConsent;
  bool get isInitialized => _isInitialized;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Usercentrics
  Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      debugPrint('ConsentService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Usercentrics...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Usercentrics SDK
      Usercentrics.initialize(
        settingsId: settingsId,
        loggerLevel: UsercentricsLoggerLevel.debug,
        ruleSetId: settingsId, // —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º Ruleset ID
      );
      
      _isInitialized = true;
      
      debugPrint('ConsentService: Usercentrics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è
      await _checkCurrentConsent();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä
      final status = await Usercentrics.status;
      if (status.shouldCollectConsent) {
        debugPrint('ConsentService: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ');
        // –ë–∞–Ω–Ω–µ—Ä –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ UI
      } else {
        debugPrint('ConsentService: –°–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
      
    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ—Ç
      _hasConsent = false;
      _isInitialized = false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è AppsFlyer
  Future<void> _checkCurrentConsent() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π
      final status = await Usercentrics.status;
      
      // –ò—â–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è AppsFlyer –ø–æ Template ID
      final appsFlyerConsent = status.consents.firstWhere(
        (consent) => consent.templateId == appsFlyerTemplateId,
        orElse: () => UsercentricsServiceConsent(
          templateId: appsFlyerTemplateId,
          status: false,
          category: 'explicit',
          type: null,
          version: '',
          dataProcessor: '',
          isEssential: false,
          history: [],
        ),
      );
      
      _hasConsent = appsFlyerConsent.status;
      
      debugPrint('ConsentService: –°–æ–≥–ª–∞—Å–∏–µ AppsFlyer = $_hasConsent');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_consentGivenKey, _hasConsent);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è
      onConsentChanged?.call(_hasConsent);
      
    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è - $e');
      _hasConsent = false;
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä —Å–æ–≥–ª–∞—Å–∏—è
  Future<void> showConsentBanner(BuildContext context) async {
    if (!_isInitialized) {
      await initialize();
    }
    
    try {
      debugPrint('ConsentService: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å–æ–≥–ª–∞—Å–∏—è...');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ–π (–±–∞–Ω–Ω–µ—Ä) —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      final response = await Usercentrics.showFirstLayer(
        settings: const BannerSettings(
          firstLayer: FirstLayerStyleSettings(
            backgroundColor: Color(0xFFFFFFFF),
            cornerRadius: 20,
            overlayColor: Color(0x4D000000),
          ),
          general: GeneralStyleSettings(
            textColor: Color(0xFF000000),
          ),
        ),
      );
      
      debugPrint('ConsentService: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ${response?.userInteraction}');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response != null) {
        await _handleUserResponse(response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –±–∞–Ω–Ω–µ—Ä –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
        final prefs = await SharedPreferences.getInstance();
        await prefs.setBool(_hasShownBannerKey, true);
      }
      
    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞ - $e');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–≤—Ç–æ—Ä–æ–π —Å–ª–æ–π)
  Future<void> showPrivacySettings(BuildContext context) async {
    if (!_isInitialized) {
      await initialize();
    }
    
    try {
      debugPrint('ConsentService: –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å–ª–æ–π (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
      final response = await Usercentrics.showSecondLayer(
        settings: BannerSettings(
          secondLayer: SecondLayerStyleSettings(
            showCloseButton: true,
            buttonLayout: ButtonLayout.row(
              buttons: [
                const ButtonSettings(type: ButtonType.save),
                const ButtonSettings(type: ButtonType.acceptAll),
              ],
            ),
          ),
        ),
      );
      
      debugPrint('ConsentService: –û—Ç–≤–µ—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - ${response?.userInteraction}');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response != null) {
        await _handleUserResponse(response);
      }
      
    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - $e');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _handleUserResponse(UsercentricsConsentUserResponse response) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è
    await _checkCurrentConsent();
    
    debugPrint('ConsentService: Consents -> ${response.consents}');
    debugPrint('ConsentService: User Interaction -> ${response.userInteraction}');
    
    // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º
    _applyConsent(response.consents);
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º
  void _applyConsent(List<UsercentricsServiceConsent>? consents) {
    if (consents == null) return;
    
    for (final consent in consents) {
      debugPrint('ConsentService: Applying consent for ${consent.dataProcessor}: ${consent.status}');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö SDK
      if (consent.templateId == appsFlyerTemplateId) {
        _hasConsent = consent.status;
        onConsentChanged?.call(consent.status);
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<bool> shouldShowConsentBanner() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Usercentrics
      final status = await Usercentrics.status;
      debugPrint('ConsentService: shouldCollectConsent = ${status.shouldCollectConsent}');
      debugPrint('ConsentService: User location: ${status.location}');
      debugPrint('ConsentService: Consent template count: ${status.consents.length}');

      return status.shouldCollectConsent;

    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–∞–Ω–Ω–µ—Ä–∞ - $e');
      return false;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> forceShowConsentBanner(BuildContext context) async {
    try {
      debugPrint('ConsentService: üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ø–æ–∫–∞–∑ –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

      await resetConsent(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await initialize(); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
      final response = await Usercentrics.showFirstLayer(
        settings: const BannerSettings(
          firstLayer: FirstLayerStyleSettings(
            backgroundColor: Color(0xFFFFFFFF),
            cornerRadius: 20,
            overlayColor: Color(0x4D000000),
          ),
          general: GeneralStyleSettings(
            textColor: Color(0xFF000000),
          ),
        ),
      );

      if (response != null) {
        await _handleUserResponse(response);
      }

    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞: $e');
    }
  }
  
  // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetConsent() async {
    try {
      debugPrint('ConsentService: –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π...');
      
      // –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ SDK –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ reset(), 
      // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_consentGivenKey);
      await prefs.remove(_hasShownBannerKey);
      
      _hasConsent = false;
      
      // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK
      _isInitialized = false;
      
      debugPrint('ConsentService: –°–æ–≥–ª–∞—Å–∏—è —Å–±—Ä–æ—à–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–æ)');
      debugPrint('ConsentService: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      
    } catch (e) {
      debugPrint('ConsentService: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π - $e');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è –∏–∑ –∫–µ—à–∞ (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
  Future<bool> getCachedConsent() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool(_consentGivenKey) ?? false;
    } catch (e) {
      return false;
    }
  }
}