import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:geolocator/geolocator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

class WeatherService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API OpenWeatherMap
  static const String apiKey = 'YOUR_API_KEY'; // –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ openweathermap.org
  static const String baseUrl = 'https://api.openweathermap.org/data/2.5/weather';
  
  // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  static const bool useDemo = true;
  
  static Future<WeatherData?> getCurrentWeather() async {
    try {
      // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (useDemo) {
        return WeatherData(
          temperature: 28,
          humidity: 65,
          heatIndex: 32,
          description: '–Ø—Å–Ω–æ',
          city: '–ú–æ—Å–∫–≤–∞',
        );
      }
      
      // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫–ª—é—á)
      Position? position = await _getCurrentLocation();
      if (position == null) return null;
      
      final url = Uri.parse(
        '$baseUrl?lat=${position.latitude}&lon=${position.longitude}'
        '&appid=$apiKey&units=metric&lang=ru'
      );
      
      final response = await http.get(url);
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        final temp = data['main']['temp'].toDouble();
        final humidity = data['main']['humidity'].toDouble();
        final heatIndex = _calculateHeatIndex(temp, humidity);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        final prefs = await SharedPreferences.getInstance();
        await prefs.setDouble('lastTemp', temp);
        await prefs.setDouble('lastHumidity', humidity);
        await prefs.setDouble('lastHeatIndex', heatIndex);
        await prefs.setString('lastWeatherTime', DateTime.now().toIso8601String());
        
        return WeatherData(
          temperature: temp,
          humidity: humidity,
          heatIndex: heatIndex,
          description: data['weather'][0]['description'],
          city: data['name'],
        );
      }
    } catch (e) {
      print('Weather error: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return await _getCachedWeather();
    }
    
    return null;
  }
  
  static Future<Position?> _getCurrentLocation() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        return null;
      }
      
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          return null;
        }
      }
      
      if (permission == LocationPermission.deniedForever) {
        return null;
      }
      
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.low,
      );
    } catch (e) {
      print('Location error: $e');
      return null;
    }
  }
  
  static double _calculateHeatIndex(double tempC, double humidity) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã
    double tempF = tempC * 9/5 + 32;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Heat Index
    if (tempF < 80) {
      return tempC; // HI –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
    }
    
    double hi = -42.379 + 
      2.04901523 * tempF + 
      10.14333127 * humidity -
      0.22475541 * tempF * humidity -
      0.00683783 * tempF * tempF -
      0.05481717 * humidity * humidity +
      0.00122874 * tempF * tempF * humidity +
      0.00085282 * tempF * humidity * humidity -
      0.00000199 * tempF * tempF * humidity * humidity;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –¶–µ–ª—å—Å–∏–π
    return (hi - 32) * 5/9;
  }
  
  static Future<WeatherData?> _getCachedWeather() async {
    final prefs = await SharedPreferences.getInstance();
    
    final temp = prefs.getDouble('lastTemp');
    final humidity = prefs.getDouble('lastHumidity');
    final heatIndex = prefs.getDouble('lastHeatIndex');
    
    if (temp != null && humidity != null && heatIndex != null) {
      return WeatherData(
        temperature: temp,
        humidity: humidity,
        heatIndex: heatIndex,
        description: '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        city: '',
      );
    }
    
    return null;
  }
  
  // –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Heat Index
  static double getWaterAdjustment(double heatIndex) {
    if (heatIndex < 27) return 0;
    if (heatIndex < 32) return 0.05; // +5%
    if (heatIndex < 39) return 0.08; // +8%
    if (heatIndex < 45) return 0.12; // +12%
    return 0.15; // +15% –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∂–∞—Ä—ã
  }
  
  // –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–æ–ª–∏
  static int getSodiumAdjustment(double heatIndex, String activityLevel) {
    int baseAdjustment = 0;
    
    if (heatIndex >= 32) baseAdjustment = 500;
    if (heatIndex >= 39) baseAdjustment = 1000;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activityLevel == 'high') {
      baseAdjustment += 500;
    } else if (activityLevel == 'medium' && heatIndex >= 32) {
      baseAdjustment += 300;
    }
    
    return baseAdjustment;
  }
}

class WeatherData {
  final double temperature;
  final double humidity;
  final double heatIndex;
  final String description;
  final String city;
  
  WeatherData({
    required this.temperature,
    required this.humidity,
    required this.heatIndex,
    required this.description,
    required this.city,
  });
  
  String getHeatWarning() {
    if (heatIndex < 27) {
      return '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else if (heatIndex < 32) {
      return '‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else if (heatIndex < 39) {
      return 'üî• –ñ–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã';
    } else if (heatIndex < 45) {
      return 'üå°Ô∏è –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –†–∏—Å–∫ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è';
    } else {
      return '‚òÄÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è';
    }
  }
  
  Color getHeatColor() {
    if (heatIndex < 27) return const Color(0xFF4CAF50);
    if (heatIndex < 32) return const Color(0xFFFFC107);
    if (heatIndex < 39) return const Color(0xFFFF9800);
    if (heatIndex < 45) return const Color(0xFFFF5722);
    return const Color(0xFFF44336);
  }
}