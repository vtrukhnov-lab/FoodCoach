import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:geolocator/geolocator.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

class WeatherService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API OpenWeatherMap
  static const String apiKey = 'c460f153f615a343e0fe5158eae73121';
  static const String baseUrl = 'https://api.openweathermap.org/data/2.5/weather';
  
  // –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  static const bool useDemo = false;
  
  static Future<WeatherData?> getCurrentWeather() async {
    try {
      // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      if (useDemo) {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–µ–Ω–∏–¥–æ—Ä–º–∞ (—Ç–∏–ø–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞)
        final now = DateTime.now();
        final hour = now.hour;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        double temp = 22.0;
        if (hour >= 6 && hour < 10) {
          temp = 18 + (hour - 6);
        } else if (hour >= 10 && hour < 14) {
          temp = 22 + (hour - 10) * 1.5;
        } else if (hour >= 14 && hour < 18) {
          temp = 28 - (hour - 14) * 0.5;
        } else if (hour >= 18 && hour < 22) {
          temp = 26 - (hour - 18) * 1.5;
        } else {
          temp = 20;
        }
        
        final humidity = 60.0 + (hour < 12 ? 10 : -5);
        final heatIndex = _calculateHeatIndex(temp, humidity);
        
        return WeatherData(
          temperature: temp,
          humidity: humidity,
          heatIndex: heatIndex,
          description: hour >= 6 && hour <= 20 ? '–°–æ–ª–Ω–µ—á–Ω–æ' : '–Ø—Å–Ω–æ',
          city: '–ë–µ–Ω–∏–¥–æ—Ä–º',
        );
      }
      
      // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
      Position? position = await _getCurrentLocation();
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (position == null) {
        print('Could not get location - check permissions');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        return WeatherData(
          temperature: 22,
          humidity: 60,
          heatIndex: 24,
          description: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
          city: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞',
        );
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      double lat = position.latitude;
      double lon = position.longitude;
      
      print('Got location: $lat, $lon');
      
      final url = Uri.parse(
        '$baseUrl?lat=$lat&lon=$lon'
        '&appid=$apiKey&units=metric&lang=ru'
      );
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 10),
        onTimeout: () => throw Exception('Timeout'),
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        final temp = data['main']['temp'].toDouble();
        final humidity = data['main']['humidity'].toDouble();
        final heatIndex = _calculateHeatIndex(temp, humidity);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        final prefs = await SharedPreferences.getInstance();
        await prefs.setDouble('lastTemp', temp);
        await prefs.setDouble('lastHumidity', humidity);
        await prefs.setDouble('lastHeatIndex', heatIndex);
        await prefs.setString('lastCity', data['name']);
        await prefs.setString('lastWeatherTime', DateTime.now().toIso8601String());
        
        return WeatherData(
          temperature: temp,
          humidity: humidity,
          heatIndex: heatIndex,
          description: data['weather'][0]['description'],
          city: data['name'],
        );
      }
    } catch (e) {
      print('Weather error: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ–º–æ –¥–ª—è –ë–µ–Ω–∏–¥–æ—Ä–º–∞
      final cached = await _getCachedWeather();
      if (cached != null) return cached;
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø–∏—á–Ω—É—é –ø–æ–≥–æ–¥—É –ë–µ–Ω–∏–¥–æ—Ä–º–∞
      return WeatherData(
        temperature: 24,
        humidity: 65,
        heatIndex: 26,
        description: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        city: '–ë–µ–Ω–∏–¥–æ—Ä–º',
      );
    }
    
    return null;
  }
  
  static Future<Position?> _getCurrentLocation() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('Location services disabled - asking user to enable');
        // –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        await Geolocator.openLocationSettings();
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        print('Requesting location permission from user...');
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print('User denied location permission');
          return null;
        }
      }
      
      if (permission == LocationPermission.deniedForever) {
        print('Location permission permanently denied - opening settings');
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        await Geolocator.openAppSettings();
        return null;
      }
      
      print('Getting current position...');
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.medium, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ medium –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏/—Ç–æ—á–Ω–æ—Å—Ç–∏
        timeLimit: const Duration(seconds: 10),
      );
      
      print('Successfully got position: ${position.latitude}, ${position.longitude}');
      return position;
    } catch (e) {
      print('Location error: $e');
      return null;
    }
  }
  
  static double _calculateHeatIndex(double tempC, double humidity) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã
    double tempF = tempC * 9/5 + 32;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Heat Index
    if (tempF < 80) {
      return tempC; // HI –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
    }
    
    double hi = -42.379 + 
      2.04901523 * tempF + 
      10.14333127 * humidity -
      0.22475541 * tempF * humidity -
      0.00683783 * tempF * tempF -
      0.05481717 * humidity * humidity +
      0.00122874 * tempF * tempF * humidity +
      0.00085282 * tempF * humidity * humidity -
      0.00000199 * tempF * tempF * humidity * humidity;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –¶–µ–ª—å—Å–∏–π
    return (hi - 32) * 5/9;
  }
  
  static Future<WeatherData?> _getCachedWeather() async {
    final prefs = await SharedPreferences.getInstance();
    
    final temp = prefs.getDouble('lastTemp');
    final humidity = prefs.getDouble('lastHumidity');
    final heatIndex = prefs.getDouble('lastHeatIndex');
    final city = prefs.getString('lastCity') ?? '–ö—ç—à';
    
    if (temp != null && humidity != null && heatIndex != null) {
      return WeatherData(
        temperature: temp,
        humidity: humidity,
        heatIndex: heatIndex,
        description: '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        city: city,
      );
    }
    
    return null;
  }
  
  // –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ Heat Index
  static double getWaterAdjustment(double heatIndex) {
    if (heatIndex < 27) return 0;
    if (heatIndex < 32) return 0.05; // +5%
    if (heatIndex < 39) return 0.08; // +8%
    if (heatIndex < 45) return 0.12; // +12%
    return 0.15; // +15% –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∂–∞—Ä—ã
  }
  
  // –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–æ–ª–∏
  static int getSodiumAdjustment(double heatIndex, String activityLevel) {
    int baseAdjustment = 0;
    
    if (heatIndex >= 32) baseAdjustment = 500;
    if (heatIndex >= 39) baseAdjustment = 1000;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activityLevel == 'high') {
      baseAdjustment += 500;
    } else if (activityLevel == 'medium' && heatIndex >= 32) {
      baseAdjustment += 300;
    }
    
    return baseAdjustment;
  }
}

class WeatherData {
  final double temperature;
  final double humidity;
  final double heatIndex;
  final String description;
  final String city;
  
  WeatherData({
    required this.temperature,
    required this.humidity,
    required this.heatIndex,
    required this.description,
    required this.city,
  });
  
  String getHeatWarning() {
    if (heatIndex < 27) {
      return '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else if (heatIndex < 32) {
      return '‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞';
    } else if (heatIndex < 39) {
      return 'üî• –ñ–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã';
    } else if (heatIndex < 45) {
      return 'üå°Ô∏è –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –†–∏—Å–∫ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è';
    } else {
      return '‚òÄÔ∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è';
    }
  }
  
  Color getHeatColor() {
    if (heatIndex < 27) return const Color(0xFF4CAF50);
    if (heatIndex < 32) return const Color(0xFFFFC107);
    if (heatIndex < 39) return const Color(0xFFFF9800);
    if (heatIndex < 45) return const Color(0xFFFF5722);
    return const Color(0xFFF44336);
  }
}