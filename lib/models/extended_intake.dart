import 'package:flutter/material.dart';
import '../constants/drink_database.dart';
import '../constants/supplements_database.dart';
import '../l10n/app_localizations.dart';

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–µ–º–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 50+ —Ç–∏–ø–æ–≤ –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –¥–æ–±–∞–≤–æ–∫
class ExtendedIntake {
  final String id;
  final DateTime timestamp;
  final String drinkId; // ID –∏–∑ DrinkDatabase
  final double volumeMl;
  final List<String> supplementIds; // IDs –∏–∑ SupplementDatabase
  final double? customServingMultiplier; // –î–ª—è –¥–æ–±–∞–≤–æ–∫ (–µ—Å–ª–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è)
  final bool hasIce;
  final String? notes;
  
  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  late final double totalSodiumMg;
  late final double totalPotassiumMg;
  late final double totalMagnesiumMg;
  late final double effectiveHydrationMl;
  late final double? totalCaffeineMg;
  late final double? alcoholGrams;
  
  ExtendedIntake({
    String? id,
    required this.timestamp,
    required this.drinkId,
    required this.volumeMl,
    this.supplementIds = const [],
    this.customServingMultiplier,
    this.hasIce = false,
    this.notes,
  }) : id = id ?? DateTime.now().millisecondsSinceEpoch.toString() {
    _calculateNutrients();
  }
  
  /// –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏ –¥–æ–±–∞–≤–æ–∫
  void _calculateNutrients() {
    final drink = DrinkDatabase.findById(drinkId);
    if (drink == null) {
      // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
      totalSodiumMg = 0;
      totalPotassiumMg = 0;
      totalMagnesiumMg = 0;
      effectiveHydrationMl = volumeMl;
      totalCaffeineMg = null;
      alcoholGrams = null;
      return;
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –Ω–∞–ø–∏—Ç–∫–∞ (–ø–µ—Ä–µ—Å—á–µ—Ç –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º)
    final volumeRatio = volumeMl / 100;
    totalSodiumMg = drink.sodiumPer100ml * volumeRatio;
    totalPotassiumMg = drink.potassiumPer100ml * volumeRatio;
    totalMagnesiumMg = drink.magnesiumPer100ml * volumeRatio;
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    effectiveHydrationMl = volumeMl * drink.hydrationCoefficient;
    
    // –ö–æ—Ñ–µ–∏–Ω
    totalCaffeineMg = drink.caffeineMgPer100ml != null 
        ? drink.caffeineMgPer100ml! * volumeRatio 
        : null;
    
    // –ê–ª–∫–æ–≥–æ–ª—å
    if (drink.alcoholPercentage != null) {
      const double alcoholDensity = 0.789; // –≥/–º–ª
      double pureAlcoholMl = volumeMl * (drink.alcoholPercentage! / 100);
      alcoholGrams = pureAlcoholMl * alcoholDensity;
    } else {
      alcoholGrams = null;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –æ—Ç –¥–æ–±–∞–≤–æ–∫
    for (String supplementId in supplementIds) {
      final supplement = SupplementDatabase.findById(supplementId);
      if (supplement != null) {
        final servingMultiplier = customServingMultiplier ?? 1.0;
        
        if (supplement.sodiumMg != null) {
          totalSodiumMg += supplement.sodiumMg! * servingMultiplier;
        }
        if (supplement.potassiumMg != null) {
          totalPotassiumMg += supplement.potassiumMg! * servingMultiplier;
        }
        if (supplement.magnesiumMg != null) {
          totalMagnesiumMg += supplement.magnesiumMg! * servingMultiplier;
        }
      }
    }
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ª–µ–¥ (—É–º–µ–Ω—å—à–∞–µ—Ç –æ–±—ä–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∞ ~15%)
    if (hasIce) {
      effectiveHydrationMl *= 0.85;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥—Ä–∏–Ω–∫–∏ (–¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è)
  double get standardDrinks {
    if (alcoholGrams == null) return 0;
    const double standardDrinkGrams = 10.0; // –ò–∑ –¢–ó
    return alcoholGrams! / standardDrinkGrams;
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤–æ–¥—ã –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è
  double getAlcoholWaterCorrection() {
    if (alcoholGrams == null) return 0;
    const double waterBonusPerSD = 150.0; // –ò–∑ Remote Config
    return standardDrinks * waterBonusPerSD;
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –Ω–∞—Ç—Ä–∏—è –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è
  double getAlcoholSodiumCorrection() {
    if (alcoholGrams == null) return 0;
    const double sodiumPerSD = 200.0; // –ò–∑ Remote Config
    return standardDrinks * sodiumPerSD;
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä HRI
  double getHRIModifier() {
    double modifier = 0;
    
    // –ê–ª–∫–æ–≥–æ–ª—å
    if (alcoholGrams != null) {
      const double hriPerSD = 3.0;
      const double hriCap = 15.0;
      modifier += (standardDrinks * hriPerSD).clamp(0, hriCap);
    }
    
    // –ö–æ—Ñ–µ–∏–Ω
    if (totalCaffeineMg != null && totalCaffeineMg! > 0) {
      // –ö–∞–∂–¥—ã–µ 100–º–≥ –∫–æ—Ñ–µ–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è—é—Ç 2 –∫ HRI
      modifier += (totalCaffeineMg! / 100) * 2;
    }
    
    return modifier;
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
  String getDrinkName(BuildContext context) {
    final drink = DrinkDatabase.findById(drinkId);
    if (drink == null) return drinkId;
    
    // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É drink.nameKey
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
    return drinkId.replaceAll('_', ' ').toUpperCase();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–±–∞–≤–æ–∫
  List<String> getSupplementNames(BuildContext context) {
    List<String> names = [];
    for (String supplementId in supplementIds) {
      final supplement = SupplementDatabase.findById(supplementId);
      if (supplement != null) {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É supplement.nameKey
        names.add(supplementId.replaceAll('_', ' '));
      }
    }
    return names;
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –Ω–∞–ø–∏—Ç–∫–∞
  String get drinkEmoji {
    final drink = DrinkDatabase.findById(drinkId);
    return drink?.emoji ?? 'ü•§';
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º
  bool get isPremium {
    final drink = DrinkDatabase.findById(drinkId);
    if (drink?.isPremium == true) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–∫–∏
    for (String supplementId in supplementIds) {
      final supplement = SupplementDatabase.findById(supplementId);
      if (supplement?.isPremium == true) return true;
    }
    
    return false;
  }
  
  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  Map<String, dynamic> toJson() => {
    'id': id,
    'timestamp': timestamp.toIso8601String(),
    'drinkId': drinkId,
    'volumeMl': volumeMl,
    'supplementIds': supplementIds,
    'customServingMultiplier': customServingMultiplier,
    'hasIce': hasIce,
    'notes': notes,
  };
  
  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ JSON
  factory ExtendedIntake.fromJson(Map<String, dynamic> json) {
    return ExtendedIntake(
      id: json['id'],
      timestamp: DateTime.parse(json['timestamp']),
      drinkId: json['drinkId'],
      volumeMl: json['volumeMl'].toDouble(),
      supplementIds: List<String>.from(json['supplementIds'] ?? []),
      customServingMultiplier: json['customServingMultiplier']?.toDouble(),
      hasIce: json['hasIce'] ?? false,
      notes: json['notes'],
    );
  }
  
  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç Intake (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Map<String, dynamic> toLegacyIntake() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
    String legacyType = 'water';
    if (drinkId.contains('coffee')) {
      legacyType = 'coffee';
    } else if (drinkId.contains('electrolyte')) {
      legacyType = 'electrolyte';
    } else if (drinkId.contains('broth')) {
      legacyType = 'broth';
    } else if (alcoholGrams != null && alcoholGrams! > 0) {
      legacyType = 'alcohol';
    }
    
    return {
      'id': id,
      'timestamp': timestamp,
      'type': legacyType,
      'volume': effectiveHydrationMl.round(),
      'sodium': totalSodiumMg.round(),
      'potassium': totalPotassiumMg.round(),
      'magnesium': totalMagnesiumMg.round(),
    };
  }
  
  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  String get formattedTime {
    final hour = timestamp.hour.toString().padLeft(2, '0');
    final minute = timestamp.minute.toString().padLeft(2, '0');
    return '$hour:$minute';
  }
  
  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º
  String get formattedVolume {
    if (volumeMl >= 1000) {
      return '${(volumeMl / 1000).toStringAsFixed(1)}L';
    }
    return '${volumeMl.round()}ml';
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–∞–º
  String getElectrolytesSummary() {
    List<String> parts = [];
    
    if (totalSodiumMg > 0) {
      parts.add('Na: ${totalSodiumMg.round()}mg');
    }
    if (totalPotassiumMg > 0) {
      parts.add('K: ${totalPotassiumMg.round()}mg');
    }
    if (totalMagnesiumMg > 0) {
      parts.add('Mg: ${totalMagnesiumMg.round()}mg');
    }
    
    return parts.isEmpty ? '' : parts.join(' ‚Ä¢ ');
  }
}