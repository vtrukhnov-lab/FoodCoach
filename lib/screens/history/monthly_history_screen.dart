import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:math' as math;
import '../../main.dart';
import 'weekly_history_screen.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DailyData

class MonthlyHistoryScreen extends StatefulWidget {
  const MonthlyHistoryScreen({super.key});

  @override
  State<MonthlyHistoryScreen> createState() => _MonthlyHistoryScreenState();
}

class _MonthlyHistoryScreenState extends State<MonthlyHistoryScreen> {
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Map<String, DailyData> monthlyData = {};
  bool isLoadingMonthData = false;
  
  @override
  void initState() {
    super.initState();
    _loadMonthlyData();
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü
  Future<void> _loadMonthlyData() async {
    if (isLoadingMonthData) return;
    
    setState(() {
      isLoadingMonthData = true;
    });
    
    final prefs = await SharedPreferences.getInstance();
    final provider = Provider.of<HydrationProvider>(context, listen: false);
    final Map<String, DailyData> tempData = {};
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    for (int i = 0; i < 30; i++) {
      final date = DateTime.now().subtract(Duration(days: i));
      final dateKey = date.toIso8601String().split('T')[0];
      final intakesKey = 'intakes_$dateKey';
      
      final intakesJson = prefs.getStringList(intakesKey) ?? [];
      
      int totalWater = 0;
      int totalSodium = 0;
      int totalPotassium = 0;
      int totalMagnesium = 0;
      int coffeeCount = 0;
      
      for (String json in intakesJson) {
        final parts = json.split('|');
        if (parts.length >= 7) {
          final type = parts[2];
          final volume = int.tryParse(parts[3]) ?? 0;
          final sodium = int.tryParse(parts[4]) ?? 0;
          final potassium = int.tryParse(parts[5]) ?? 0;
          final magnesium = int.tryParse(parts[6]) ?? 0;
          
          if (type == 'water' || type == 'electrolyte' || type == 'broth') {
            totalWater += volume;
          }
          if (type == 'coffee') {
            coffeeCount++;
          }
          totalSodium += sodium;
          totalPotassium += potassium;
          totalMagnesium += magnesium;
        }
      }
      
      final waterPercent = provider.goals.waterOpt > 0 
          ? (totalWater / provider.goals.waterOpt * 100).clamp(0, 150).toDouble()
          : 0.0;
      
      tempData[dateKey] = DailyData(
        date: date,
        water: totalWater,
        sodium: totalSodium,
        potassium: totalPotassium,
        magnesium: totalMagnesium,
        waterPercent: waterPercent,
        coffeeCount: coffeeCount,
        intakeCount: intakesJson.length,
      );
    }
    
    setState(() {
      monthlyData = tempData;
      isLoadingMonthData = false;
    });
  }
  
  @override
  Widget build(BuildContext context) {
    if (isLoadingMonthData) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }
    
    return SingleChildScrollView(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          // –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: _buildRealHeatmapCalendar(),
          ).animate().fadeIn(),
          
          const SizedBox(height: 20),
          
          // –ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.purple.shade400, Colors.purple.shade600],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.purple.withOpacity(0.3),
                  blurRadius: 15,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: const Text(
                        'üèÜ',
                        style: TextStyle(fontSize: 28),
                      ),
                    ),
                    const SizedBox(width: 16),
                    const Expanded(
                      child: Text(
                        '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–µ—Å—è—Ü–∞',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        '${_calculateAchievements()} / 10',
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),
                // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                ..._buildAchievementsList(),
              ],
            ),
          ).animate().scale(delay: 200.ms),
          
          const SizedBox(height: 20),
          
          // –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 20),
                _buildMonthlyStats(),
              ],
            ),
          ).animate().slideY(delay: 300.ms),
        ],
      ),
    );
  }
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
  Widget _buildRealHeatmapCalendar() {
    final now = DateTime.now();
    final firstDayOfMonth = DateTime(now.year, now.month, 1);
    final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ (1=–ü–Ω, 7=–í—Å)
    final firstWeekday = firstDayOfMonth.weekday;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    
    return Column(
      children: [
        Text(
          _getMonthName(now.month) + ' ${now.year}',
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: weekDays.map((day) => Expanded(
            child: Center(
              child: Text(
                day,
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: Colors.grey.shade600,
                ),
              ),
            ),
          )).toList(),
        ),
        const SizedBox(height: 8),
        
        // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 7,
            childAspectRatio: 1,
            crossAxisSpacing: 4,
            mainAxisSpacing: 4,
          ),
          itemCount: (firstWeekday - 1) + lastDayOfMonth.day,
          itemBuilder: (context, index) {
            // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
            if (index < firstWeekday - 1) {
              return Container();
            }
            
            final day = index - (firstWeekday - 2);
            final date = DateTime(now.year, now.month, day);
            final dateKey = date.toIso8601String().split('T')[0];
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            final dayData = monthlyData[dateKey];
            final progress = dayData?.waterPercent ?? 0;
            
            // –ë—É–¥—É—â–∏–µ –¥–∞—Ç—ã
            if (date.isAfter(now)) {
              return Container(
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300, width: 1),
                ),
                child: Center(
                  child: Text(
                    '$day',
                    style: TextStyle(
                      color: Colors.grey.shade400,
                      fontSize: 12,
                    ),
                  ),
                ),
              );
            }
            
            return GestureDetector(
              onTap: () {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–Ω—è
                _showDayDetails(date, dayData);
              },
              child: Container(
                decoration: BoxDecoration(
                  color: _getHeatmapColor(progress),
                  borderRadius: BorderRadius.circular(8),
                  border: date.day == now.day 
                      ? Border.all(color: Colors.blue, width: 2)
                      : null,
                ),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        '$day',
                        style: TextStyle(
                          color: progress > 70 ? Colors.white : Colors.black87,
                          fontSize: 12,
                          fontWeight: date.day == now.day ? FontWeight.bold : FontWeight.w500,
                        ),
                      ),
                      if (progress > 0)
                        Text(
                          '${progress.toInt()}%',
                          style: TextStyle(
                            color: progress > 70 ? Colors.white70 : Colors.black54,
                            fontSize: 9,
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
        const SizedBox(height: 16),
        
        // –õ–µ–≥–µ–Ω–¥–∞
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _buildLegendItem('0%', Colors.grey.shade200),
            _buildLegendItem('1-50%', Colors.red.shade200),
            _buildLegendItem('51-80%', Colors.orange.shade300),
            _buildLegendItem('81-99%', Colors.blue.shade400),
            _buildLegendItem('100%+', Colors.green.shade500),
          ],
        ),
      ],
    );
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–Ω—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
  void _showDayDetails(DateTime date, DailyData? data) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '${date.day} ${_getMonthName(date.month)}',
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),
              if (data != null) ...[
                Row(
                  children: [
                    Icon(Icons.water_drop, color: Colors.blue.shade600),
                    const SizedBox(width: 8),
                    Text('–í–æ–¥–∞: ${data.water} –º–ª (${data.waterPercent.toInt()}%)'),
                  ],
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.bolt, color: Colors.orange.shade600),
                    const SizedBox(width: 8),
                    Text('Na: ${data.sodium} –º–≥, K: ${data.potassium} –º–≥'),
                  ],
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.coffee, color: Colors.brown.shade600),
                    const SizedBox(width: 8),
                    Text('–ö–æ—Ñ–µ: ${data.coffeeCount} —á–∞—à–µ–∫'),
                  ],
                ),
              ] else ...[
                const Text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å'),
              ],
              const SizedBox(height: 20),
            ],
          ),
        );
      },
    );
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—É–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
  List<Widget> _buildAchievementsList() {
    final achievements = _getAchievementsData();
    
    return achievements.map((achievement) {
      final isUnlocked = achievement['unlocked'] as bool;
      final progress = achievement['progress'] as double;
      
      return Padding(
        padding: const EdgeInsets.only(bottom: 12),
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(isUnlocked ? 0.25 : 0.15),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: Colors.white.withOpacity(isUnlocked ? 0.4 : 0.2),
              width: 1.5,
            ),
          ),
          child: Row(
            children: [
              // –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(isUnlocked ? 0.3 : 0.15),
                  shape: BoxShape.circle,
                ),
                child: Center(
                  child: Opacity(
                    opacity: isUnlocked ? 1.0 : 0.6,
                    child: Text(
                      achievement['icon'] as String,
                      style: const TextStyle(
                        fontSize: 24,
                      ),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      achievement['title'] as String,
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                        decoration: isUnlocked ? TextDecoration.none : null,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      achievement['description'] as String,
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.85),
                        fontSize: 13,
                      ),
                    ),
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                    if (!isUnlocked && progress > 0) ...[
                      const SizedBox(height: 8),
                      ClipRRect(
                        borderRadius: BorderRadius.circular(6),
                        child: LinearProgressIndicator(
                          value: progress,
                          backgroundColor: Colors.white.withOpacity(0.2),
                          valueColor: AlwaysStoppedAnimation(
                            Colors.white.withOpacity(0.7),
                          ),
                          minHeight: 6,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${(progress * 100).toInt()}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.7),
                          fontSize: 11,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
              
              // –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              if (isUnlocked)
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.check,
                    color: Colors.white,
                    size: 20,
                  ),
                )
              else
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.lock_outline,
                    color: Colors.white.withOpacity(0.6),
                    size: 18,
                  ),
                ),
            ],
          ),
        ),
      );
    }).toList();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
  List<Map<String, dynamic>> _getAchievementsData() {
    if (monthlyData.isEmpty) {
      return List.generate(10, (index) => {
        'icon': 'üîí',
        'title': '–ó–∞–≥—Ä—É–∑–∫–∞...',
        'description': '–ü–æ–¥–æ–∂–¥–∏—Ç–µ',
        'unlocked': false,
        'progress': 0.0,
      });
    }
    
    final provider = Provider.of<HydrationProvider>(context, listen: false);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    int perfectDays = 0;
    int goodDays = 0;
    int streakDays = 0;
    int currentStreak = 0;
    int earlyBirdDays = 0;
    int totalWater = 0;
    int daysWithElectrolytes = 0;
    int consistentDays = 0;
    int weekendWarriorDays = 0;
    double avgPercent = 0;
    
    final sortedData = monthlyData.values.toList()
      ..sort((a, b) => a.date.compareTo(b.date));
    
    for (var data in sortedData) {
      // –ü–æ–¥—Å—á–µ—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (data.waterPercent >= 100) perfectDays++;
      if (data.waterPercent >= 80) goodDays++;
      if (data.water > 0) {
        currentStreak++;
        if (currentStreak > streakDays) streakDays = currentStreak;
      } else {
        currentStreak = 0;
      }
      
      totalWater += data.water;
      avgPercent += data.waterPercent;
      
      if (data.sodium >= provider.goals.sodium * 0.7) {
        daysWithElectrolytes++;
      }
      
      if (data.intakeCount >= 5 && data.intakeCount <= 8) {
        consistentDays++;
      }
      
      if ((data.date.weekday == 6 || data.date.weekday == 7) && data.waterPercent >= 90) {
        weekendWarriorDays++;
      }
    }
    
    avgPercent = sortedData.isNotEmpty ? avgPercent / sortedData.length : 0;
    
    return [
      {
        'icon': 'üíé',
        'title': '–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è',
        'description': '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å 100% —Ü–µ–ª—å—é',
        'unlocked': streakDays >= 7 && perfectDays >= 7,
        'progress': streakDays >= 7 ? 1.0 : streakDays / 7.0,
      },
      {
        'icon': 'üî•',
        'title': '–û–≥–æ–Ω—å!',
        'description': '14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
        'unlocked': streakDays >= 14,
        'progress': math.min(streakDays / 14.0, 1.0),
      },
      {
        'icon': '‚≠ê',
        'title': '–ó–≤–µ–∑–¥–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
        'description': '20+ –¥–Ω–µ–π —Å —Ü–µ–ª—å—é ‚â•80%',
        'unlocked': goodDays >= 20,
        'progress': math.min(goodDays / 20.0, 1.0),
      },
      {
        'icon': 'üíß',
        'title': '–í–æ–¥—è–Ω–æ–π',
        'description': '–í—ã–ø–∏—Ç—å 100+ –ª–∏—Ç—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü',
        'unlocked': totalWater >= 100000,
        'progress': math.min(totalWater / 100000.0, 1.0),
      },
      {
        'icon': '‚ö°',
        'title': '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å',
        'description': '15+ –¥–Ω–µ–π —Å –Ω–æ—Ä–º–æ–π —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤',
        'unlocked': daysWithElectrolytes >= 15,
        'progress': math.min(daysWithElectrolytes / 15.0, 1.0),
      },
      {
        'icon': 'üéØ',
        'title': '–°–Ω–∞–π–ø–µ—Ä',
        'description': '10 –¥–Ω–µ–π —Å —Ç–æ—á–Ω—ã–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ —Ü–µ–ª—å (95-105%)',
        'unlocked': perfectDays >= 10,
        'progress': math.min(perfectDays / 10.0, 1.0),
      },
      {
        'icon': 'üìà',
        'title': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        'description': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Å—è—Ü–∞ >85%',
        'unlocked': avgPercent >= 85,
        'progress': math.min(avgPercent / 85.0, 1.0),
      },
      {
        'icon': 'üåÖ',
        'title': '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
        'description': '15 –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—Ç—å –¥–æ 8:00',
        'unlocked': earlyBirdDays >= 15,
        'progress': math.min(earlyBirdDays / 15.0, 1.0),
      },
      {
        'icon': 'üéÆ',
        'title': '–í—ã—Ö–æ–¥–Ω–æ–π –≤–æ–∏–Ω',
        'description': '–í—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –º–µ—Å—è—Ü–∞ —Å —Ü–µ–ª—å—é ‚â•90%',
        'unlocked': weekendWarriorDays >= 8,
        'progress': math.min(weekendWarriorDays / 8.0, 1.0),
      },
      {
        'icon': 'üëë',
        'title': '–ö–æ—Ä–æ–ª—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
        'description': '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å 9 –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
        'unlocked': _calculateAchievements() >= 9,
        'progress': _calculateAchievements() / 9.0,
      },
    ];
  }
  
  // –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  int _calculateAchievements() {
    if (monthlyData.isEmpty) return 0;
    
    final provider = Provider.of<HydrationProvider>(context, listen: false);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    int perfectDays = 0;
    int goodDays = 0;
    int streakDays = 0;
    int currentStreak = 0;
    int earlyBirdDays = 0;
    int totalWater = 0;
    int daysWithElectrolytes = 0;
    int weekendWarriorDays = 0;
    double avgPercent = 0;
    
    final sortedData = monthlyData.values.toList()
      ..sort((a, b) => a.date.compareTo(b.date));
    
    for (var data in sortedData) {
      if (data.waterPercent >= 100) perfectDays++;
      if (data.waterPercent >= 80) goodDays++;
      if (data.water > 0) {
        currentStreak++;
        if (currentStreak > streakDays) streakDays = currentStreak;
      } else {
        currentStreak = 0;
      }
      
      totalWater += data.water;
      avgPercent += data.waterPercent;
      
      if (data.sodium >= provider.goals.sodium * 0.7) {
        daysWithElectrolytes++;
      }
      
      if ((data.date.weekday == 6 || data.date.weekday == 7) && data.waterPercent >= 90) {
        weekendWarriorDays++;
      }
    }
    
    avgPercent = sortedData.isNotEmpty ? avgPercent / sortedData.length : 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
    int unlockedCount = 0;
    if (streakDays >= 7 && perfectDays >= 7) unlockedCount++;
    if (streakDays >= 14) unlockedCount++;
    if (goodDays >= 20) unlockedCount++;
    if (totalWater >= 100000) unlockedCount++;
    if (daysWithElectrolytes >= 15) unlockedCount++;
    if (perfectDays >= 10) unlockedCount++;
    if (avgPercent >= 85) unlockedCount++;
    if (earlyBirdDays >= 15) unlockedCount++;
    if (weekendWarriorDays >= 8) unlockedCount++;
    
    return unlockedCount;
  }
  
  // –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  Widget _buildMonthlyStats() {
    if (monthlyData.isEmpty) {
      return const Text('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    }
    
    final provider = Provider.of<HydrationProvider>(context);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    int totalWater = 0;
    int totalSodium = 0;
    int totalPotassium = 0;
    int totalMagnesium = 0;
    int activeDays = 0;
    int perfectDays = 0;
    
    monthlyData.values.forEach((data) {
      if (data.water > 0) activeDays++;
      if (data.waterPercent >= 100) perfectDays++;
      totalWater += data.water;
      totalSodium += data.sodium;
      totalPotassium += data.potassium;
      totalMagnesium += data.magnesium;
    });
    
    final avgWater = activeDays > 0 ? totalWater ~/ activeDays : 0;
    final avgSodium = activeDays > 0 ? totalSodium ~/ activeDays : 0;
    final avgPotassium = activeDays > 0 ? totalPotassium ~/ activeDays : 0;
    final avgMagnesium = activeDays > 0 ? totalMagnesium ~/ activeDays : 0;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏
    final waterTrend = avgWater > provider.goals.waterOpt * 0.9;
    final sodiumTrend = avgSodium > provider.goals.sodium * 0.8;
    
    return Column(
      children: [
        _buildMonthStatRow(
          icon: 'üíß',
          label: '–û–±—â–∏–π –æ–±—ä–µ–º –≤–æ–¥—ã',
          value: '${(totalWater / 1000).toStringAsFixed(1)} –ª',
          subValue: '–í —Å—Ä–µ–¥–Ω–µ–º $avgWater –º–ª/–¥–µ–Ω—å',
          color: Colors.blue,
        ),
        const SizedBox(height: 16),
        _buildMonthStatRow(
          icon: 'üìÖ',
          label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏',
          value: '$activeDays –∏–∑ 30',
          subValue: '–î–Ω–µ–π —Å –∏–¥–µ–∞–ª—å–Ω–æ–π —Ü–µ–ª—å—é: $perfectDays',
          color: Colors.green,
        ),
        const SizedBox(height: 16),
        _buildMonthStatRow(
          icon: '‚ö°',
          label: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã (—Å—Ä–µ–¥–Ω–µ–µ)',
          value: 'Na: $avgSodium –º–≥',
          subValue: 'K: $avgPotassium –º–≥, Mg: $avgMagnesium –º–≥',
          color: Colors.orange,
        ),
        const Divider(height: 32),
        Row(
          children: [
            Expanded(
              child: _buildTrendCard(
                '–í–æ–¥–∞',
                waterTrend ? '+' : '-',
                waterTrend,
                waterTrend ? '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤–æ–¥—ã',
                Colors.blue,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildTrendCard(
                '–°–æ–ª—å',
                sodiumTrend ? '‚úì' : '‚Üì',
                sodiumTrend,
                sodiumTrend ? '–í –Ω–æ—Ä–º–µ' : '–ú–∞–ª–æ–≤–∞—Ç–æ',
                Colors.orange,
              ),
            ),
          ],
        ),
      ],
    );
  }
  
  // –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
  Widget _buildMonthStatRow({
    required String icon,
    required String label,
    required String value,
    required String subValue,
    required Color color,
  }) {
    return Row(
      children: [
        Container(
          width: 48,
          height: 48,
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Center(
            child: Text(icon, style: const TextStyle(fontSize: 24)),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: TextStyle(
                  color: Colors.grey.shade600,
                  fontSize: 13,
                ),
              ),
              Text(
                value,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
              ),
              Text(
                subValue,
                style: TextStyle(
                  color: Colors.grey.shade500,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  
  Widget _buildTrendCard(String title, String indicator, bool isPositive, 
      String description, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: isPositive ? Colors.green.shade50 : Colors.orange.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isPositive ? Colors.green.shade200 : Colors.orange.shade200,
        ),
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                isPositive ? Icons.trending_up : Icons.trending_down,
                color: isPositive ? Colors.green : Colors.orange,
                size: 20,
              ),
              const SizedBox(width: 4),
              Text(
                title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isPositive ? Colors.green.shade700 : Colors.orange.shade700,
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            description,
            style: TextStyle(
              fontSize: 11,
              color: isPositive ? Colors.green.shade600 : Colors.orange.shade600,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  
  Widget _buildLegendItem(String label, Color color) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 12,
            height: 12,
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(width: 4),
          Text(
            label,
            style: const TextStyle(fontSize: 10),
          ),
        ],
      ),
    );
  }
  
  String _getMonthName(int month) {
    const months = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    return months[month - 1];
  }
  
  Color _getHeatmapColor(double progress) {
    if (progress == 0) return Colors.grey.shade200;
    if (progress < 50) return Colors.red.shade200;
    if (progress < 80) return Colors.orange.shade300;
    if (progress < 100) return Colors.blue.shade400;
    return Colors.green.shade500;
  }
}